Submission Title,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Desired Prizes,Built With,Notes,Team Colleges/Universities,Additional Team Member Count,"Does Your Hack Need To Stay At Your Current Table? (I.E. Hardware, Vr/Ar Hacks That Are Difficult To Move.) If So, What Table Number Are You At?"
Untitled,"",Draft,Pending,Manage team,04/08/2022 21:37:29,"","",,"","",,University of Maryland - College Park,0,""
Home Sweet Home,https://bitcamp2022.devpost.com/submissions/320195-home-sweet-home,Submitted (Gallery/Visible),Pending,Submit,04/08/2022 21:50:38,"Inspiration

Determined to make use of the real estate data from CoStar Group and inspired by the myriad of Buzzfeed quizzes we’ve taken to derive some modicum of personality, our hack sought to link our users with their ideal living space in D.C. through the humor of seemingly unrelated questions. 

From this idea, we decided to create a web application with a responsive form that would return different house listings depending on user responses (including user priorities) in order to help users find what they really want - a house to call home.

Given that this was many of our first hackathons as hackers, we tried our best to come up with something fun and interesting while utilizing our pre-existing knowledge and applying it to different technologies.

What it does

Home Sweet Home seeks to provide users with their ideal living space in the D.C. area by matching public real estate data to each user’s personal preferences - all wrapped up in some classic gen z humor. 

Extending the matching capabilities beyond what is the most relevant to our real estate database, we allow the user to select what their priorities are and weigh the corresponding categories of filtration accordingly.

How we built it

CockroachDB (database hosting)
Python Pandas and Numpy (data cleansing)
Python Django (server side scripts)
HTML, CSS, Bootstrap (front end)

Challenges we ran into


Django and HTML incompatibility with radio buttons >:C


Accomplishments that we're proud of


Figuring out CSV migration for CockroachDB
Creating a dynamic website with Django 
Deploying a website 


What we learned


Teamwork makes the dream work: Even though all of us have different skill levels and fortes, it was everyone’s willingness to learn and fill in the gaps that allowed us to get as far as we did.
Debugging is the most important time sink - even if it feels like you could be getting further by ignoring a certain part of the project not working, getting something to work the way you intended is worth the time and effort. 


What's next for Home Sweet Home


Extension of analytics of users -> what are the most popular location preferences in D.C. for users 

","http://44ad-65-113-61-98.ngrok.io/, https://github.com/aphung1/BitCamp2022, https://docs.google.com/presentation/d/14MxvttmGL65ycwiI6fe8g6H7ysunRXRERHK0o4JsBH0/edit?usp=sharing",,"Best Razzle Dazzle Hack - Bitcamp, Best Use of Real Estate Data - CoStar Group, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","python, django, pandas, numpy, bootstrap, cockroachdb, sql, html5, css, javascript",,"University of Maryland, College Park, University of Maryland - College Park",3,""
Untitled,"",Draft,Pending,Manage team,04/08/2022 22:04:21,"","",,"","",,University of Maryland - College Park,0,""
Traveling at Home,"",Draft,Pending,Project overview,04/08/2022 22:06:54,"","",,"","",,umbc,0,""
Monkey Coin,"",Draft,Pending,Project overview,04/08/2022 23:23:17,"","",,"","",,"",0,""
Morse Code Translator,"",Draft,Pending,Project overview,04/08/2022 23:25:06,"","",,"","",,University of Maryland - Baltimore County,0,""
What I Can Do Today,https://bitcamp2022.devpost.com/submissions/320219-what-i-can-do-today,Submitted (Gallery/Visible),Pending,Submit,04/08/2022 23:54:04,"Inspiration

What I Can Do Today is a web app that helps Gen Z navigate and approach challenging issues that impact our world.  Our generation is growing up in a time of uncertainty and many of us have reported feeling anxiety, depression, and hopelessness with glooming existential risks such as climate change, war, and nuclear threats. It can feel like it's impossible to have an impact on the future but we believe that Gen Z can tackle the challenges that lie ahead in our world as creative and resilient digital natives of our time. We created this app to help our friends who share the same fears as us and have struggled with managing their mental health. Making a change starts with our center of control and we want to help our generation make small steps toward their goals, and start small to plan for a better future for our planet. 

What it does

Our app introduces young people to learn about different issues and find out how they can help solve problems in their community.

How we built it

We built it using MongoDB, Mongoose, Html, Ejs, Css, and Bootstrap for the navbar.

Challenges we ran into

It was our first time using MongoDB for our database so we ran into challenges with structuring the data. We also switched from a MERN stack to a MEN stack so we had to change the format of many of our files.

Accomplishments that we're proud of

What we learned

We learned how to use MongoDB and practiced making apps using Ejs templates and Mongoose.

What's next for What I Can Do Today
",https://what-i-can-do-today.herokuapp.com/,,"Best Educational Hack - Bloomberg, Best Social Good Hack - Bitcamp","mongodb, mongoose, html, ejs, css, bootstrap",,"University of Edinburgh, The University of Glasgow",1,No
WilderTrace,https://bitcamp2022.devpost.com/submissions/320221-wildertrace,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 00:01:54,"Inspiration

Thinking about the theme of this year’s Bitcamp “Adventure Awaits” was a calling card to the wild. We also knew that we wanted to work with databases and data visualization programs. After stumbling upon movebank.org, we had an awakening to visualize animal migration paths because of the importance of animals in our ecosystems. We realized the exponential growth of urbanization and the drastic effects of climate change would greatly impact these animals and their migration patterns and decided that this is an important path to take. Not only would visualizing these paths be cool to see, but we could actually visualize the impact of construction projects or climate disasters on our ecosystems to better understand how to protect animals. 
And who doesn’t love animals?!? Animal migration is a technique developed by Albert Einstein.
Zebras are miraculous creatures who spend their time wandering the savannahs of central Africa. They spend their time avoiding lions and hiding under the stomachs of elephants. Zebras generally eat the burnt grass of the lands, and chomp for up to 27 hours a day. Even though Zebras supposedly migrate, they still are too dumb to leave the savannah and reach the civilized world of the African jungles.*

What it does

Our data visualization tracks the different migratory patterns of animals on different points on the world map. It maps the paths of animals over the course of many days with observations as close as a few hours apart to visually trace an animal’s path. 

How we built it

This project consisted of 3 parts. The parser, the api, and the front end. The parser was used to take raw csv data to process it until it was ready to be pushed onto the MongoDB database. The API served as the middle man between the front end and the database (build with node.js). The front end was built purely on react and powered the map visualizations.

Challenges we ran into

We were very eager to learn and try new technologies like Spring Boot, MongoDB, and deck.gl, which set us back since we had to spend time learning and debugging the technologies. Since we all had previous experience with Java, we wanted to use Java back-end, leading us to use Spring Boot to provide zebra data to connect to the front-end. Even though we enjoyed working on java, we eventually decided that Node.JS was better suited for the time-constraint. Another difficulty we had was producing the json data on the localHost, as well as creating the controller due to our limited knowledge of Spring Boot and Mongo (since we didn’t know how to obtain the data from the database)

Accomplishments that we're proud of

Learning a lot of software tools in such a short time

What we learned

We learned basics of Spring boot and MongoDB. Through tutorials we figured out how to use databases through MongoDB to send data points from them to our front-end to be able to plot them on our map. Furthermore, we also used tutorials to figure out how to work with maps and add points onto them. As this is the first hackathon most of our teammates, we also learned how to work as a team and communicate together to efficiently complete our project to the best of our ability.

What's next for WilderTrace?

COMING SOON: TURTLES!!!
*might be a joke.
Keep on modifying by


Continue improving to make the interface and code cleaner 
Working on incorporating urbanization variables to get a better understanding of how human construction impacts animal migration
Identify trends and potentially identify climate variables into our project and see how they correlate with animal migration patterns. 
Work on adding a pop-up in the corner that will state more information about the individual animal itself
Have a slider for the years and be able to navigate from one point to the next
Making it easier to navigate around the map
Be able to zoom into individual animals by clicking on its marker
Be able to see all the individuals of a species by choosing it with the dropdown 

",https://github.com/Tim-Vuong/Bitcamp,,"Best Educational Hack - Bloomberg, Best First Time Hack - Bitcamp","mongodb, deck.gl, react, javascript, html, java, css3, csv, node.js, springboot",,University of Maryland - College Park,3,""
SearchGenius,"",Draft,Pending,Project overview,04/09/2022 01:38:00,"","",,"","",,University of Maryland - College Park,0,""
MusePay,https://bitcamp2022.devpost.com/submissions/320300-musepay,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 09:08:09,"

MusePay: Simple and secure spending and lending within social groups and families.

A social hub for friends and family to monitor finance, a simple and secure platform for lending and spending, and a non-destructive companion to one’s buying experience. Spending other people's money has never been easier and more secure.

How it Works

Sending Muse Hashes


Create an account on our platform
Connect your bank/debit card as a funding source
Begin sharing Muse Hashes! Set merchant locks (or not) and spending limits, and have a unique hash generated (keep it a secret between you and your friend!) that acts as a key to a MusePay Virtual Credit Card.



Using Muse Hashes


Install our Google Chrome Extension
Copy your hash to your clipboard
When you are ready to pay, simply right-click, and press Pay With Muse Hash.
 


Inspiration

Driven by the want to create a finance-related project from our collective interest in fintech, the idea came about while musing over (get it) the technologies we know how to use and ones that we want to learn and would be cool to use. 

Tech Stack & Development Process


We began brainstorming ideas and creating diagrams using Figma. Using Figma's FigJam application, we were able to collaborate and quickly see each other's ideas and bounce them off of each other.





Once we came up with an idea, FigJam was again our software of choice to create a general flowchart and list of technologies we needed to use and connect together.

We then used Figma to design our UI and the components that we wanted to be made.

The frontend was built entirely off of React, CSS, and Bootstrap, written with Typescript. 
Our user login/authentication system is powered by Google's Firebase platform.
We stored our users' data using SQL on CockroachDB Serverless. Their platform was very easy for us to learn to use (as complete SQL novices) and it was quick for us to deploy and utilize, as well as debug. The performance of the database also fit our needs well.

Our application's server-side backend was driven by NodeJS.
We chose Express as our API framework of choice because of our general familiarity and its simplicity, as well as decent performance.
Deciding on what financial platforms we would build our project on was a big challenge. We considered many different options, each with its own benefits. Some platforms, such as Plaid, provided a simple and convenient way to get a user's banking data, but it didn't have options for things such as virtual credit cards. We decided instead to opt for Synapse. Synapse had a lot of benefits that was perfect for our use case and our possible future use cases: Virtual Cards, Credit/Loans, Banking solutions, and Crypto solutions. We currently only use Synapse for its VCCs and banking solutions, but in the future we plan on using it for credit and loans, as well as cryptocurrency.
The final part of our project is the Chrome extension, which builds upon the Chrome Web API to provide features that are less intrusive but still powerful.



Features


Create merchant locked and spend restricted codes that are tied to individual virtual credit cards
Link your bank account/debit card as a funding source
Create a private group with your friends and family to more easily share hashes and share spending
See all your spending in easy to understand visualizations
Spend hashes in 2 clicks with the Chrome Extension


Challenges we ran into

Bitcamp was an incredible experience for our team and for some of us our first-ever in-person hackathon. We had to deal with fatigue from working for so long, surviving on only a couple hours (or less) of sleep. In terms of the development process, it was very rough. When creating our authentication/login system, we used the Auth0 service first, but we ran into issues with cross-domain sessions and managing a react app and API on a single Heroku instance. This led to us creating an authorization system on Firebase instead.

When working with Syanpse, we ran into issues with their sandbox environment, documentation that was not as detailed as it needed to be, and an API wrapper library that only covered half of the API. We had to figure out RSA PKCS1 encryption for credit card information and to pull the API requests from a Postman collection that they had, but even in that collection some of the requests were not usable directly and required a lot of debugging. 

Another challenge we faced was CORS, or cross-origin resource sharing. Most of the time, you can only access APIs and other web resources from the same domain as the request origin, but because we had to deploy our API separately from our main web application, we had to figure out how to allow CORS to these other domains. 

The overall most challenging part was figuring out how to structure and connect all parts of our multi-faceted application together and keep it all organized. We had to create data structures for our databases and create class structures that would be most efficient and organized. Classes like our Database manager and Synapse manager were very complex with a ton of challenges faced in during their creation, but when we were able to get it all integrated properly, everything fell together perfectly.

What we learned

Nobody in our team has used SQL before, let alone a SQL database provider like CockroachDB before. We were able to fully learn how to use and deploy it very quickly, and now feel confident in utilizing this technology in all of our future projects.

What's next for MusePay

Credit and Cryptocurrency are two big services that Synapse offers that we want to take advantage of. With their Credit Hub we would be able to create Pay in Installments Muses, Subscription Muses, Muses that can build credit, and Cryptocurrency based Muses.

View our FigJam Document Here

View our Figma Document Here
",https://github.com/matthewnanas/bitcamp22,,"Best Moonshot Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","react, javascript, node.js, typescript, firebase, cockroach, sql, bootstrap, chrome, synapse, figma, figjam, express.js",,"Stanford University, poolesville high school",3,no
Untitled,"",Draft,Pending,Manage team,04/09/2022 09:52:46,"","",,"","",,"",0,""
The Integrating Factor,"",Draft,Pending,Project overview,04/09/2022 11:11:09,"","",,"","",,University of Maryland - College Park,0,""
pizzamaking.tech,https://bitcamp2022.devpost.com/submissions/320392-pizzamaking-tech,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 13:14:47,"What it does

Website about the technology that goes into pizza making

How we built it

domain.com and its integrated website builder

What's next for pizzamaking.tech

free trial expiration. rip
",http://pizzamaking.tech,,Best Domain Name from Domain.com - MLH,domain.com,,University of Maryland - College Park,0,no
Untitled,"",Draft,Pending,Manage team,04/09/2022 14:10:55,"","",,"","",,"",0,""
Vigilanterp,https://bitcamp2022.devpost.com/submissions/320425-vigilanterp,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 14:34:52,"Inspiration

My family has been relied on the Neighbors App to keep track of suspicious activity around our neighborhood. People can anonymously report a crime or a suspected crime and notify their neighbors. These reports are logged and shown on a map to give an overview of any threats around the neighborhood. 

Terp nightlife is a huge part of socializing at UMD. We decided to take a similar approach as the Neighbors App to protecting vulnerable Terps around campus. Imagine you and your friends are walking back to your dorm at 10pm, and a strange old man begins to follow you. You manage to evade him, but you're worried he might try to bother someone else. If you don't feel like calling the police, you can file an anonymous report on Vigilanterp describing the suspect, incident and auto-recorded location of the incident. Incidents will be displayed for all Terps to see on a real-time icon-coded map. A report can consist of a form and also a recording, either of yourself, a situation or a suspicious person. These recordings are a part of the public report and will be visible to UMPD through the cloud. 

What it does

When you open the app, you will be prompted to either file a report or view the report map. If you choose to file a report, you will categorize your report and fill out a form. An optional recording can accompany your report to provide further context or evidence. Recordings are automatically uploaded to the cloud, so police have instant access! Once you have filed your report, it will appear on the live incident map as a floating marker at the location where your incident happened, accessible by police and nearby users. 

How we built it

Using Flutter, a Dart framework for developing cross-platform mobile apps, we built our front-end and designed a simple UI. We utilized a plethora of Flutter packages to record, compress and upload videos to Firebase. Firebase is the basis of our back-end and stores user recordings on the cloud. Forms are also stored in the cloud using Firestore.

Challenges we ran into

Besides the hours of package installations and initial bug fixing, some challenges we encountered were...


Storage limitations on Firebase (incentivized adding video compression)
Work flow (learned and used Git and LiveShare VS plugins for workflow)
Jason and Yuvan are Flutter experts. Andrew (me) was not, so I spent plenty of time reading docs and learning
Version conflicts between Firebase and Camera APIs
Merging work on UI with back-end code
What concerns do people have while socializing at night? We asked a bunch of friends what they thought, and used feedback to design our different incident categories.


Accomplishments that we're proud of


Effective video compression that reduced cloud storage demands 3x
A great alternative to calling the police in many situations we've all experienced
A working app! We turned an idea into a full app that can help keep Terps safe in a matter of hours.
Learning! We all learned new APIs, languages and frameworks in the process.
Having this final product after only one/two days of work is something our group is proud of as a whole.


What we learned


Andrew 


Learned tons about Flutter and Dart development. 
Experience using Git and VS Code Live Share for collaboration.
Flutter camera API, location/coordinates API
UI design using widget-based approach
Uploading forms and videos to the cloud
Video compression for cloud storage maximization

Yuvan


Furthered my expertise with Flutter and Dart.
Learned more about Firebase and pushing live data, assets, and recordings to the cloud.
User interface (UI/UX) design.
Fetching immediate location coordinates using API's.

Jason 


Gained new experience with Flutter camera API.
Learned how to manipulate video files and upload to the cloud.
Learned techniques to simplify UI, including abstractions and use of shadows.
Practiced efficiency techniques in rapid mobile app prototyping.



What's next for Vigilanterp

In order to take Vigilanterp to market, we need to develop a police-side application for easy access to our database. Police can access data directly through our database, but we need to convert our raw data into simplified, AI-powered data and alerts to provide police with the most useful reports possible. Vigilanterp is an app that could truly change the game for keeping students and police safe and informed.
",https://github.com/jsteinberg7/vigilanterp/,https://youtu.be/uxaKv8_SLJ0,"Best Use of Google Cloud - MLH, Best Social Good Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","flutter, dart, cloud, firebase, google-cloud, git, github, camera, gps",,University of Maryland - College Park,2,""
Real Estate Viewer,https://bitcamp2022.devpost.com/submissions/320426-real-estate-viewer,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 14:40:16,"Inspiration

A Huge dataset of real estate was given.

What it does

It displays the data in a map format and users will be able to save the ones they like.

How we built it

Angular 13, Mapbox.js, Node.js, Java, CockcroachDB

Challenges we ran into

Dataset is not the very complete
First time using node.js to build backend api. 

Accomplishments that we're proud of

Able to visualized the map and also implement authentication with JWT token, but refreshing token and saving the token to have a valid session is still not done.

What we learned

node js api creation is so much easier than Spring Boot, but it's not as robust as the Spring Boot framework. A lot of the work is done with the framework in Spring Boot while node.js is more lightweight.

What's next for Real Estate Viewer

Adding filter functions to the viewer, and perhaps adding CDN server for storing the pictures. Complete login function with JWT sessions. Complete ""like"" and ""share"" functions.
","https://timeleapmachine.ai-amadeus.com, https://github.com/ericyu049/timeleapmachine, https://github.com/ericyu049/timeleapmachine-api",,"Best Use of Real Estate Data - CoStar Group, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","angular.js, node.js, mapbox, cockcroachdb",,"",0,""
Untitled,"",Draft,Pending,Manage team,04/09/2022 14:51:05,"","",,"","",,University of Maryland - College Park,0,""
Bits in the wall,https://bitcamp2022.devpost.com/submissions/320434-bits-in-the-wall,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 15:04:02,"Inspiration

We were inspired by the hit worldwide tv show series ""Hole in the Wall"". In that game show, participants have to move their body into a certain position before a moving wall comes and knocks them down. While we can't have a giant moving wall like the game show, we liked the idea of a game where you have to move to a position before time runs out.

We think this project has exciting applications in fitness and exercise. It can get people to stretch and move around, or even do yoga poses! We think everybody that's been sitting in their chair and coding for a long time (maybe even at this hackathon) should use this app to get up and move.

What it does

The object of the game is to fit your body inside the zone outlined in the blue area when the timer hits 0.

When you start the game, you are prompted to calibrate your body. Position your webcam so that it captures your whole body, then stand inside the zone for 3 seconds. After that, the game starts.

If your body's keypoints drawn by MoveNet collide with the blue area, the circle in the top right corner will turn red, and the colliding points will turn green. If you are in the zone when the timer hits 0, you pass and you get 1 point. Otherwise, you fail. After you fail 3 times, the game ends.

How we built it

to display the game and it's screens, along with capturing video, we used python's OpenCV package. To predict the body skeleton, we used MoveNet. 

Challenges we ran into

The first challenge we ran into was finding a good way to capture somebody's position. We were looking at semantic segmentation models at first, but they were slower. After finding MoveNet, we decided to pivot to using it instead.
The next large challenge was getting the python script we had to run on all of our different machines. Some of us had apple computers, and we had to spend a few hours getting the correct python, tensorflow, and opencv versions.
The next challenge was understanding the numpy array format that images were dealt with in our source code, and finding methods to do the tasks we needed to detect collision with our mask, as well as creating different while loops for different parts of the game.

Another challenge was attempting (unsuccessfully) to host a web version of this application.  When we first tested the model, we made a small Django site to relay a user's webcam feed to a local server running the model.  Excited, we sought to host it on a DigitalOcean box so we could have 24/7 runtime.  Unfortunately, although we did not run into any installation problems with the box, the specs were insufficient to run TensorFlow, so we tried a raspberry pi.  After hours trying to install a version of Python that supports TensorFlow, we realized that the pi's ARM processor was also insufficient.  We decided to open an ssh tunnel to one of our laptops instead.  As we developed the rest of the application, we tried to port the entire game to a website, but the site was very laggy.  We tried using WebSockets to stream a constant game feed from the server, but unfortunately that did not work.

Accomplishments that we're proud of

Creating the game

What we learned

We learned how OpenCV draws pictures and how pictures are stored in numpy arrays. We also learned how to switch between python versions and install packages, and how to collaborate using GitHub.

What's next for Hole in the wall

If we were to expand on this project, here are some things we thought of adding:


difficulty levels
multiplayer
leaderboard system
keypoint target positions you have to hit

","https://github.com/sbeven/bitcamp2022-v2, https://drive.google.com/file/d/1NyHcpkJPyMBwHK4AI63AgLL5BQw57mkV/view?usp=sharing",https://youtu.be/N6dKyX4EKvg,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp","python, tensorflow, movenet, opencv",,University of Maryland - College Park,3,we want a corner or edge table (A1)
Codle,https://bitcamp2022.devpost.com/submissions/320435-codle,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 15:10:00,"Inspiration

Our inspirations for this project are the preexisting applications LeetCode (every CS major's bane) and Wordle (a word-guessing game from the New York Times).

What it does

Codle is a daily programming problem site that invokes the inviting nature of a Wordle problem. Users get six attempts to create a well-rounded solution to the presented coding problem, where each attempt will be assessed on five unknown tests.

How we built it

We used a ReactJS webpage hosted on GitHub Pages for the frontend of the application, and we interfaced between that and a Python Flask API hosted on Google Cloud to retrieve problems and assess each solution attempt.

Challenges we ran into

We struggled with allowing code which was entered into the textbox on the webpage to be run and tested, setting up the Flask API itself, and putting the Flask API on Google Cloud.

Accomplishments that we're proud of

We are proud that we we were able to submit a fully-featured, finished project that is really fun to play!

What we learned

We learned how to set up and host a Flask API, how to use Python exec() statements, and how to use JavaScript document selectors in more depth.

What's next for Codle

We plan to continue with daily coding problems for Codle, making sure that this easy-to-learn coding game becomes a mainstay in the programming community.
","https://pcbitcamp22.github.io/codle/, https://github.com/PCbitcamp22",https://youtu.be/g1EegQue6jY,"Best Use of Google Cloud - MLH, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp","react, flask, python, javascript, html, css, google-cloud",,University of Maryland - College Park,3,No
Tango,https://bitcamp2022.devpost.com/submissions/320445-tango,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 15:31:26,"How we started

My teammates and I love music and wanted to do something with Spotify's API and dive deeper into the sound waves of music. Our idea is that people who listen to similar-sounding music probably have a lot more in common than just music taste. This is how Tango was born.

What is Tango?

A website that links musicians and casual listeners together through their most played Spotify songs. Our site uses spotifies API to display your top played songs.

The Backend

We used CockroachDB with MySQL for our database to store users' Spotify statistics and user information.

Challenges we faced

All of us are pretty new to hackathons so the environment took some getting used to. Beyond that, we have very little experience working with databases and front-end technologies like bootstrap, so it took us a while to get things to work.
",https://github.com/magic9995/BandTogether,,"Best Use of Data in an Application - Two Six Technologies, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","python, pandas, spotipy, bootstrap, cockroachdb, mysql, sql",,University of Maryland - College Park,3,No
DeepStandup,https://bitcamp2022.devpost.com/submissions/320471-deepstandup,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 16:36:37,"Inspiration

AI automates many services throughout society. How about automating your meetings?

Current advances in AI allow for realistic audio and video generation that can simulate yourself.

What it does

First, the program will join the meeting and listen to the meeting audio. Once it hears your name being called, it triggers the application to start the ""standup""

Given a provided voice sample an image, this will generate a realistic video of you saying that text using the  SV2TTS deep learning framework, which was developed by Google researchers.

Essentially, using a pretrained model, a 5 to 10 second a sample human voice, and a 10 to 20 word sentence, the AI model will generate a .wav file simulating the sample voice speaking the given sentence.

Then, we feed this audio file into either an image or a video of the sample person and lip-sync the audio with the video using Wav2Lip, which ultimately outputs a video file to use in the Zoom meeting.

Challenges we ran into

Integrating many different machine learning models, audio frameworks, and python libraries took a lot of time and we ran into many issues.

We also needed a lot of trial-and-error with trying to send video and audio from our program to the meeting software.

Accomplishments that we're proud of

Making everything run fast enough to run in real-time. We are happy that we got this to work. We might even use it on some of our meetings

Google Cloud

Our project would not have been possible without the excellent Google Cloud APIs. Specifically, we used the Speech-to-Text API.  This is because our application will listen for your name as a prompt before starting the fake standup video stream. Because this is a real-time application, the speed and reliability of this API was crucial for this product.
",https://github.com/sifbitcamp2022/fake-standup,,"Best Use of Google Cloud - MLH, Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp","python, google-cloud, pyaudio, machine-learning",,University of Maryland - College Park,3,""
Untitled,"",Draft,Pending,Manage team,04/09/2022 16:49:13,"","",,"","",,University of Maryland - College Park,0,""
Untitled,"",Draft,Pending,Manage team,04/09/2022 16:58:38,"","",,"","",,University of Maryland - College Park,0,""
Quantum Circuit Prediction Environment,https://bitcamp2022.devpost.com/submissions/320519-quantum-circuit-prediction-environment,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 17:41:35,"Inspiration

I wanted to combine AI with Quantum, but not by creating an AI that uses quantum computers. This is the result I came up with.

What it does

It gives an environment for an agent to experiment in to try and find at what frequencies a random quantum circuit will output each possibility.

How we built it

I used OpenAI gym to create the environment, and Qiskit to create the quantum circuit. I also created a Jupyter notebook for demonstration with an agent making decisions randomly.

Challenges we ran into

I wasn't sure how to represent the spaces the agent can view and act on at first. I also had some trouble getting the visualizations to work for a little bit.

Accomplishments that we're proud of

Doing the whole thing on my own in around 8-12 hours for my first hackathon, and having it work well

What we learned

Creating and evaluating quantum circuits

What's next for Quantum Circuit Prediction Environment

The biggest thing is adding a parameter for using an actual quantum computer for the circuit calculation rather than a simulator.
",https://github.com/turtledude1818/Quantum-env,,"","python, qiskit, gym",,"",0,""
Sequence Form Converter,https://bitcamp2022.devpost.com/submissions/320521-sequence-form-converter,Submitted (Gallery/Visible),Pending,Additional info,04/09/2022 17:45:31,"Inspiration

In my 250 class with Gasarch, I was given an assignment to write a program that would find the roots of a recursive formula where each term is a linear combination of the previous two terms. I went a little overboard and submitted a program that would find the whole closed form. In doing so, I generalized my code to work with any coefficients and any starting values. But that got me thinking, could I also generalize it to work with any number of terms? Turns out the answer is yes, and it worked even better than I expected.

What it does

For a recursive formula where each term is a linear combination of the previous t terms, the pattern described by the formula's coefficients is also exhibited by r^n  for each of t roots r. My program finds these roots by repetitively using the Newton-Raphson method for complex numbers. It then uses linear algebra to find which linear combination of the geometric sequences defined by those roots fulfills the initial values of the recursive formula.

How I built it

I decided to build my program entirely from scratch using python's builtins. The only tools that I imported were functools.wraps() (to preserve meta-info when using the cache decorator I created), time.sleep() (to make my UI more readable), And the ""typing"" library to annotate my code. I also used operator overrides in all of my objects to make my code as readable as possible.

Challenges I ran into

One problem that I ran into was the fact that the Newton-Raphson method only approximates roots to a specified precision, and will usually not get the exact root, which introduces error into the system. Because of the limits of float size in python, the precision can only be so high, giving the closed form calculation an estimated +-(10^-8)% error, which though small, still makes the closed form only an approximation and not an exact representation. On lower terms, this error is hidden because the output is truncated to 5 decimal places.

Accomplishments that I'm proud of

When I first thought of this project, it was mainly as a joke. But I talked about it with some friends and we started to get all hyped up about whether or not it was possible. I wasn't sure it could be done, but once I had a plan in my mind I had to execute it. That first moment when my solution came together and spit out the Fibonacci Sequence was so cathartic, and my excitement only grew as I threw in more and more initial conditions and watched it accurately approximate all of them.

What I learned

I learned a lot about operator overriding and building interconnected classes.

What's next for Sequence Form Converter

This was really just a fun experiment in my capabilities both as a programmer and a mathematician. Though the idea of converting recursive sequences into closed forms is useful generally because it reduces algorithmic complexity when finding terms, simple sequences like the ones I evaluated with this program can be run relatively quickly in their recursive forms.
",https://github.com/TheMLevin/SequenceFormConverterBitcamp2022,,"Best Educational Hack - Bloomberg, Best Moonshot Hack - Bitcamp, Best DIY Hack - Bitcamp",python,,University of Maryland - College Park,0,No
Moodv,https://bitcamp2022.devpost.com/submissions/320525-moodv,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 18:10:30,"Inspiration

When the theme ""Adventure Awaits"" was announced, we thought of things that remind us of adventure. 

Adventure? In my boring life? I like to ride my bicycle - but I can't imagine how in the world I'd integrate into a web app of all places. Also, strolling through the crowded roads of New York isn't exactly that adventurous. 

Oxford Dictionary defines ""adventure"" as an unusual, exciting or dangerous experience, journey or series of events. Then I realised as software engineers, most of our adventure probably doesn't come from our life experiences. This led me to think about movies. I believe every movie is an adventure movie, as they all aim to appeal to the viewer's emotions through excitement.

I then set out to look for a team that was passionate regarding this Hackathon, where I met my fellow teammates. Now that you know my side of their story, our machine learning team had an idea of making an application which would analyse your facial features to detect if you were studying or not. While that's cool, it's not exactly adventurous. Now, wouldn't it be cool to get movie recommendations based on how you're currently feeling?  

So to sum it up - Face APIs are cool, and I watch so much Netflix that it's hard to find half-decent movies to watch nowadays. Those are the two random thoughts that we combined to build out this project, Moodv.

What it does

What does Moodv do? Well it's quite direct and simple. We generate suggestions for movies based upon your facial expression. Within this application we've integrated user accounts with ratings/comments along with features such as learning about the details of the movie from inside the app itself (such as languages it's available in, where it was filmed, ratings, overview, ratings, and more!). 

Moodv applies state-of-the-art facial emotion classification model Local Multi-Head Channel Self-Attention (LHC-Net) [1] to acuratly classify facial emotion into seven classes: 0=Angry, 1=Disgust, 2=Fear, 3=Happy, 4=Sad, 5=Surprise, 6=Neutral. LHC-Net achieves 74.42% test accuracy on FER2013 dataset (https://paperswithcode.com/dataset/fer2013).

How we built it

Front-end:

It was a journey integrating an immense amount of features in our application, and making it come together with aesthetic an colour scheme and interactive animations. 

Since this is a frontend serverless application, we built it in none other than Next.js. With features such as server-side rendering to improve our SEO and performance (drastically!). As Next.js has amazing support for TypeScript (and because I hate JavaScript), we decided to use the language for better type safety and tooling.

For styling, we decided to build out our own components, and since we were short on time, there wasn't a better candidate than TailwindCSS. Enabling us to rapidly build beautiful interfaces with simple HTML classes, TailwindCSS saved us a lot of time and energy.

Staying on the topic of styling, we used Framer Motion, an open-source and production-ready animation library for React. 

I'm a huge fan of CockraochDB serverless, and the easiest way to connect our serverless application with our database and easily generate a schema within it is Prisma, which is a next-generation ORM (object relational mapping) for Node.js and TypeScript

For the API, we used  TheMovieDB, which features a free and flexible API allowing us to fetch a wide collection of movies.

To deploy this monster, we used none other than Vercel, from the creators of Next.js, which scales this application dynamically to millions of users around this globe without breaking a sweat. This helps us take full advantage of CockraochDB serverless within our application, making our application fully serverless. 

For the backend machine learning models, we decided to use the local multi-headed channel self-attention (LHC-Net) because of it being:


An attention based model with reliable state-of-the-art accuracy for seven classes
Equipped with pre-trained models, saving us a lot of time.


We built the environment for LHC-Net with Anaconda3, and we built a simple interfacesfor the LHC-Net to read our Base64 string input using Flask. We configured a free Amazon EC2 server to host the modified LHC-Net and provide a web service model.

Challenges we ran into

It wasn't easy integrating all those features within an application that we had to make in 36 hours, nor was it easy to create our own machine learning web service with state-of-the-art model for face recognition as opposed to using a public API. We had our fair shares of challenges and struggles, the biggest one being deploying our machine learning model onto AWS. Although, after hours of scrolling documentation and online blog posts, and with assistance from the bitcamp volunteers/sponsors, we were able to successfully deploy our application. 

A problem we faced was related to the training of machine learning models over the Wi-Fi present at Bitcamp. Running an internet speedtest, we have a low 9.5 mbps download speed and a 10.16 mbps upload speed. Those are decently low speeds, and it's pretty difficult to work on server to configure and train our machine learning model with a poor internet connection. We didn't give up though - instead, we searched around for a while and found a perfect state-of-the-art model to do exactly what we wanted to!

Predicting a user's facial expression isn't a piece of pie. We felt that a premade moel is much harder than building out our own, as the environment install oftentimes unexpectedly breaks due to system differences, package versions, and other compatibility issues. Rather than wasting time trying out models that probably won't work at all, training our own model tailored to the needs of this application seemed to be the logical route. We found the facial emotion data set FER2013 extremely complicated, and an overkill for our purposes as it required a far more complicated model than a simple CNN, making it hard to build and train it within 36 hours. We spent a while researching and finding usable state-of-the-art models, and luckily enough we were ablet o find LHC-Net and make it work in the limited amount of time we had.

Deployment wasn't a walk up a crystal stair either. Our machine learning had the usual package version compatibility issues, and the AWS EC2 server ran out of storage as the machine learning model we used is large and requires a massive amount of dependencies. We decided to host our machine learning model live with AWS EC2 utilising Flask to build out our web service.

Accomplishments that we're proud of


Built our own face detection API with LHC-Net in Tensorflow with state-of-the-art performance
Craft out an environment for our machine learning model
Successfully host a machine learning model with AWS EC2
Successfully collaborating on the code for the repository through a smooth workflow using Git and GitHub
Integrating authentication with GitHub's OAuth services
Finishing 5 hours before the deadline
Building out a clean, functional and fluid UI which feels awesome to interact with
Participating in our first Hackathon! 
...driving 7 hours from New York to participate in this Hackathon 🎉


What we learned

Bitcamp 2022 has undoubtably been a huge learning experience for everyone on our team. For the machine learning team, they learned how to use AWS to host their machine learning models live on the internet, along with learning Flask and coming out of their comfort zone by dipping their feet in minimal amounts of HTML and some JavaScript.

The application team (...which consists of just me) learned to work with powerful libraries such as react-webcam. I learned just how sheerly powerful this library is, along with brushing upon my skills of Next.js and similar serverless technologies.

What's next for Moodv

What's next? Well, for now, I believe we first want to focus on improving the authentication aspect of this application. Currently for the Hackathon, users could only login with GitHub as it's easiest to setup an OAuth workflow there, although signing up is not required as many people just simply want to test out the application. 

After I tackle that, I want to focus on performance optimisation. Since we load a lot of information on this website (fetching large images, etc), it currently takes a while to optimise. 

On the machine learning model side, the model we used now is pruely trained on FER2013 dataset. One future work we can do to improve the model's performance is to gather user's image (with users' agreement) and further train the current checkpoint of this model. Another future work is to improve the inference time on the AWS web service.

Reference:


Pecoraro, Roberto, et al. ""Local Multi-Head Channel Self-Attention for Facial Expression Recognition."" arXiv preprint arXiv:2111.07224 (2021).

",https://moodv.hxrsh.in,https://youtu.be/vHDrca4wERs,"Best Razzle Dazzle Hack - Bitcamp, Best Use of Data in an Application - Two Six Technologies, Best Open Source Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","typescript, nextjs, vercel, cockroachdb, prisma, tailwindcss, tensorflow, themoviedb, amazon-web-services, python, anaconda, shell, lhc-net, self-attention",,"North Forney Highschool, University of Maryland - College Park",2,No
VR Party,https://bitcamp2022.devpost.com/submissions/320527-vr-party,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 18:11:52,"Inspiration

We thought that VR was going to soon become the next major deliverer of entertainment, so we decided that we should create an application similar to Netflix Party that works with VR videos.

What it does

It allows friends and family to watch a VR video in sync with a live voice-to-text chat (speech is converted to text and sent as a chat message) because many people won't be able to use a keyboard with their VR headsets to chat, and we thought a live voice call might be too much noise to focus on while watching a video.

How we built it

We made use of a few different API's and libraries. First, we used Cockroach's Serverless PostgreSQL database to store our user credentials, display names and profile pictures, and their extensive documentation helped with that. Specifically, we used psycopg2 and Flask to access the DB. For the VR videos, we used Delight XR (https://delight-vr.com/). To communicate with the chat room, we used websockets and to convert speech to text we used the JavaScript webkit speech recognition API.

Challenges we ran into

We ran into many challenges. First, we had to get a viable and reliable was of playing VR videos on the web. We tried YouTube and Deovr with little luck, then almost gave up, until Delight XR thankfully worked. We also had to figure out a good way of communicating when we didn't have access to buttons. Also, structuring the backend was hard to do well because of how many open websocket connections had to stay open.

Accomplishments that we're proud of

We have a product that works pretty well for something created in such a short time. A lot of things had to go right for this to work, as indicated in the challenges we ran into section. There were multiple parts of this project that we just didn't know if they were possible to create coming into this, so we're proud that we have a working project. Plus, it works in every target category: desktop, iOS Safari, Android Chrome, and Google Cardboard with Safari and Chrome - with one exception. The speech recognition API is still experimental on iOS, so it took some tinkering to get that working.

What we learned

We learned a lot about websockets and web development, in particular new technologies like speech recognition and WebXR. We also learned about collaboration, and GitHub helped with that. 

What's next for VR Party

We think it'd be cool to allow people to sign in to their Bitmoji/Snapchat account so we can have 3D avatars, and then have a sidebar that shows a 3D model of each user's head, showing where they are looking in the scene. It could also use some polishing-up visually, and some more user-friendly links.
","",https://youtu.be/cbu9s7nYf-g,"Best Moonshot Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","javascript, html5, css, webspeech, cockroachdb, flasksockets, flask",,University of Maryland - Baltimore County,2,""
Gr8 Vision,https://bitcamp2022.devpost.com/submissions/320528-gr8-vision,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 18:16:34,"Inspiration

Jesse: computer vision class, love for old computers
Veronika: remote sensing class, desire to build and program a time of flight sensor 
Alex: show off his kick-ass 3D printer

What it does

Computer vision on an 8 bit computer

How we built it

The software we created takes 5 principal components and then scales it up to the size of our images. This was accomplished by first taking our dataset of faces and then finding the top 5 principal components. We then trained a dense neural network to decode the 5 values and turn it into a 50 by 44 image that we can display. This training was done on a separate computer and then we moved the trained weights to the C64. Click here for the training data. The C64 then takes in the 5 values selected by the user through an ultrasonic distance sensor. The C64 then runs the trained neural network and displays the final image. Building the controller included wiring up the sensor, calibrating it, constraining and mapping the read values to a specific range, testing the analog output with a multimeter, and finally plugging the sensor into the paddle controller of the C64. As a bonus, we put the hardware components into a 3d printed casing to stabilize the reader and prevent mishaps with the wires. 

Challenges we ran into

The biggest challenge was when we learned that we were limited to 16 bit variables and could only do integer math. We were also constricted by the 64kb RAM, which meant that we had to be careful about how we use the limited memory. Finally, the speed of the C64 was very slow which meant the images couldn’t be generated immediately like we’d hoped. 

Accomplishments that we're proud of

doing machine learning without floating point 
calibrated sensor that outputs analog 
how fast the 3d printer made the casing for the chips and wiring

What we learned

we are grateful for how far technology has come.
also Veronika learned to sauder and how to directly program computer chips 

What's next for Grandpa Vision

Expand the RAM (via the computer's ram expansion unit) in order to speed up computation to a point where changes in the ‘face’ can be seen real time by waving hand over the sensor. 
","",,"Best Hardware Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp","c, python, arduino, autodeskinventor",,"University of Maryland - College Park, Montgomery College",2,"yes, tba"
Remote Controls for Retro Rides,https://bitcamp2022.devpost.com/submissions/320545-remote-controls-for-retro-rides,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 19:39:39,"Inspiration

We had an issue that we encountered daily, and took this opportunity to make our lives easier. One of our team members drives an old and somewhat suspect car. The only way to unlock the car is using the passenger-side keyhole. This requires the driver to walk around the car, unlock the passenger-side door, reach over the seats to manually unlock the driver-side door and walk around to the seat. In addition to being super annoying, this process poses a safety concern in the event that one has to enter the car quickly. So, we decided to combine our knowledge of CS and Engineering to design a cool solution to this problem that is open source and easy to adapt for other retro ride owners in a similar situation.

What it does

We tech-ified a 2003 Honda Civic with a web app that remote controls the car’s locks.

How we built it

We used a Raspberry Pi Zero W to serve our web app and interact with a custom circuit board that controls the car’s locking mechanism. The web app is accessed by joining a WiFi network hosted on the Pi.

Hardware


The goal for the hardware portion of this project was to interface a Raspberry Pi Zero W with a 2003 Honda Civic door lock system. We read through the vehicle’s service manual and discovered that by emulating the signal sent from the manual door-unlock switch inside the vehicle, we would be able to achieve our goal. 
To match the signal of the door-lock switch, we needed to create a 12V signal. This was initially a challenge since the Raspberry Pi’s logic outputs operate at 3.3V. We decided to implement 2 NPN BJT transistors to solve this problem. By wiring the transistors to the Raspberry Pi, the car’s 12V battery, a handful of diodes, and a breadboard we successfully were able to lock and unlock the car. Our hardware development did not stop with this functional prototype. 
We took our proof of concept and upgraded it to a fully functional model that is robustly  installed in our teammates' car. We condensed our circuit schematic and soldered components directly to a perf-board, the Raspberry Pi, and the car. We decided to use a circuit board rather than a breadboard because of our concerns over the reliability of a breadboard in real world conditions. By eliminating our use of unreliable low-quality undependable untrustworthy unpredictable breadboard jumper wires, we ensured our device would survive on the road for years to come.
In order to connect our project to the car, we build a custom wiring harness with a 3-pin molex connector. In order to minimize the number of wires, we wired all three lines through a cable sleeve. The connector represents the high quality and standards of our craftsmanship.
The last hardware challenge our team solved was packaging the device elegantly inside the vehicle. We took apart the vehicle’s driver door panel and installed our wiring harness inside. We then modified one of the interior trim panels to store our Raspberry Pi and circuit board. The only visible component is a single USB cable that is exposed to the user to charge the device. 
Our resulting hardware is elegant, robust, and refined.


Software

We knew that our interface would have to implement some form of access control mechanism to ensure that only authorized users can manipulate the car. It was very important that this access control use state-of-the-art security since it protects a valuable physical asset. Therefore, we decided to use FIDO instead of a username and password scheme. FIDO is a passwordless authentication protocol for the web that leverages public key cryptography and trusted devices to avoid shared secrets on servers. Instead of registering a password to a given username, FIDO associates a public key to a user account that corresponds to a private key controlled by an authentication device. This authentication device can be any trusted device such as a fingerprint sensor or hardware token. Popular implementations of FIDO include Windows Hello and the Android FIDO2 API. 
We adapted our FIDO web app from the app designed by Team PASS which is an authentication research team at UMD (Github link). The app was designed for a human subject experiment that was submitted for IRB approval. Therefore, it adheres to a suitable standard of security and confidentiality. The tech stack of the app consists of…


Backend


Flask
Python WebAuthn library
MariaDB credential database

Frontend


Bootstrap
An adorable logo

RPi.GPIO library to output to the electronics
Our modification to the app consists of the removal of all of the experiment oriented aspects of the site such as interaction logging and the inclusion of an interface to interact with the car locks. This interface consists of two buttons to lock and unlock the car. We also implemented a modified user registration system. In the original app, any user could register an account with the web app which would defeat the purpose of the app in our project. Therefore, we designed a system where a registered user can generate a one-time-use registration PIN that is used to register another user. We then disabled this system to register one initial user and used that account to register the rest of our devices.
## Challenges we ran into
Due to our limited hardware, we could only interact with the Pi Zero headlessly. This lead to many networking headaches
The WiFi in the hacking room was iffy at times, which made setting up the Pi tedious 
## Accomplishments that we're proud of
We have the best logo out of any team in Bitcamp no question
We had sufficient time to attain a high degree of fault tolerance and finish in our final product
We incorporated interesting new technologies into our web application


What we learned


The inner-workings of 2003 Honda Accord car doors
A little bit of SQL Alchemy 
## What's next for Remote Controls for Retro Rides
We would like to expand the capabilities of our embedded Pi to control more of the car’s functionality. Some ideas we had were remote starting, window control and media player control. We would like to implement a media streaming that allows a device connected to the Pi’s WiFi to play music over the car’s radio.

",https://github.com/jonahtash/remote-controls-for-retro-rides,https://youtu.be/A7vZrfUl89U,"Best Hardware Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp","python, flask, fido, raspberry-pi, mariadb, a2003hondacivic",,"University of Maryland - University College, University of Maryland - College Park",3,"Yes, it's inside Ben's car."
"Lecturely - Your boring lectures, organized and made fun!",https://bitcamp2022.devpost.com/submissions/320548-lecturely-your-boring-lectures-organized-and-made-fun,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 19:42:41,"Inspiration

Most college students have skipped a class at one point or another, and it sometimes becomes difficult to keep caught up on recorded lectures. We decided to make a tool that helps

What it does

Users can add their courses, and within each course, add URLs to the lecture files. Lecture.ly splits up these videos into smaller chunks, which makes it easier to digest and not get bored.

How we built it

We used JavaScript, HTML, CSS, and Chrome Dev Tools to be able to develop the app for Chrome browser. We collaborated using Git and Discord. We first created a simple mock up design in Figma. Then we implemented a very low fidelity version with HTML/CSS. Then we added functionality that allows navigation, accessing recordings, tagging videos, and add new classes. Then using the chrome notification API we could send alerts to the users across multiple devices with chrome installed (mobile or desktop). These alerts will enable them to skip to certain time stamps and gain points for watching the lecture segment. These points are the reward systems that allow you to feed your virtual pet and take care of him/her. Losing your streak means your pet would be sad or much worse.

Challenges we ran into

This was our first time working with the Chrome libraries, so it was difficult to get used to. Not all of us had Javascript experience, so we had to learn some syntax throughout the project.

Accomplishments that we're proud of

We were able to implement the algorithm to parse the video page and determine which class the lecture was from. 

What we learned

We learned a lot about how the libraries behind Chrome work, and some specifics about HTML and JS.

What's next for Lecturely - Your boring lectures, organized and made fun!
","",,"Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","javascript, html5, css, chrome",,"University of Maryland - College Park, University of Marykland",3,no
Comprefinsive,https://bitcamp2022.devpost.com/submissions/320556-comprefinsive,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 20:05:40,"Inspiration

For properly diversified investors, checking on your investments means checking Robinhood, Fidelity, TD Ameritrade, Coinbase, and your crypto wallets. You shouldn't have to open six different apps just to know how much money you lost last week.

Well, those days are over.

Comprefinsive is the one-stop-shop to track and manage all of your investments, housed in one beautiful UI. Just make an account and link your brokerages, and you can come back anytime to see how your portfolio is doing.

What it does

Comprefinsive integrates with your Robinhood, Coinbase, and crypto wallets, making it the easiest way to manage your stocks, tokens, and NFTS. Want to see how much Ethereum you own across Coinbase and your three different browser wallets? Comprefinsive makes it easy. Want to track your net worth without maintaining an Excel spreadsheet? Comprefinsive got your back.

Comprefinsive also aggregates your transaction history across platforms. If you own ETH on Robinhood and Coinbase, Comprefinsive offers a simple and intuitive view of all your deposits and withdrawals.

How we built it

We used CockroachDB and a Flask server as our backend. We had integrate several APIs to fetch account data from platforms like Coinbase and Solana. The frontend was made in Next.js. We used Airbnb's visx library to aid in creating the data visualizations.

Challenges we ran into

Making user-friendly and interactive visualizations was much harder than anticipated. Some of the APIs we used were either outdated or inconsistent. Lastly, we had to think about backend API design to minimize load times when fetching large amounts of user data.

Accomplishments that we're proud of

We worked really well as a team and effectively split up frontend/backend responsibilities. Additionally, we're happy to have shipped a functional app that we'd be glad to use for ourselves. 

What we learned

We learned about CockroachDB and principles of UI design, as well as some lessons about what features to prioritize when working on a large project. 

What's next for Comprefinsive

We'd love to flesh out the app with more integrations across different investing platforms and crypto chains. Additionally, it'd be cool to have a recommendation engine that shows the user new stocks/tokens that other users with similar portfolio compositions have invested in. 
",https://github.com/AkashBhave/comprefinsive,https://www.youtube.com/watch?v=eYxzvfiLgbs,"Best Use of Data in an Application - Two Six Technologies, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","cockroachdb, flask, next.js, coinbase, robinhood, solana",,University of Maryland - College Park,1,No
Take 6!,https://bitcamp2022.devpost.com/submissions/320563-take-6,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 20:24:08,"Inspiration

We were inspired by an obscure game we found in the Cool Board Games club at STAMP one day. It turned out to be really fun, so for our first hackathon together, we decided to do something unique and re-create the very enjoyable card game as a computer game.

What it does

The Take 6! computer game has a 4 x 6 board with a deck of 104 cards. The deck is shuffled and both players get a ten-card hand that they can each respectively see, but they cannot see the other player's hand. At the start of the game, the board has one card in each of the four rows faced up.
Each round begins with both players selecting a card of their choosing from their hand and placing it faced down. 

Once both players have done this, the cards are flipped over and the card with the lowest number goes first, automatically being placed into the row with the ""smallest possible difference between the current last card and the new one,"" as stated by the rules of the game. Additionally, ""the number of the card that is added to a row must be higher than the number of the current last card in that row,"" so our code automatically ensures that this is the case as well. 

When a row hits 6 cards, the player who placed the 6th card must take all the cards in the row, earning a number of points based on the number of cow heads on each card in the row. Just like golf, in this game, more points is a bad thing. If a player plays a card whose number is lower than the last card of each of the four rows, the player has a choice in which row to place the card, after which they must take all the cards in the row. This allows the player to chose a row that would net them the least amount of points.

After 10 rounds have been played and neither player has any card left, the game is over. The winner is the player with the least amount of points.

How we built it

We built the game in Java by creating various classes to represent each object in the game. For example, we had a Card class to represent the different types of unique cards for this game and we had a Player class to represent each player's number, hand, and number of points. We used JFrame to make the GUI. 

Challenges we ran into

A major challenge we ran into is that due to us being freshmen and only having taken intro-level computer science classes, we did not know much about GUIs and so we had to learn how to code them on the spot during the hackathon. We also had to create images for each of the 104 cards and learn how to import images to use in the GUI. 

Accomplishments that we're proud of

We are proud of having re-created such a complex and unique card game for our first hackathon together.

What we learned

We learned how to use GUIs in Java and how to create a complex computer game based on a card game without any reference to an existing computer version of the card game.

What's next for Take 6!

We're really excited about expanding the maximum number of players to 10 from the 2 we have now to allow even more people to take part in the fun! We also plan on adding animations to the game to make the game more smooth and more visually pleasing.
",https://github.com/adithyako/take6,,"Best Gamification Hack - Bitcamp, Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp","java, eclipse",,University of Maryland - College Park,3,No
Idiots Invest,https://bitcamp2022.devpost.com/submissions/320564-idiots-invest,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 20:25:33,"About the project

Fun, Fast, Free, with Friends.

Inspiration

Inspired by a recent video in which a goldfish outperformed all of the r/WallStreetBets subreddit, we wondered if the collective knowledge of a group of friends could do any better.

What it does

Groups can create and join community portfolios where the group as a whole can decide their financial future together. Each period, the group is presented with a choice of two stocks or cryptocurrencies. During this period, each member of the group can vote on which asset they would like to buy. At the conclusion of the period, the asset with more votes is purchased with all of the funds in the portfolio. This is repeated with two new random assets each period, and the performance of the portfolio is tracked for every trade.

How we built it

We used Python and Django to create the backend that manages the portfolios and interfaces with the Alpaca API. Additionally, we created the frontend using JavaScript and React with the Mantine component library.

Challenges we ran into

Our main challenges occurred during deployment. Nginx gave us continual trouble when trying to deploy the backend Django project. Additionally, when we transitioned our frontend to AWS Amplify, it required that all requests go through HTTPS, but our backend was hosted on AWS EC2 and did not have SSL. To overcome this, we had to disable the security privileges of our web browser.

Accomplishments that we're proud of

We have integration with a real Alpaca paper trading portfolio, which means that we can track the real performance of a group. This allows the users to see the true performance of their combined intellect in real time! Additionally, our polished frontend gives our users a professional experience and allows them to see the performance of the group’s combined intellect with every trade. This interfaces nicely with the REST API we developed on the backend.

What's next for Idiots Invest

Future development will add a text chat feature so that members of a community can share their ideas about the current vote and the portfolio’s overall performance. We want to emphasize scalability and customizability, adding features such as allowing communities to tweak the trading frequency of their portfolio, new power ups, seasonal events, and more events to bring the community together.
",https://main.d1n9n61r6k36i0.amplifyapp.com,,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best UI/UX - Bitcamp ","python, django, javascript, react, mantine, rest, nginx",,University of Maryland - College Park,1,""
FemPOWER(me)nt,https://bitcamp2022.devpost.com/submissions/320569-fempower-me-nt,Submitted (Hidden),Pending,Submit,04/09/2022 20:37:38,"Inspiration

I aimed to address gender inequity. 

What it does

This website provides information regarding women issues. It brings attention to organizations who are fighting for feminism, tries to reduce period stigma, provides STEM opportunities and has a list of women role models. Ultimately, FemPOWER(me)nt tries to inspire and empower women.

How we built it

This was built through a combination of HTML and CSS. 

Challenges we ran into

I had some issues aligning text and images; flexbox was being problematic. Thankfully, after reading Stack Overflow and W3schools, I was able to solve the problem.

What we learned

I learnt more about women's issues, specifically about period poverty. In the technical aspect, I learnt how to effectively create a navigation bar and a dropdown bar. 

What's next for FemPOWER(me)nt

I intend to add to the opportunities spreadsheet and make another webpage about women role models in general. I hope to add a sports section as well and just expand topics in general. 
",https://fempowerment.zoec27.repl.co/index.html,https://youtu.be/Otm_shHlsZs,"","html, css, javascript",,St. Robert Catholic High School,0,""
Venerable_Videos,https://bitcamp2022.devpost.com/submissions/320584-venerable_videos,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 21:02:11,"Inspiration

I always fear that something on the internet may one day be deleted or removed, never to be seen again. To combat that, I always try to archive whenever I can. This project came about from a need to easily and automatically record information about the things I'm archiving, especially videos.

A great example of this is the fact that I have long lost the original files for my old videos on YouTube. My program is a great way to quickly and easily have them somewhere on my computer and organized so that I do not have to worry if I may lose my account or YouTube goes down.

What it does

It takes any YouTube link, along with a connection string to one's personal CockroachDB database, and scans the webpage for links to videos, storing the videos' link, name, creator, and more. It then stores that data in a CockroachDB relational database for easy access later. It also provides a basic means of searching the database for matching video names and creator names.

How I built it

I used python 3 with urllib, argparse, re, and psycopg2 libraries to create the main codebase. In lieu of string methods, I used regular expressions to parse the webpage html files to grab the desired data as it was faster and more concise in my code (no other libraries or web applications were used). I used CockroachDB to store the data, as well as their client to check the database. I coded everything using emacs on Ubuntu.

Challenges I ran into

I did not know python, regular expressions, or CockroachDB SQL prior to beginning this project, so the main challenge would definitely have been learning these on the fly to accomplish my goals! In not being familiar with any of these, debugging any issues I had were definitely a struggle. For example, I didn't realize my regex for one method was wrong for half an hour because it wasn't immediately apparent that it was wrong in the first place, let alone why it was wrong!

I also came to learn that web crawling is not very easy, and without an external package, scraping a JavaScript reactive website is quite difficult. Unfortunately, I was not able to make my program capable of scraping more links than what is by default displayed on a page—it cannot click on load more or scroll down to load more.

Accomplishments that I'm proud of

Just as with above, I'm definitely proud to be able to say I'm able to use python, regex, and CockroachDB now. It also performs the tasks better than I would have expected I could make it!

I am definitely proud of the fact that I successfully made a program that can get information from a website and turn it into database entries! Especially considering the only external package is psycopg2 for connecting to CockroachDB.

What I learned

I learned Python syntax and how to use Python. Like its sets and tuples and ""WITH"". The lack of strong typing really messes with me!
I also learned how to interface with CockroachDB through their CLI, as well as through psycopg2, which made using Python to modify databases in CockroachDB very easy.
Finally, I learned quite a bit about regular expressions and how to use them. They're littered throughout my project in order to find the strings of data I was looking for.

What's next for Venerable_Videos

I want to be able to provide support for all sorts of websites and services that may include videos on their webpages, such as vimeo or dailymotion. I made as much of my code flexible for this purpose as possible. I would also like to provide more command options to make the program more versatile, as well as using Selenium to allow the loading of more videos, creating a server and front-end to archive videos remotely, and creating an easier method of querying the database.
Most importantly, I want to be able to link my program to youtube-dl or a similar program that will be able to download, store, and archive the videos whose information is saved by my program. That way, the mirror column of the database will be able to point towards a copy (local or on a server) of every video (for personal use, like saving one's own videos, of course!). It is for this purpose that I wrote some code to be able to expand this functionality in the future and hence why there is a mirror column that is null.

Best First Time Hack

I probably used Python, SQL, and regex about once each in the past. Bringing them together in a project such as this took a lot of learning, trial, and error. I spent about 18 hours total on this project, and I can't say I have much to show for it other than all that I've learned. But for my first hackathon and first true foray into all three of these, I can't say I did horribly either!

Best Open Source Hack

youtube-dl is an open-source program used to download and archive all sorts of videos on the internet. My program happens to fit very well with the idea of downloading, archiving, storing, and organizing things like a wide variety of videos from anywhere on the internet (for personal use, like saving one's own videos, of course!). All it requires is a quick explicit implementation.

Best Use of CockroachDB Serverless

This project uses CockroachDB serverless to host and store all database information relating to the videos examined by my program. My program's flexibility and freedom to expand is perfect for CockroachDB's architecture which will gladly accommodate its expansion!
",https://github.com/Cephi-sui/Venerable-Videos,https://youtu.be/Wl-TaEvjrZw,"Best Open Source Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","python, regex, cockroachdb, sql, linux",,University of Maryland - College Park,0,""
Seeing Green,https://bitcamp2022.devpost.com/submissions/320603-seeing-green,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 21:48:33,"Inspiration

Going into BitCamp, Christopher was excited to build his first application and upon seeing the Best Educational Hack category he felt incredibly overjoyed at the chance to educate others on the principles of Sustainability. Christopher has spent multiple semesters in Sustainability focused courses for his minor, so being able to share his knowledge incredibly fortuitous. The team was going into BitCamp in order to help Christopher make his first mobile application and allow Samantha to impart knowledge onto him before graduating college. The team wanted to make the application a fun and interesting game like the ""choose your own adventure"" stories we grew up reading.

What it does

The application evaluates users on their daily choices as well as basic Sustainability principles in order to view their habits through the lens of Environmental Studies. Each user starts the quiz at 100 points. While progressing through a set list of questions with multiple choice responses, Seeing Green will add or deduct points based on how Environmentally Friendly the user's daily practices are. The application keeps a list of the choices made by the user in order to provide reasoning and explanations of various topics in Sustainability related to the choices made at the conclusion of the quiz. Additionally, the application tracks the user's score for each individual test they take to keep a personal leaderboard across multiple tests taken by the user.

How we built it

The team started by deciding to use the Ionic platform because of Samantha’s previous experience with it and the knowledge that this could allow our application to be built for Android, iOS, and most web browsers, from one source code. The team then used Ionic to build an Angular application through the Ionic CLI's predefined ionic start command. From there, the team modified the pre-made app.component.ts and app.component.html files in order to display the different screens required to carry out our application. Samantha created and modified the index.ts and user.service.ts files to establish Observables and other useful interfaces. The team was able to use standard ionic UI components found at https://ionicframework.com to build the application and corresponding Angular functions and variables. The team was able to make and view incremental changes to the code by running ionic serve and observing the localhost:8100 on Google Chrome browsers.

Challenges we ran into

One challenge the team faced was having to simplify the broad and detail-oriented nature of Sustainability into a few basic questions for the user to understand and respond to in a reasonable amount of time. Additionally, the team knew that most people have a basic understanding of Sustainability so the questions could also not be too simple in order to prevent users from giving what they know to be the “Best” choice as opposed to the honest one. Making an application that felt like a ""choose your own adventure"" story was also difficult as the team had to determine how to ensure specific answers to questions could correctly bring up different follow up questions (such as selecting that one ate meat that day would bring up a question about what type of meat, that a vegetarian would not receive) while eventually returning to a similar line of questioning.

Accomplishments that we're proud of

Christopher is especially proud of being able to find an intersection of his educational passions, Computer Science and Sustainability. Christopher was proud of Seeing Green both because of its potential to educate others and because it was his first ever mobile application. The team was also incredibly proud of making the game feel like a ""choose your adventure story"" the team enjoyed as children. Finally, being able to effectively communicate and work together despite being siblings made the team immensely proud, especially Samantha who was excited to be able to pass down some of her knowledge to Christopher at his first ever Hackathon.

What we learned

Samantha was able to get an introduction to the vast world of Sustainability and Christopher was able to learn how to create a mobile application through the use of Angular and Ionic, this weekend.

What's next for Seeing Green

The next steps the team plans to implement are the ability to share your results with others and the ability to track other users’s scores on the leaderboard so you can compare/compete with your friends. The team also wants to create a larger pool of questions that users would get a random selection of daily and be able to create more questions that directly lead to others for more of the ""choose your adventure"" feeling.
",https://github.com/CTang0522/BitCamp2022,https://youtu.be/7xR49xbmDAE,"Best Gamification Hack - Bitcamp, Best Educational Hack - Bloomberg, Best First Time Hack - Bitcamp","ionic, angular.js, html, typescript",,University of Maryland - College Park,1,No
Bytdle on Scratch,https://bitcamp2022.devpost.com/submissions/320610-bytdle-on-scratch,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 22:02:16,"Inspiration

Wordle is fun. Bitcamp is fun. Scratch?

What it does

Wordle spiced with aromas near you at Bytecamp 2022!

How we built it

Scratch with a side of scavenger hunting.

Challenges we ran into

We could not find a letter for Z, but then a fellow camper pulled thru and handed us a wet bag of Utz®. 

Accomplishments that we're proud of

Wordle letter designs for


pepsi (P)
maryland flag (T)
ionq (Q)


What we learned

J's are hard to come by and building full-stack applications from Scratch.

What's next for Bytdle on Scratch

Better words.
Bitcamp 2023
",https://scratch.mit.edu/projects/673971817/,,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp","scratch, bitcamp",,University of Maryland - College Park,3,""
Assistive Robot Arm,https://bitcamp2022.devpost.com/submissions/320614-assistive-robot-arm,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 22:10:44,"Inspiration

The inspiration was that it is a cool idea to make a robot . It was decided to create a robotic arm just 3 hours before arriving at Bitcamp.

What it does

This is a robotic arm with 4 degrees of freedom (4 drive-able joints). So basically it has 4 motors and can move in four different ways and each motor is controlled with two buttons to move forwards and backwards.

How we built it

The ENTIRE thing was designed, prototyped, manufactured, programmed, and troubleshot Friday-Saturday at Bitcamp. It was designed and simulated in Fusion 360, then 3D printed on cite at Bitcamp. Three of the motors are stepper motors and the last is a micro servo. It is all controlled with two arduino unos and thus coded in C. 

Challenges we ran into

1) Original source of power (iphone 5V wall charger) did not work for some reason/ Solution: We got a 7.4v battery to power the motors.
2) Not enough pins on an arduino to run 3 stepper motors and a servo/ Solution: We used two arduinos to control the arm.
3) (happened 4 times) The 3D printer used to make parts was not working/ Solution: We turned it off and on again
4) For each motor, the buttons only moved the motors in one direction/ Solution: Each stepper motor has four poles, a positive and negative. If you apply a current across a pole, the motor will move one step (a fraction of a rotation). Now each pole has to fire in a very specific order so it has continuous smooth rotation. We had the firing order for the poles wrong so it would mess up kind of randomly.
TLDR: The motors works in a very specific way and we didn't have the code written correctly for the motors. Solution/ We fixed the code so the motors do work.

Accomplishments that we're proud of

1) A robotic arm designed, produced, programmed and troubleshot at bitcamp in the <2 days.
2) Successfully coding the stepper motors using stepper motor drivers
3) Applying for the Best Hardware Hack, Best First timer hack, and  Best ""Bitcamp"" Hack 

What we learned

1) How to design and 3D print with a tight time constraint
2) How to control stepper motors with an arduino

What's next for Assistive Robot Arm

Surgical Robot Arm
","https://github.com/KhaiTTNguyen/robot_arm, https://www.thingiverse.com/thing:5347777",https://youtu.be/3_QfHKhsKLI,"Best Hardware Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","c, autodesk-fusion-360, cura, pronterface, arduino",,"Temple University, University of Maryland - University College, Earlham College",3,No
ScubRun,https://bitcamp2022.devpost.com/submissions/320620-scubrun,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 22:21:16,"Inspiration

Living near SCUB II, it was always a mystery where the other SCUBs were. Over the course of several months the others were slowly discovered, and then the idea of travelling between them as fast as possible, the ScubRun was born.

What it does

Times your ScubRun, checking your location to verify.

How we built it

Built on React Native and uses GPS for location services.

Challenges we ran into

GPS isn't super accurate. Also, React is weird.

Accomplishments that we're proud of

The UI works!

What we learned

How to use React1

What's next for ScubRun

SCUB NFTs?
",https://gitlab.com/drp19/scubrun,,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp",react-native,,University of Maryland - College Park,0,""
Untitled,"",Draft,Pending,Manage team,04/09/2022 22:27:19,"","",,"","",,"",0,""
ByteSwipe,https://bitcamp2022.devpost.com/submissions/320634-byteswipe,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 22:51:21,"Inspiration

One of the leading causes of fights in relationships is over food. Why is such a wonderful thing such as food causing fights? We believe it is because couples are not always the best at communicating their desires and finding common ground. This is why we build ByteSwipe.

What it does

ByteSwipe presents each user with a set of restaurants fitting their basic desires and allows them to decline or accept them. If both users accept a restaurant, it is labeled as a match. Once enough matches are made, the users are presented with the matches to give their final opinions. In the end, the users are presented with the set of agreed-upon restaurants to decide from.

How we built it

We built this web app using basic HTML, CSS, and JS with some additional libraries such as Bootstrap, JQuery, and Flickity. We collect data using the Yelp API to populate the site. The web app is currently hosted on GitHub pages, an easy-to-use tool to host your GitHub repository web app.

Challenges we ran into

DOES NOT RUN WITHOUT DISABLING WEB SECURITY ON BROWSER

We ran into numerous problems, primarily revolving around the Yelp API which has many permission issues due to potential security issues. We have resulted in doing some more roundabout methods to use the API. (Also, restaurant is obnoxious to spell)

Accomplishments that we're proud of

We are proud to have a working website containing multiple pages, a pleasing front-end, and a built-out backend.

What we learned

We learned a lot regarding websites interaction with APIs, design fundamentals, and website structure.

What's next for ByteSwipe

There are many potential ways to expand ByteSwipe. A log-in system or cookies can be used to store user data which can allow default settings and a new filter of whether to include places the user has already been to. By collecting user data, ByteSwipe could also implement an algorithm to customize the restaurants shown to you. The website can also be made more user-friendly to include a 'how-to' page or tutorial for new users. If users also find that deciding between the final selection difficult, ByteSwipe could also implement a final elimination algorithm to narrow the choice down to 1.
","https://kylehassold.github.io/, https://github.com/KyleHassold/KyleHassold.github.io",,"Best Gamification Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","html, css, javascript, bootstrap, jquery, yelp",,University of Maryland - College Park,3,""
Test-Test-Delete this Plz,https://bitcamp2022.devpost.com/submissions/320647-test-test-delete-this-plz,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:06:31,"Inspiration

Listening song with friends in car

What it does

How we built it

???

Challenges we ran into

coding
??

Accomplishments that we're proud of

?
hardware, 
learn new languages

What we learned

???

What's next for Caraoke

individual App
1: to connect with Bluetooth, 
2: adjust  the size of the letters


adjust the brightness of the screen

","",,"Best Hardware Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","python, c",,University of Maryland - University College,0,yes
Bytelands - An NFT Collection,https://bitcamp2022.devpost.com/submissions/320652-bytelands-an-nft-collection,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:19:18,"Inspiration We were inspired by the 8th year anniversary of Bitcamp and we wanted to make commemorative non-fungible tokens that we could give away for free! We created Bytelands which are original artworks of island campsites. We hope you enjoy looking at our Bytelands!

What it does

Bytelands are a fun collectible that is made to be accessible for all! Anyone can feel the sense of art ownership by minting their own Byteland! These artworks are a randomly generated edition of 500 that are stored on the Interplanetary File System. Users interact with the webapp using a React frontend which communicates with the blockchain network via Solidity.

How we built it

We first created the smart contract backend for minting and transferring NFTs using solidity. We also used node.js to manage the backend web server. We then created original art layers and used an art generation algorithm to create thousands of permutations of artworks.  These original artworks and information are stored on a decentralized database via interplanetary filesystem. We then created a React web app for the user to interact with the smart contract to mint and display their own NFTs. This web app interacts with crypto wallets like meta mask to mint new NFTs on a blockchain.

Challenges we ran into

Styling the web app and having the front end cooperate with the backend took us a bit of troubleshooting.
We spent a lot of time thinking of and drawing new art layers to create the Bytelands.
We did not have much experience working with a web 3 decentralized web stack so we had to learn a lot for this project. 

Accomplishments that we're proud of

We are proud of making a fully decentralized full stack webapp with original artwork. 
The webapp does a great job of minting and displaying the user's NFT collection.
The user interface works directly with a crypto wallet like metamask to mint new NFTs.

What we learned

We broadened our knowledge on front end development in React, realized the potential of smart contracts, and learned about web3. Learning to draw modular NFT artworks was also very fun and satisfying.

What's next for Bytelands - An NFT Collection

We plan on making our NFTs even more accessible by expanding our collection with new artworks. We could also see a future where we create Bytelands that are dynamic. The Byteland could be interactive or grow over time. It's all about learning more about the power of the smart contract and thinking of new ways for users to have fun with their byteland.
",https://github.com/ktang124/Bytelands,,"Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","react, html5, css3, javascript, node.js, solidity, ipfs, adobe-illustrator, alchemyapi",,"University of Maryland - College Park, University of Maryland - University College",2,""
Lip Synth,https://bitcamp2022.devpost.com/submissions/320658-lip-synth,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:33:55,"Check out our website!

and make sure to turn on your volume!

Inspiration

We wanted to make something silly and interactive. Brainstorming ways that a user can interact with a product, we settled on visual input. Getting a chance to work with some new libraries and stepping out of our comfort zone sounded like fun so we spit-balled until we landed on the concept for Lip Synth.

What it does

Lip Synth performs facial tracking to determine how wide your mouth is. Based on how wide open it is, it will play a note on the selected instrument to match! Lip Synth comes with several options to change your scale, instrument and sensitivity! You can also log into Spotify and search a song, and Lip Synth will show you how to play it with your mouth (its not the easiest to master though).

How we built it

We started by using a package called face-api.js that allowed us to use facial tracking with the user's webcam. Once we had access to the face measurements, we hooked up Tone.js with some samples and created several systems to load/change instrument samples, change musical keys, and determine notes based on the shape of the user's mouth.





Next, we wrote a simple algorithm to anticipate how big a user's mouth should be to play a given note and draw a corresponding ellipse to fit their mouth in the webcam display. With this implemented, we made our final addition and connected to the Spotify API to get access to songs and song data so we could see the notes being played in the song. One or two final edits and now you can learn to play your favorite songs on Lip Synth.



Challenges we ran into

We ran into a series of roadblocks along our journey. The first and foremost was the long hours. After coding for twelve hours in a row, it became easy to make silly mistakes in our code (JavaScript was in no mood to help us find them either). Thankfully, we had each other to perform what I like to call ""the stupid idiot check,"" where one person looks over the other's shoulder and says ""you never actually called your function.""
On a more technical front, packages can be frustrating, especially when they aren't all compatible with package managers. Trying to collect packages and place them in the right places with out dated documentation led us down several rabbit holes but we managed to find our way out. Asynchronous behavior gave us some issue as well but nothing a few short term hacks couldn't fix. Also Spotify OAuth was not happy this weekend.

Accomplishments that we're proud of

Everything. No regrets.

Especially making people look like clowns to unaware passerby :).

What we learned

Technology-wise, some of us were new to node.js and none of us were familiar with any of the libraries. We always learn a little from using new libraries. We also learned about how synthesizers and samplers work for music, which was quite different from our normal topics.

@[Sponsor] CoStar: Thanks for sponsoring and the panel, but...

What's next for Lip Synth

We would love to further refine the way in which Lip Synth processes your oral input. Currently it can be tricky to sustain a single note with your mouth naturally moving; in the future we would improve the analysis of the tracked movement to better interpret user detection. We would also like to finish setting up Spotify auto-play so that you can hear the song you are learning as you Lip Synth along! Lastly, we would love to implement multi-user functionality- the framework is there, it just needs to be put in order.

And most importantly, we would like to thank the one and only @[Organizer] Zach (he/him) for his great honor and valor during this event.
","https://www.lipsynch.com, https://github.com/rschwa6308/Bitcamp2022",,Best Razzle Dazzle Hack - Bitcamp,"html5, javascript, node.js, face-api.js, tone.js, spotify-web-api-js, heroku",,University of Maryland - College Park,2,""
Marshie's Adventure,https://bitcamp2022.devpost.com/submissions/320659-marshie-s-adventure,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:34:10,"Your friends have been captured by the Evil Burnt Mellows! To save them, you must play Marshie's Adventure! Travel through the land of Bitcamp, defeat foes, and save your friends. This game is designed with the Bitcamp esthetic in mind, using Bitcamp-based characters, backgrounds, and storyline! As you go through the game, you stroll past the 7 Keys to a Successful Hackathon, helping beginners and first-timers with getting a start on a project.

Inspiration

At every hackathon, there are first-time attendees. This is especially the case with Bitcamp 2022 being UMD's first in-person hackathon since 2019 due to covid. Our project aims to tackle this problem by providing an interactive way for first-time and beginner attendees to learn about how to go about a Hackathon. The gameplay also engages more experienced attendees.

What it does

We designed a scrolling platformer. As a user, you pick between 3 main characters and play through a game where you have to fight off monsters and ultimately a boss. There are checkpoints along the way, a functional map displaying your progress, and an options menu in case you want to stop or pause the gameplay.

How we built it

The entirety of the project was coded with Python. The game was designed based on the Python Arcade library, which is an OOP-based library. Alongside the game, Tiled was used for level design. The characters, background, game mechanics, and storyline are all based on the mascots and icons for this year's Bitcamp.

Challenges we ran into

None of us have expertise in graphic design. Since we wanted to have the game made entirely out of Bitcamp images and materials, we had to rely on graphic design skills.

Accomplishments that we're proud of

We are proud of taking individual aspects of Bitcamp imagery and combining them into a fully functional and enjoyable game.

What we learned

Most of our team members had little to no game design experience going into this project. Furthermore, none of us were experienced with the Python Arcade library. This project provides valuable experience for both game design and the Python Arcade library.

What's next for Marshie's Adventure

Adventures Awaits ;)
",https://github.com/trigaten/MarshieMash,,"Best Razzle Dazzle Hack - Bitcamp, Best DIY Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp","python, python-arcade",,"University of Maryland - Baltimore County, University of Maryland - College Park",3,""
RoommateHQ,https://bitcamp2022.devpost.com/submissions/320664-roommatehq,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:39:40,"Inspiration

Finding roommates is one of the challenging things to go through during college and after graduation when starting a new job. It's very important to find the right lifestyle match for your roommate. However, it's quite of a time consuming process. People normally post on Facebook, Discord, etc the same information over and over, and it's not efficient.

What it does

RoommateHQ is the LinkedIn for roommates. Users create their lifestyle profile once, and they share it with as many people as they want using their unique URL.

How we built it

I used React, Nextjs, Vercel (hosting), TailwindCSS, TailwindUI, Firebase Auth., and MongoDB Atlas.

Challenges we ran into

Getting firebase going took some time. Form validation was also a pain.

What we learned

Learned how to use Firebase auth. since I haven't had used it before.

What's next for RoommateHQ

After getting enough people to sign up, users can search for their roommates on RoommateHQ. It can use their lifestyle, and their preferred lifestyle to automatically find the best matches for them.
",https://www.roommatehq.com/,,"Best Use of Google Cloud - MLH, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best UI/UX - Bitcamp ","react, firebase, auth, express.js, tailwindcss, nextjs, vercel",,Montgomery College,0,""
Caraoke - Lyrics on the Go!,https://bitcamp2022.devpost.com/submissions/320673-caraoke-lyrics-on-the-go,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:47:15,"Inspiration

Our team loves going on road trips, but we always felt something was missing during our journey. As we watch the scenery go by, we wanted to be singing along to our favorite tunes, but there are times when some of us are not familiar with the lyrics. This set of obstacles is what inspired us to use the power of Engineering and solve something that has bothered not just us, but some of you as well.

So we thought of Caraoke, a little Arduino machine that fits right into the air vents of our cars and lets us know the lyrics to any song that's playing on our Spotify application. In this way, everyone in the car gets to sing along to the same set of lyrics, as if we are in a karaoke bar. No phones, no frills.

What it does

Play a song on your Spotify and enjoy karaoke sessions in the car.

Within a click of a button, the lyrics to that song will start appearing on our 16x2 LCD display. You can attach this display to the air vents of your car and enjoy an accessible view of the currently playing song lyrics. With more songs queued, Caraoke will be ready to display the next set of lyrics automatically as one song progresses to the next.

How we built it

Software

The core software was built using Python, utilizing Spotify's powerful API to get information on the song currently played by the user. Using this data, we would retrieve the lyrics using Textyl.co's API generator. The syncing is accomplished using an internal custom-built stopwatch that lets us predict the user's current timestamp. The rest is fulfilled by our hardware.

Hardware

We used an Arduino Genuino 101 to power and communicate with our 16x2 Grove LCD-RGB Backlight display. Using Python's Serial package, we managed to transmit the required information through our computer ports, binding together the power of two programming languages.

Challenges we ran into

From our research, we discovered that Spotify is the most-used streaming app in the world. This is where we decided to dive into what their API offers.


Our first challenge was figuring out how to generate the lyrics of the currently played song, since Spotify does not provide this information. Using the same API they used would not be a cost-effective decision, but thankfully, we managed to find another API that accomplished exactly what we wanted it to do. 
Another difficulty was trying to sync the lyrics per the current timestamp of the song, which was the core feature of our application. Since it was unrealistic to keep asking Spotify for the current song player's timestamp, we had to implement and maintain our own Timer in our program.


Our biggest challenge, however, was the hardware. None of us had prior experience in working with Arduino.


The LCD screen we used to output the lyrics had some limitations. As it was a 16x2 display, we could only print out a maximum of 32 characters onto a screen, which made it difficult to present the lyrics seamlessly
The Grove LCD's documentation had shown us that the I2C memory addresses were constant variables, which means that we could not associate the LCD screen to a certain address. This prohibits us from using two separate LCDs unless we were using two Arduino boards, which was not an optimal solution.


Accomplishments that we're proud of

Our team was proud to have completed our project the way we desired it to be and the way we visualized it in our thought process. We managed to learn a lot of various packages within Python and figured out a way to communicate our software with Arduino code. 

But despite our accomplishments, there is still a lot of room for improvement.

What we learned

We got a lot more understanding of the concept of APIs and how to efficiently read the documentation to maximize the functions of our application. And we learned about Arduino, a lot about it, from scratch.

What's next for Caraoke - Lyrics on the Go!

Currently, Caraoke cannot function independently without a wired connection to a computer that holds our code. In the future, we hope to implement an infrastructure to support Bluetooth connection such that the Arduino platform can function as a standalone. Furthermore, we plan to create an interface where users can personalize the digital display, such as accessibility features, to make it an even more powerful Karaoke platform. 
",https://github.com/matthewraylee/Caraoke,https://youtu.be/foeOzic5nsU,"Best Hardware Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","python, c, arduino, spotify, api",,"University of Maryland - College Park, University of Maryland - University College",3,Table K
Neural Net Ecosystem,https://bitcamp2022.devpost.com/submissions/320674-neural-net-ecosystem,Submitted (Gallery/Visible),Pending,Submit,04/09/2022 23:52:28,"Inspiration

This project is an attempt to simulate a virtual ecosystem. In the simulation, blob creatures chase food pellets around to grow and sub-divide. Blob behavior is handled by a neural net, with new blobs mutating from parents/high fitness ancestors.

What it does

WASD: Move Camera
Scroll Wheel: Zoom Camera
Left Mouse: Manually Spawn Blob
Blobs learn over time how to gather food. Similar blobs have similar colors.

How we built it

Built using the Unity engine.

What's next for Neural Net Ecosystem

Improved UI
Added User Interactivity
Improved Backend Machine Learning
",https://drive.google.com/file/d/1jtC6RE6uX2kUgTpU5aW2VS_XNjkxFmW9/view?usp=sharing,,"","c#, unity",,University of Maryland - College Park,0,""
Syneware,https://bitcamp2022.devpost.com/submissions/320680-syneware,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 00:00:53,"Inspiration

The Sound Color Project was one of the main inspirations of the project but we wanted to create this in a tangible and inexpensive way that many more people will be able to access. Using other Arduino-based applications, ambient lighting, and color theory, we were able to seamlessly integrate all concepts into a program that turns music into its visual representation through an Arduino-backed LED strip.

What it does

SyneWave is a program that allows the user to visualize the sound of a song using an Arduino by analyzing the frequency and the pitch of the song. The playing music is streamed and converted into a workable waveform which will later be used for a mathematical/statistical model known as Fast Fourier Transform (FFT) to compute dominant amplitudes and prevalent frequencies. Using those two measurements, a color scheme format of an RGB value was then used to be displayed on an LED strip following a stringent set of criteria.

How we built it

Through numerous trials and errors as well as endless reading of the documentation, we were able to come up with a working solution. Through early-stage processes like hardware configuration, we used programs like TinkerCad as well as external libraries like FastLED for LED management. We built then the Arduino implementation using C++ and the computations and analysis through Python. 

Challenges we ran into

During the course of building the hardware of the project, we ran into the issue of our LED strip having different connectors that match the Arduino board. To overcome this issue we soldered a Male to Female jumper cable to each one of the connections allowing us to hardwire it within the Arduino board.
Converting the waveform to a quantifiable model like FFT became difficult due to a knowledge gap in mathematical and programming limitations. Also associating specific variables -- dominant amplitude and frequencies -- to a select color palette was also difficult because we were attempting to build the connection between hearing and visual principles.

Accomplishments that we're proud of

One of the accomplishments that we were proud of was having such a good dynamic working system. Between the 4 of us, allowing for splits in our work heightened the productivity of our project. Having specific skill sets and also having the confidence necessary to be vigilant and curious about technologies never seen before has not only promoted cooperation but was also essential for debugging opportunities.

What we learned

We came to BitCamp lacking the knowledge about Arduinos, but throughout the build, we were able to further develop that knowledge and gather a better understanding of how live inputs work with the Arduino Uno board. Aside from working with mathematical models like FFT and understanding color theory, we were also able to understand how to draw the connection between audio/signal processing to the psychology of mood and personality.

What's next for SyneWare

The next step in SyneWare journey would be to try and develop the project on a wider scale and create the source open for everyone to be able to access the code. The team would also need to improve on analysis on color palettes as it relate to specific frequencies of specific sounds, as well as bettering the music to computation to Arduino interface.

We see a lot of potential if SyneWare could be made into a more practical and more distributed solution. SyneWare could be used to aid people with hearing loss, could be used for visual arts, and could also be used as an educational tool.
","",https://vimeo.com/697839971,"Best Use of Data in an Application - Two Six Technologies, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","c++, python, fastled, arduino",,"University of Maryland - College Park, Virginia Tech, University of Maryland - University College",3,No
If You Want To Dance With Me,https://bitcamp2022.devpost.com/submissions/320700-if-you-want-to-dance-with-me,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 00:40:11,"The story is part of the website at https://danceable-lyrics.herokuapp.com/
Also my CockroachDB cluster is called Pretty Vacant after the song, and for a bit of a laugh because at the time I wasn't sure I was going to actually do a project and my database would actually end up Pretty Vacant. (It is not.)    

Inspiration

Rock music is danceable. 🎸💃
This is a hill I will die on. But most choreographed (and TikTok-ed?) moves are set to other genres, and Spotify's ""danceability"" score comes in lower on my rock tracks than my pop and hip-hop tracks.
That made me wonder--why do so many iconic rock songs reference ""dance"" if the genre really isn't made for doing so? Chuck Berry, The Beatles, Joan Jett ... what were they talking about?
I wanted to prove that rock music was made for dancing.  

What it does

Entertains you, hopefully? (Turn the sound on!)

How I built it

BeautifulSoup to scrape Last.fm, LyricsGenius to retrieve song lyrics, CockroachDB and SQL to store song information, HTML/CSS/JS and Chart.js to display the data.

Challenges I ran into

Had a bit of a time trying to deploy the app and transferred it to a Flask server last minute. I think this project ended up being within my comfort zone considering that I was doing other activities during the hackathon and only worked on this project for a few hours; I wanted to be more ambitious with the data visualization and ""scrollytelling"" but switched from D3 to Chart.js because I felt D3 would be hitting a nail with a sledgehammer.

Accomplishments that I'm proud of

Submitting a project for the first time in an in-person hackathon

What I learned

That sometimes your predictions are wrong but that can lead to more theories and story ideas...   

What's next for If You Want To Dance With Me

-More interactive UI + graphs (and transferring graphs to D3 to create more complex and unique visualizations)
-Different analysis point? I.e. different words (rather than just ""dance"") to search for; using NLP to detect parts of speech etc.
-Checking how much my own ""danceability"" score lines up with Spotify's danceability score with the Spotify API
-Refining the story and making it into a data-driven pop culture investigation with a more compelling argument, rather than just a quick experiment
","https://github.com/cyborg48/danceable-lyrics, https://danceable-lyrics.herokuapp.com/",,"Best Razzle Dazzle Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","python, sql, html5, css3, javascript, beautiful-soup",,University of Maryland - College Park,0,No
Seek,https://bitcamp2022.devpost.com/submissions/320704-seek,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 00:47:12,"Inspiration

As we approach the end of the school year,  UMD students must start thinking about housing and roommates for the following year.  With that being said, finding a reliable roommate has always been a stressful task and we wanted to figure out a way to make the process simple. With Seek, you can find an apartment that suits your needs and roommates that you won't regret!

What it does

Seek is an IOS application meant to match a user with their perfect roommate! Users have the ability to indicate personal information like Age, Gender, University, Graduation Year, and Lease Term Length Desired. Using these data points the application uses a machine-learning algorithm to cluster similar users into groups. From that point forward, Seek will suggest the user to other users from their cluster. The User Interface is set up in a way in which the user can view a potential roommate's profile and swipe right if they want to interact with them or swipe left if they do not want to. Once users are matched they can use Seeks messaging feature which allows matched users to communicate. Seek also has a map feature that allows the user to browse through rentals in the area and view information about the property. They can give the property a ""Like"" which then shows other matched users that they liked the property.

How we built it

Mobile: 


Used SwiftUI to create iOS app
Integrated UIKit for further animations and design of the app
Created a chat messaging feature from scratch so prospective roommates can message each other


Backend:


Utilized CockroachDB Serverless to store users and their info in a database
Trained machine learning model for recommending roommates with Scikit-learn 
Used Seaborn, Pandas, Numpy to cluster and sort data from the model and visualize data
Hosted cluster using Google Cloud services
Used Python and FastAPI to handle GET and POST requests to the database


Challenges we ran into


Getting CockroachDB Serverless to work was simple, but hosting it proved to be incredibly difficult. We hosted our clusters on Google Cloud which took an extremely long time to get working with CockroachDB. 
CockroachDB Serverless seems to be a newer service so there was a multitude of inconsistencies in documentation we had to tread through. 
Lots of path/environment variables problems when attempting to host our server on Google Cloud with 
CockroachDB serverless. 
Missing dependencies or not the same versions of libraries when trying to get our software working on
teammates' computers.


Accomplishments that we're proud of


Our dope logo
Getting CockroachDB Serverless working (took most of our weekend)
We used Git and integrated/merged our code very efficiently
Training and implementing a successful recommender model
Implementing a wide variety of features in one weekend


What we learned


Designing apps with SwiftUI
Communication between technologies using requests and FastAPI
How to host a database on Google Cloud Run
How to train an ML model properly and avoid overfitting


What's next for Seek


Better UI, more fluid animations, and design
Add many more filters for housing and what kind of roommates you are looking for
Add more ways to find roommates besides just the swiping style. 

",https://github.com/gerdinv/Bitcamp2022,https://youtu.be/q0KW5OaI_iQ,"Best Use of Google Cloud - MLH, Best Use of Data in an Application - Two Six Technologies, Best Use of CockroachDB Serverless - Cockroach Labs","swiftui, python, flask, cockoroachdb, google-cloud, uikit, scikit-learn, fast-api, kmodes, machine-learning, sqlalchemy, sql",,"Stevenson University, University of Maryland - College Park",4,No
ZipCoder,https://bitcamp2022.devpost.com/submissions/320711-zipcoder,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 01:07:06,"Inspiration

As college students most of us are looking into renting our first apartments, in areas some of us aren’t from. It’s often difficult to determine what you should expect an apartment to cost in an area without trying to find every apartment building there or talking with dozens of people. By consolidating information about housing in certain areas we can help people understand housing around their area and what to expect.
Furthermore, our project helps make the data more interactive, and allows us to explore statistics and understand the implications of the disparities between communities in DC. 

What it does

We created a site that took data from the CoStar database and used it to display different data visualizations based off zip codes.

How we built it

We were able to do our data visualization with chart.js and JavaScript and we built the front end of the site using HTML and CSS. We hosted our site on AWS.

Challenges we ran into

We ran into issues with using chart.js, integrating AWS and VSCode, and manipulating our database into a usable form.

Accomplishments that we're proud of

It was our first-time attempting data visualization and hosting our own website.

What we learned

We learned how to integrate chart.js onto a website as well as use AWS to host a website.

What's next for Zip Coders

If we have time to come back to this project, we would make more graphs and a 3D model. We would also try to integrate other databases involving schools and crime rates.
","https://github.com/AlkaSeltzers/Bitcamp2022, http://3.222.122.196/",,"Best Use of Real Estate Data - CoStar Group, Best Social Good Hack - Bitcamp, Best UI/UX - Bitcamp ","javascript, node.js, chart.js, html, css, amazon-web-services, python",,University of Maryland - College Park,3,""
F.R.I.C.K DOTS,https://bitcamp2022.devpost.com/submissions/320714-f-r-i-c-k-dots,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 01:12:11,"After receiving an $80 parking ticket, I was determined to create a program that is able to detect parking police that is able to pay for additional parking if it is needed. This script detects if additional parking is needed to ensure that you DO NOT receive a ticket.

What it does

This script detects if the video camera detects a truck and then detects if the truck is RED. If the image detected is a RED Truck, it determines that it is a RED truck and pays for additional parking to ensure that the car does not receive a ticket. 

How we built it

As a business major and someone that has only been coding for 7 months prior to this project, this was a difficult project to create. It primarily involved using ImageAI and OpenCV to detect whether the truck that was detected is a red truck. If the truck that was detected was a red truck, then it calls the ParkMobile API to pay for additional parking. 

Challenges we ran into

Primarily, the challenge that I ran into was detecting the truck. Since this is my first time using anything beyond Numpy, this was a  very difficult project to build since it involved the Open CV and ImageAI Library. Primarily, this project was difficult to produce it involved skills that I had to get learned yet. 

Accomplishments that we're proud of

Honestly, I am proud of building this project. Many people doubted that I would be able to complete this project since I was a business major and was not trained in comp-sci. Therefore, the fact that I was able to complete this is an accomplishment in itself. Moreover, since I am only 7 months in my Python journey, the fact that I am able to build this in the time allotted is a very important achievement for me. 

What we learned

What I learned is the importance of the Numpy, Pandas, and TensorFlow Library. These libraries have so much importance to the broader society. Moreover, these libraries are able to accurately predict whether you are about to get a parking ticket. 

What's next for F.R.I.C.K DOTS

This project is able to detect whether the parking truck enter the parking lot. If the truck enters the parking lot, it will be able to detect unpaid parking spots for unpaid users. This will enable users to park at spots while only paying for the minimimmum amount of time required to avoid paying for a ticket. =
",https://colab.research.google.com/drive/1OQP82K4ZwMAL-h4UkgKhD9uSTjy9DGfq?usp=sharing,,"Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DIY Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","python, imageai, opencv, numpy, pandas, matplotlib",,University of Maryland - College Park,0,N/A
HAVA Hotspot,https://bitcamp2022.devpost.com/submissions/320721-hava-hotspot,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 01:27:34,"Inspiration

Perhaps no technology in modern history has been as transformative as the internet. It has revolutionized how we access and share information. However, in many places around the world, internet access is still not readily available. Of course, in many cases, a lack of infrastructure prevents access, but in others, even where the infrastructure is there, internet access is prohibitively expensive. We wanted realize an idea which solves this issue by decentralizing and democratizing internet access for all.

Enter HAVA

Users can connect to HAVA access points, or Hotspots, where they can pay for internet access using HAVA tokens, which they can obtain from a smart contract by converting Ethereum. Where do these hotspots come from? Well, from anyone. Any user with an internet connection and a computer can become a HAVA Hotspot by configuring their computer to act as a router. But how can the HAVA Hotspot provider ensure that they are paid for the access they provide, and how can the user not only ensure that they get the internet they pay for, but also that they can make a payment before they have internet access? All these problems are addressed with an unique and innovative application of Blockchain technology. At the core is a Smart Contract for the Ethereum network written in Solidity. This smart contract mediates the interaction between the user and host. (See Technical Section for additional detail.)

The use of blockchain and smart contracts enables this entire process of WiFi sharing to be decentralized and separate from any 3rd party intermediary, thereby drastically lowering costs and barriers to access.

How we built it

The Smart Contract:
When the user first attempts to make a connection, they sign a transaction message that locks a portion of their funds in the smart contract for a given period of time, roughly the time that they wish to connect. The user sends this signed message over LAN to the host, who then broadcasts the transaction on the Blockchain. When the host sees that the transaction is confirmed, the initial setup is complete. The user can agree to purchase a small allocation of data using the funds in their wallet. To do so, they sign a message indicating an intention to pay the host an amount of HAVA token corresponding to the data they wish to use. The host then grants them internet access for a certain amount of data that the user is able to track. To continue their internet connection, the user must continuously send messages that update their willingness to pay. If the user does not send such a message when their data is up, the host can add their signature to the last message the host sent, broadcast a transaction to the blockchain, and claim the funds the user agreed to pay. The rest of the funds in the contract are then sent back to the user. This method essentially means that the user is able to pay as they go, and if any party backs out of their end of the deal, the other party can immediately cease the relationship and walk away with what they are owed. It is also important to note that only the first and last messages are broadcast on the blockchain; everything else is strictly between the host and the user. This methodology of using time-locked contracts and multi-signature transaction messages results in a greater than 50% reduction in gas fees from our own testing.

The Router: We used openNDS to serve the captive portal that users are redirected to upon connecting to a HAVA Hotspot. Ndsctl is used for authenticating and deauthenticating users based on whether or not they have paid for access. When users first connected to the Hotspot, they are placed into a “Pre-authentication” state where they are redirected to our custom captive portal. From there they can interface with the smart contract

The App: To connect users in need of Wi-Fi to HAVA Hotspots, we built an opt-in system for HAVA Hotspots host to share their locations. This infrastructure, by virtue of the kind of data it contained, had to be centralized off chain. Our entire off-chain mobile infrastructure was powered by CockroachDB Serverless. We utilize the SQL database to quickly store and retrieve the coordinates of hotspots near the user. This information is piped directly into our mobile application allowing users to view the hotspots near them on a map. 

Challenges we ran into

Our journey at Bitcamp 2022 was riddled with challenges. Simply configuring our computers to act as hotspots proved to be challenging. Code that worked one minute would without cause or warning stop working the next. At its core we realized that widespread support across multiple systems was unfeasible at this timescale. We pivoted to targeting a single device and internationally chose the cheapest internet enabled computer we could get our hands on, the Raspberry Pi. While in the end we were successful, getting this aspect of the project was certainly one of the most stressful and difficult to accomplish.

What we learned

Our project heavily relied on the blockchain to enable secure offline transactions and ensure our project was truly decentralized. Learning to write and interact with smart contracts written in Solidity was a challenge for our team. None of us were particularly experienced with the blockchain but we shared a common interest and desire to learn more. As a group we researched and collaborated to teach ourselves the basics and challenged each other’s security notions to ensure our contract was both safe and secure.

What's next for HAVA Hotspot

Our mission of democratizing access to the internet is at the forefront of our roadmap. We started with a cheap raspberry pi, but we want to make HAVA Hotspots even more accessible. Over the course of the hackathon we made major progress towards supporting windows and ubuntu systems. Enabling these devices to become Hava Hotspots will enable even more people across the world to become an ISP. This next step is in perfect alignment with our mission because the more devices we can support, the more HAVA Hotspots will exist and the more democratic internet access will become.
","https://hava.kihtrak.com/, https://github.com/KihtrakRaknas/HAVA, https://github.com/Yin4TheWin/bitcamp22-mobile",https://youtu.be/nw9KwqRjy-c,"Best Hardware Hack - Bitcamp, Best Educational Hack - Bloomberg, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best Domain Name from Domain.com - MLH, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","solidity, cockroachdb, react, react-native, express.js, node.js, expo.io, raspberry-pi, blockchain, web3",,"University of Maryland - College Park, Rutgers, The State University of New Jersey",3,Yes; TBD
Proactive Prescriptions,https://bitcamp2022.devpost.com/submissions/320732-proactive-prescriptions,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 01:43:34,"Inspiration

BitCamp2022

What it does

Our product dispenses a pill using a combination of stepper and servo motors. It also contains an ultrasonic sensor to detect whether the pill has been taken or not. This dispensary then communicates with a web application where patients or caregivers can sign in to see whether the pill was taken. 

How we built it

We built the hardware portion using servo and stepper motors, an ultrasonic sensor, and an arduino. We built the base using whatever we could steal from around the building. thanks m&t bank 

Challenges we ran into

We had trouble setting up the backened using Node.js and establishing communicatino between our javascript and our Arduino code. 

Accomplishments that we're proud of

This is our first hackathon, so we are proud to have built both a hardware and software side of the project.

What we learned

We learned a lot of things about node.js, circuitry, and the design process.

What's next for Proactive Prescriptions

We would like to be able to move the web application into an app using android studio to allow for easier use. We would also like to be able to our arduino code with our app so it can update in real time.
","",,"Best Hardware Hack - Bitcamp, Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp","javascript, css, html, node.js, c++, arduino, servo, hardware",,"University of Maryland - University College, University of Maryland - College Park, University of Marlyand",3,"Yes, D"
FatCheck,https://bitcamp2022.devpost.com/submissions/320749-fatcheck,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 02:10:41,"Inspiration

It's always a hassle to figure out how much everyone has to pay, who to venmo, how to account for taxes, tips, etc. We wanted an easy way for this to be figured out.

What it does

Simply snap a picture, generate a QR code, scan it, then select what each person purchased.

How we built it

The app was built with Flutter!

Challenges we ran into

This was the first time developing an app for most of our team members. We had to learn how everything worked from the ground up.

Accomplishments that we're proud of

A working, functional app!

What we learned

A lot about android app development!

What's next for FatCheck

Integration with zelle/venmo/other payment systems directly to automate the payment requests.
","",https://youtu.be/YhaDOFm9_zU,"Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","flutter, sqlite, python, dart, flask",,"Johns Hopkins University, University of Maryland - College Park, Columbia University in the City of New York",3,""
Bytegotchi,https://bitcamp2022.devpost.com/submissions/320752-bytegotchi,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 02:21:25,"Inspiration

We were inspired by the traditional Tamagotchi toys from the 90's and 2000's, as well as our love for cats and the Bitcamp ""Marshie"" mascots.

What it does

It is a Tamagotchi-style program with 4 external inputs: a joystick and 3 buttons. Players can select one of the 3 ""Marshie"" mascots to take care of. They can control their Marshie and feed/wash it using the joystick and buttons. They can also send it to fight, where they can command it to attack, heal, or flee. If the player doesn't take care of the Marshie or if it takes too much damage in battle, it dies and the player must start over.

How we built it

We utilized an Arduino Uno and a breadboard, along with a joystick module and 3 buttons. These were wired together and the Arduino was connected to our computer using a USB cable, establishing a serial data connection. The main Tamagotchi program was made with Processing, which is a version of Java that allows for simple image/shape displaying.

Challenges we ran into

We had several challenges throughout the build process.
Our first issue was connecting the Arduino to the Processing code, which we solved by transmitting the data from the joystick/buttons as serial data.
Another issue we faced was that the controls were slightly uncomfortable to use. We fixed this by rearranging the buttons and mounting the joystick on an empty drink cup.
One major challenge we faced was that button presses were being counted multiple times, causing actions to happen more than once. We mitigated this by adding a delay to reading the button inputs.
Another major roadblock was implementing the battle system.

Accomplishments that we're proud of

We are all very proud of the work we were able to accomplish in 36 hours. We were able to connect hardware to software via Arduino, Processing, and serial data transmission. We also constructed the physical board and wired it. Programming the game in Processing is another accomplishment we are proud of.

What we learned

We learned about serial data transmission, Arduinos, Processing, game development, and innovation.

What's next for Bytegotchi

Adding more detailed animations, fleshing out the battle system, adding more depth to taking care of the Marshie.
",https://github.com/wolr210/Bytegotchi,https://youtu.be/4ARG5bHolIw,"Best Hardware Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp","processing, arduino, c++, java",,University of Maryland - College Park,3,"Prefer to stay on table O, but will move if needed."
UMD Maps 2.0,https://bitcamp2022.devpost.com/submissions/320755-umd-maps-2-0,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 02:30:35,"Inspiration

As a transfer student, it was hard to find my way around the campus, even with the help of Google Maps. As a result, I teamed up with my friend to create a tool that would help other UMD students to find their way around campus so that they can save time.

What it does

UMD Maps 2.0 takes in your course schedule as input and outputs a Google Maps route to help you get from class to class in a quick and easy manner.

How we built it

This app uses Python, Streamlit, umd.io API, Google Maps API, Git, Github, and VS Code Liveshare

Challenges we ran into

While building this app, we realized that there were a lot of gaps in the database for the umd.io API and also, the documentation was not the clearest. However, we were able to troubleshoot our way through these bugs, partially with the help of the mentors!

Accomplishments that we're proud of

This was the first time that we built a web app and worked with multiple APIs.

What we learned

We learned about using multiple APIs and how they interact with each other. We also learned how to embed files on our web app.

What's next for UMD Maps 2.0

We hope to move into the backend and implement a login feature and save your course data for future use.
","https://github.com/roklubstuh/UMD_Maps, https://share.streamlit.io/roklubstuh/umd_maps/main/schedule.py, https://github.com/roklubstuh/UMD_Maps, https://share.streamlit.io/roklubstuh/umd_maps/main/schedule.py",,"","python, streamlit, google-maps, umd.io, html5, github, git, vscode",,"Falls Church High School, University of Maryland - College Park",1,""
League of Legends Trivia Game,https://bitcamp2022.devpost.com/submissions/320761-league-of-legends-trivia-game,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 02:39:51,"Inspiration

We were inspired by the hit-game Wordle, as we were amazed at how such a simple game could be so addictive. Thus, we decided to have the game follow the daily new puzzle format. We also decided to make our Trivia game League of Legends related because we recognize that it's a really popular game with a dedicated fanbase. 

What it does

The game is a website-based trivia guessing game where a new League of Legends related term is generated everyday. Players have three guesses to get the word correct, and after each guess a new clue is revealed about the term. There's three different categories of which the term could fall in: champion, ultimate ability, and item. The game also tracks various statistics about the player's performance, such as the player's win rate and longest win streak. 

How we built it

We had a HTML/CSS (+ Bootstrap)/JS frontend, and a Node.JS/Express JS/Cockroach DB backend. We wanted a distinct front-end and back-end so that we can each work on a portion of the app at the same time without any conflicts. The backend is responsible for generating the daily word and clues. The clues are extracted from the Riot API and some are also web scraped from the League of Legends wiki using Puppeteer. The master list of the League of Legends terms are stored in the Cockroach DB, along with a field that keeps track of whether the term has been used for not. We were able to utilize this field to create fast queries to generate a new random word that has not been used before, while also utilizing the external nature of a database to prevent loading lots of data in the front end. We created an API endpoint in Node.JS using Express to allow the JS in our front end to request the information generated in the back end. The JS in our front end handled most of game logic, and utilized Bootstrap to make our game mobile responsive. 

Challenges we ran into

Setting up the Cockroach DB was definitely a challenge for us, as we didn't have much experience with using databases. However, through looking at documentation examples and Youtube videos, we were able to set it up and utilize Sequelize to help us make queries with the database. Another difficulty we ran into was web scraping for some of the clues in the backend, as some of the information we needed didn't fit a obvious pattern we could utilize. We managed to solve this through using a series of interesting Jquery selectors. 

Accomplishments that we're proud of

For one of us, it was his first time doing web development, so just being able to help in developing this whole website and working with software he has never worked with before was a huge accomplishment. We are also proud of just being able to develop a full stack app, as neither one of us had much experience in it.

What we learned

One of the things we learned was just what a general structure of a full stack app looked like and how the front-end and back-end are able to communicate with each other. We also got to experience using Cockroach DB, which was something new for both of us.

What's next for League of Legends Trivia Game

There's currently a small bug for the item words, so that would probably be our first priority. After that, we would want to refine it so that it is ready to be published live and played by anyone. 
",https://github.com/Kaidriver/BitcampProj2022,https://youtu.be/Nv-A4YiJUVA,"Best Use of Data in an Application - Two Six Technologies, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","html, css, javascript, node.js, express.js, cockroachdb, riot",,University of Maryland - College Park,1,No
Nintendo Dual Screen Physics Project Submission Post,https://bitcamp2022.devpost.com/submissions/320772-nintendo-dual-screen-physics-project-submission-post,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 03:11:31,"Inspiration

The Nintendo DS is one of the most delightful handheld systems ever produced, and its development libraries are right there, so we wanted to take the opportunity to explore how writing software for such a unique platform worked.

What it does

Click and drag on the bottom screen to send vividly red squares careening across the top screen, seamlessly and realistically bouncing off of one another in the most exciting gameplay of the year. Scroll around the screen with the D-pad to explore the black void that is yours to shape in your image.

How we built it


libnds C development libraries from devkitPro
Custom Python toolchain for linking image files and palettes
Physics API layered over devkitPro


Challenges we ran into

The DS doesn't natively support floating point arithmetic, and their fixed point arithmetic can be very unwieldy; in order to support a moving camera, we needed to translate between two coordinate systems, and the math involved required error-prone back-and-forth conversion. This is just one example of some bizarre hardware quirks the DS has that makes it both fascinating and frustrating to program.

We also had many issues with getting our physics engine working. It turns out physics is not super easy. Who knew?

Accomplishments that we're proud of


We created a very robust build pipeline using Makefiles and custom Python pre-processing that let us set up an iterative development flow fairly early on.
We came up with a custom binary format to represent images and color palettes that could be integrated into the libnds API very easily.
We came up with a flexible and robust way to manage an environment juggling many different game structures.
Frankly it's a miracle any of this compiled at all


What we learned

What's next for Nintendo Dual Screen Physics Project Submission Post
",https://github.com/Spirati/bitcamp22,,"","devkitpro, libnds, c, python",,Baltimore Polytechnic Institute,1,""
Untitled,"",Draft,Pending,Manage team,04/10/2022 03:14:12,"","",,"","",,"",0,""
 Buttons for Dining Hall,https://bitcamp2022.devpost.com/submissions/320780-buttons-for-dining-hall,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 03:23:55,"Inspiration

Wanted to try something knew since it was our first hackathon and didn't know what to do. Wanted to try and learn a new language in 36 hours. Wanted to make/ incorporate something we use/do, which was eating at a dining hall.

What it does

It was supposed to pull up each day  dining hall food for each diner and tell what is being served. Later on we wanted to add notifications and filters where you can check if it’s vegetarian/vegan/chicken etc.

How we built it

We wanted to know what would be the best platform to make it on and we concluded that it was flutter. 
Watched tutorials and videos on how to use the software and try to incorporate  what we wanted to do. 

Challenges we ran into

Learning something completely new in 36 hours is really hard, like really hard. But we wanted to challenge ourselves and try something we didn't know previously. Getting used to the syntax, and understanding on what the platform runs was hard to grasp at first because the learning curve is really high at that point. 

Accomplishments that we're proud of

We're proud that we decided to do this and not something we previously done before. It made us mad at sometimes but we persevered and did the best we could with our abilities. 

What we learned

Even though we couldn't really finish what we wanted to do, we're still gonna try to learn and still grow and finish what we have started. Learning a new language or anything in general can be very hard at sometimes but if you have the mindset of knowing you want to do it, then anything is possible. 

What's next for  Buttons for Dining Hall

Finish our idea and acting more filters such as a nutrients sections
",https://github.com/ricky3411/umd_dining,,"Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp","flutter, vscode",,University of Maryland - College Park,2,""
TrackStar,https://bitcamp2022.devpost.com/submissions/320781-trackstar,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 03:29:35,"Inspiration

A browser game with similar game logic called binb.co.

What it does

Compete with your friends to be the first to guess the title and artist of popular songs.

How we built it

Flutter for the frontend, NodeJS for the backend, communicating with JSON over websockets. The server is deployed on a DigitalOcean droplet.

Challenges we ran into

It was challenging keeping the UI in sync with the various concurrent changes from the server. The Spotify API also has many frustrating quirks we had to work around.

Accomplishments that we're proud of

We did a great job of planning between the backend and the frontend. At the start of Bitcamp, we were quickly able to think of a game idea, and plan out the various states and messages the frontend and backend would need to communicate with. This allowed us to split the work efficiently without having to constantly adapt to changes between the two teams.

What we learned

We learned a lot about Flutter, NodeJS, concurrent programming, and how to work on a project as a team.

What's next for TrackStar

Fixing all the bugs we avoided showing you in the demo ;)
",https://github.com/JMS55/trackstar,,"Best Razzle Dazzle Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best UI/UX - Bitcamp ","flutter, node.js, spotify, digitalocean, android-studio",,University of Maryland - College Park,2,No
The Hero 8,https://bitcamp2022.devpost.com/submissions/320786-the-hero-8,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 03:37:28,"Inspiration

We wanted to follow the theme leading to the thought of the joke ""seven ate(eight) nine"". Basing our game off the idea of 8 saves 9 from 7

What it does

The program moves enemies toward our heroes. Once they collide the enemies disappear.
Much like Plants v.s. Zombies, the Princess Nines are what we are protecting, our Hero Eights are the protagonist, and the Seven Gremlins are the villains trying to eat the nines. 

How we built it

We used a combination of Unity 2D game engine and C# to program it.

Challenges we ran into

One team member switched projects mid-way through the hackathon and we also experienced a lot of technical difficulties involving the wifi.

Accomplishments that we're proud of

We're proud of the art, lighting, good visual demo, and music. 

What we learned

We learned to better use our time because that was a major struggle within our group. We wanted to participate in the events and workshops but the technical difficulties made time management hard for us.

What's next for The Hero 8

We hope to make a playable prototype, and maybe continue it in our next jam.
",https://github.com/GoldShortCodes/The-Hero-8,,"Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp","unity, c#",,Baltimore Polytechnic Institute,2,""
BALLOONS,https://bitcamp2022.devpost.com/submissions/320788-balloons,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 03:40:05,"Inspiration

The Ukrainian conflict and the idea of making a missile defense system.

What it does

Tracks a falling balloon through the air using opencv. Masking out all other objects that are not the same color as the balloon and drawing a moment around the balloon and using that to determine its center. A linear regression was ran to predict the path of the balloon which is then popped by a modified nerf bullet shot out of a flywheel based turret. 

How we built it

Most of the hardware for the turret was 3D printed. We used Python's OpenCV module for the object detection.  Through HSV filtering we were able to obtain an accurate outline of each target, from there we calculated the X and Y moments to find the approximate center of the target. We then created an algorithm built around a moving linear regression with filtered kinematic values to predict the position and time of the target. C++ and PySerial was then used with an Arduino to control the servos and motors on the turret.

Challenges we ran into

One of the biggest challenges we ran into was finding the depth of the balloon. To solve this we were able to measure the pixels/in of the plane for which we dropped the ball and used this value to get a depth approximation of the balloon. Additionally, we ran into massive problems with the consistency of the bullet's that we shot. First, we tried 3D printed bullets however these were not top heavy enough despite varying the infill percentage which meant that they wouldn't stay straight as they flew and therefore could not pop a balloon consistently. We then moved to using cheap Nerf bullets. However, these were incredibly inconsistent from bullet to bullet so we had to go through extensive testing on a stationary target to pick out around 10 bullets that work well with our sentry turret. 

Accomplishments that we're proud of

We are proud of our ball detection algorithm as we're able to filter out essentially all noise to get an accurate reading of where the ball is. Additionally, our regression model to predict the trajectory of the balloon was fairly accurate.

What we learned

We learned several different techniques for finding the distance of an object from our system, like using two different cameras to triangulate the objects position and measuring the pixels per inch of our backdrop so we could estimate the position of our object relative to that, which we could use to convert our digital coordinates into real world measurements.

What's next for BALLOONS

We will look into improving the accuracy of our turret and regression model so we can start hitting the balloons more consistently. Once that is finished, we will need to improve our magazine so it can effectively store and shoot multiple bullets in rapid succession. 
","",https://www.youtube.com/watch?v=KrM3xpigQh4,"Best Hardware Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best First Time Hack - Bitcamp","python, arduino, c++, opencv, pyserial, numpy, psipy",,University of Maryland - College Park,3,Yes. We are at the table off to the side near the Toyota sign. Look for the blue hanging blanket.
Charity Ninja,https://bitcamp2022.devpost.com/submissions/320797-charity-ninja,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:02:41,"Inspiration

We were inspired by many technical projects that deal with spreading awareness of social injustice that happens in our society daily. We decided to create an app where users find and donate to the top rated financially healthy charities because some donors usually give back to charities that use a large percentage of the donated money for administrative purposes.

What it does

-An app that serves as a hub for all things charity.
-It allows users to find and donate to the top rated financially healthy charities and/or those charities based on your preferences every month. 
-See volunteer opportunities or charitable events.

How we built it

We used Figma to help build the prototype.

Challenges we ran into

The challenge we ran into was being able to  make the app function well. However, we figured it out, and now, it works fine.

Accomplishments that we're proud of

We are proud that the app turned out to look amazing and function well. 

What we learned

We learnt more in depth about financial health when it comes to donating to charities.

What's next for Charity Ninja

We hope to further work on this app by adding more features.
","https://www.figma.com/file/C3wSMku9A2N6g8SvMNAyPk/Charity-Ninja?node-id=0%3A1, https://docs.google.com/presentation/d/1ZuYcks5GX0Gr2m6kj62AqAw7tOw8hn6D2ep99Zx8U6Q/edit?usp=sharing",,"Best Gamification Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best UI/UX - Bitcamp ",figma,,University of Maryland - College Park,2,""
Fyndr,https://bitcamp2022.devpost.com/submissions/320800-fyndr,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:06:23,"Inspiration

We thought about how much of a hassle it is to find the origins of pictures through google images. We wanted to write a program that would find the original versions of photos, but our focus shifted as we coded. When we realized how great replacing existing photos instead could be, we knew what we had to do. 

What it does

It is a Chrome extension, that when clicked in the toolbar opens a pop up featuring a button. When clicked, the button opens a file prompt to choose an image from the users' hard drive. Once an image is uploaded, it tracks down every image on the page the user is viewing and replaces the source with the users' image. It does this at an interval so if more images are loaded, they will be replaced as well. Using the options menu, users may change the button color too.

How we built it

Using html, javascript, and css we built this extension from the ground up. Javascript was our primary language, and we coded in VSCode. We used Windows 11 and Debian, and stored everything on GitHub.

Challenges we ran into

As we worked, we realized our original goal would be a more difficult undertaking than originally envisioned. However, while coding we found the inspiration for our new idea. One challenge was learning how to save images to chrome so the program could access them later. Our hardest challenge was running the interval. At first, we wanted it to run constantly and replace images on every page the user opened. However, we settled for making it run on a page after the user inserts an image. 

Accomplishments that we're proud of

Making it work.

What we learned

Making Chrome extensions is hard.

What's next for Fyndr

We will allow the user to save as many images as they want, and let the program run constantly on all web pages and custom set intervals. Once we have done this, we will pursue our original vision, creating a program far better than we had every dreamed.
","https://github.com/Brissot/Fyndr, https://github.com/Brissot/Fyndr/releases",https://youtu.be/AsjTqbNdWMc,"Best Razzle Dazzle Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best First Time Hack - Bitcamp","javascript, css, json, html",,University of Maryland - College Park,1,""
What's Cookin?,https://bitcamp2022.devpost.com/submissions/320802-what-s-cookin,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:11:40,"Inspiration

We were inspired to attempt to tackle this problem as it was something we wish existed within UMD. The technology we wanted to use was inspired by a workshop that Vaibhav and Navid had the honor of hosting during bitcamp, “Introduction to flutter.” After the workshop they held we all were interested and curious to bring our newfound knowledge of flutter to life. Aiming to create a tangible project that we saw could be an assist during our time here at UMD. 

With that said this is a very personal project to us. Vaibhav, being a vegetarian, Alexander having a seafood allergy, and myself being gluten-free, having the luxury to eat whatever wherever is not an option. So, we set out to try and solve something that would impact us and presumably others with food restrictions/diets. 

What it does

This is a mobile application that displays the daily updated menu (Breakfast, Lunch, Dinner) for the current 3 UMD dining halls around campus (South diner, The Diner, and 251 North). Each diner traditionally has its own daily menu which varies from diner to diner. Users may filter to their diner of preference and see a live update of the menu. Furthermore, the functionality that we wanted to highlight is its versatility in being able to filter diner menu options for people with dietary restrictions. We found that many times (from personal experience) the trip made to the dining hall was not worth it as the limited selection of food items available to our diets was not worth the trip. Thus, we aimed to tackle the challenge of being able to keep terps connected and updated in a compact and reliable way as to what food was available to them. And what better way to do this than a mobile app. 

How we built it

We used flutter to build the mobile front end of the application. Then, we used the Cockroach Database supported by Google Cloud to store meal data that was taken from the UMD dining menu website. Then we queried the database with SQL from within the app and displayed it. The app also provides filters to specify which types of food one is seeking. 

Challenges we ran into

We ran into a major optimization issue where we were parsing too many strings coming in which was damaging our time complexity. This was one of the biggest challenges we had to overcome, as we had to find a way to work around optimizing the data provided by the cockroachDB and the UMD website. We were able to overcome this issue. 

Accomplishments that we're proud of

Honestly, we are very proud of ourselves for sticking through and working hard throughout the hackathon. We think one of the biggest obstacles was working in an unfamiliar environment and still being able to work together and submit. 

What we learned

The importance of working together. We think that without one another we would have not gotten as far as we did (submit day). Everyone was there for one another, whether someone needed a break, help, or just needed to talk. We also were very happy throughout this as we were surrounded by people who were passionate to learn but also brought the mood up.

What's next for What's Cookin?

We plan to optimize and refine our app so the link between title and our scraper is as efficient as possible. This way we can update and make the app even more practical with functionality that we really wanted to dedicate time to. We would love to see this be an asset to the community. We plan to launch this app in the play store by April 17th. And we hope others will find use for it just like we will. 
",https://github.com/VaibhavSanjay/dining_plan,https://youtube.com/shorts/8Js__TX1WnE?feature=share,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","cockroachdb, python, sql, flutter, dart, beautiful-soup, requests, json, google-cloud",,University of Maryland - College Park,3,No.
MemAid,https://bitcamp2022.devpost.com/submissions/320806-memaid,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:21:32,"Inspiration

One of our team members has a family member who deals with dementia on a daily basis. From this, we got the inspiration to make a memory aid to improve the lives of those with this condition. 

What it does

Our app helps those with memory-altering ailments by recording video and audio of interactions the user has with those around them. By learning what the user sees and hears it can keep track of important information about people they encounter. This can help users link names with faces as well as help them remember key details from previous interactions. This information is relayed to the user through a headset, like an airpod or other Bluetooth device. 

How we built it

The application consists of two main parts, a frontend mobile app and a backend server. We built the mobile app using Flutter and Dart, which we enabled to stream audio and video to a server. The backend server is written in Python 3 and handles the processing of all audio and image data. We used computer vision with neural networks in order to detect and recognize faces. We utilized Google Cloud APIs for speech to text, text to speech, and natural language processing. We keep track of each sentence recorded, and then when a new face is recognized, we can pull from recent sentences and see if that person mentioned their name.

Challenges we ran into

We had some difficulty figuring out how to convert speech to text as a constant stream of audio instead of using saved recordings. We also had to optimize our facial recognition processing to quickly yet accurately recognize faces.

Accomplishments that we're proud of

We were able to successfully stream video and audio between the device and the server, allowing us to process the information on stronger hardware. We also constructed an aesthetically pleasing UI for the app.

What we learned

We learned how to send video and audio streams to and from a server. We also learned how to locate and recognize faces. Additionally, we learned how to extract important information from text using natural language processing.

What's next for MemAid

The next step for MemAid is to add additional utility by keeping track of additional information. This could involve events associated with a person, to-do items, relation to the user, and more! In addition, we would like to integrate IoT devices, such as an external camera so the application is more discrete.
",https://github.com/varun-ramani/bitcamp-2022,,"Best Use of Google Cloud - MLH, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","python, dart, face-recognition, google-web-speech-api, natural-language-processing, flutter",,University of Maryland - College Park,3,""
Actordle,https://bitcamp2022.devpost.com/submissions/320811-actordle,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:27:52,"Inspiration

With the popularity of Wordle, we wanted to make a creative spinoff that people could enjoy, especially film buffs.

What it does

Actordle is a game with the objective of guessing the correct movie given one headshot of a cast member per try. You win if you guess the movie within 6 tries.

How we built it

We built the website with a React frontend in Javascript, and we used IMDB API calls to gather data.

Challenges we ran into

We ran into technical problems with React components and state, but we powered through and solved all of them, which we learned a lot from.

Accomplishments that we're proud of

We are proud of making a functioning website that is playable right now. 

What we learned

We learned how to structure a React frontend and and get data from API calls. 

What's next for Actordle

We would like to add movies to the list and make new modes for Actordle.
","https://main.d10w6vtwbv3lt5.amplifyapp.com, https://github.com/bjacob1/actordle-fe",,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp","react, javascript, imdbapi.org",,University of Maryland - College Park,1,No
Perfect predictions,https://bitcamp2022.devpost.com/submissions/320819-perfect-predictions,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:41:04,"Inspiration

People would hash some message ahead of time and reveal their prediction in the future to show their prediction or show off what they know. Although this method is cool, it's hard to track their track record and people can easily delete or ignore their past predictions. My site's predictions are immutable and makes monetizing predictions much easier

What it does

Allows people to create predictions with specific timeframe and automatically reveal it when time is up. It shows all past predictions and lets people pay to see someone's prediction before the actual reveal time. A good example is someone can claim they are good at trading stocks, but they often only show the highlights. My platform lets people build history and let them monetize through early reveal of good picks through early predictions.

How we built it

React / Next.js frontend with server side rendering
Flask backend
CockroachDB serverless cluster

Challenges we ran into

SQL certificate and SQL injection protection
React 18 hydration issue with Next.js

Accomplishments that we're proud of

Working backend that tracks information about posts, user and their paid content. It supports a few different filters such as filter by person and logged in user.
Frontend application that is able to accurately and clearly display information about predictions. It has dynamic routing for specific user ID

What we learned

Building REST API with flask connected to serverless database
React application with dynamic routing and server side rendering

What's next for Perfect predictions

Adding authentication in addition to just letting people put in username
Payment API support
Better cleaner UI and leaderboard / voting feature
","https://github.com/seanyang0813/bitcamp-2022, https://github.com/seanyang0813/bitcamp-2022-server",https://www.youtube.com/watch?v=aewB4lCeTMQ,"Best Web Monetization Project - MLH, Best Use of CockroachDB Serverless - Cockroach Labs","react, javascript, python, flask, cockroachdb, sql, next.js",,"",0,No
AuxiGen,https://bitcamp2022.devpost.com/submissions/320824-auxigen,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 04:48:00,"Inspiration

My friends and I are all pretty into music, and so we wanted to build a project related to music! A couple of us were working on our first hackathon project, so the hackathon was a major learning experience for all of us.

What it does

Given a user-specified ""key"" for the song (a key for a song is basically a set of notes designed to work together to achieve a certain affect -- e.g. ""C major"" or ""D minor""), the program generates chords structures and songs based on popular music chord structures.

How we built it

We worked with an API called Tone.js, and did all the backend in typescript. A couple of us were familiar with basic music theory, and that was really helpful background for figuring out what notes/patterns of chords we could use to build ""songs""

Challenges we ran into

One hurdle we had to work around was all of us having different obligations outside of Bitcamp, which limited how much time we actually had to work on the project. That made it harder to deal with a few of the logical issues related to connecting the music theory to programming. The API we were using also gave us a couple issues. 

Accomplishments that we're proud of

Despite API issues, we were still able to figure out how to produce chords and solve several of the logical issues we had to deal with when trying to navigate basic music theory in code. It was pretty fun being able to actually generate full chords and make code which allowed us to move them around different keys without breaking the rules of theory.

What we learned

Typescript and APIs! None of us had ever used typescript before, but it was surprisingly easy to use.

What's next for AuxiGen

While we were able to produce chords and work around basic theory issues we were facing successfully, the set of chord progressions we use don't always sound great together. If we spent more time working on the project, we would like to figure out ways to more strategically choose chord progressions so that they go better with each other. Another cool expansion would be to support more modes/types of chord groupings. It would also be nice to build out a more substantial/appealing front-end.
",https://github.com/MattRelacion/AuxiGen,https://youtu.be/59aaAUwXU8M,"Best Razzle Dazzle Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","typescript, react, tone",,University of Maryland - College Park,2,""
TERPMAX: Team Management Discord Bot,https://bitcamp2022.devpost.com/submissions/320834-terpmax-team-management-discord-bot,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 05:07:37,"Inspiration

We wanted a product which would allow for effective team management. Our team members held frustrations regarding previous team experiences, specifically the difficulties that came with setting meeting dates that worked with everyone's schedules, establishing a steady line of communication (email? ELMS? GroupMe?), storing essential resources in one place, and maintaining a project workflow which would keep group members on track. We wanted something which would bolster team productivity! This innovative Discord bot is the fruit of those frustrations. Discord allows for a great deal of flexibility and customizability, which gives our Discord bot the possibility of further development.

What it does

This project can manage multiple projects (or sub-projects within an overarching project). For each of these projects, users will be able to add, edit, and delete tasks from a Todo list structure. They are also able to store URLs of important links and resources in a FileManager, which they can view easily to see a displayed list of resources. Additionally, the bot has the dynamic functionality for running team meetings; upon entering a voice chat, the bot will create a corresponding text channel so participants can write down meeting notes as they converse. upon, the end of the meeting, the bot will transcribe all of the notes and send the meeting minute file into the project's group chat for easy access.

How we built it

We used the Discord Python API and the Python language to create an innovative Discord bot which would allow teams to manage projects, create Todo lists, set reminders, transcribe team meeting notes, and organize shared files.

Challenges we ran into

There was a bit of a learning curve when we started out, since our team was unfamiliar with the Discord API. This required us to spend many hours reading through the Discord documentation for us to be able to even set up the basic structure of a Discord bot, let alone Discord-specific components and objects necessary for proper configuration. We also spent a great deal of time discussing amongst ourselves in order to determine the most efficient and structurally-sound implementation which would allow users to easily make commands and allow for us to be able to have a neat backend. During these conversations, we found ourselves conflicted with the direction of the project and had to handle miscommunication by clarifying team goals and project objectives. Lastly, this was the first hackathon for three of the four members making up our team. Thus, it took a while for us to get a hang of the hackathon-esque environment. 

Accomplishments that we're proud of

We managed to be quite adept at utilizing the Discord API even though this was the first experience where we had to reference it. We also managed to effectively manage team tasks, by dividing and conquering work according to skill and interest. Are bot is also functional! This is our first time creating a bot at all, so it's a great achievement.

What we learned

As I mentioned above, we learned how to use the Discord API to make appropriate calls in our framework. We also learned how to best organize project files and design backend architecture for a project created from scratch. 

What's next for Team Management Discord Bot

Next steps include implementing server and channel wide selection mechanisms that utilize Discord users' connected Google Calendar data to return most opportune meeting times; modifying the FileManager function to store pdfs, images, and other files (besides urls/messages); fix a Reminder implementation so we users can set notifications; and provide other perspectives on the tasks in Todo list (like Kanban perspective). 
",https://github.com/licykk/Bitcamp2022,,"Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","discord, python",,University of Maryland - College Park,3,"No, we don't need to stay in place."
WaveCheck,https://bitcamp2022.devpost.com/submissions/320836-wavecheck,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 05:17:37,"It's not done yet but it was (is) gonna be lit
",https://wavecheckme.herokuapp.com/,,"Best Use of Data in an Application - Two Six Technologies, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","react.js, node.js, express.js, html, javascript, css, python",,"University of Maryland - College Park, University of Maryland - University College",2,no
Apex Pies,https://bitcamp2022.devpost.com/submissions/320838-apex-pies,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 05:21:43,"Inspiration

When brainstorming we realized that there a lot of people have an interest in the field of finance, but the learning curve might be too steep for someone to feel comfortable with the investing landscape immediately. For this reason, we decided to build a tool that helps users obtain an overview of what they could potentially invest in according to key demographic parameters like age and risk tolerance. We strategically decided to ask for certain information to get the best encapsulation as to what type of investor the user is. 

What it does

Our project creates a potential diverse portfolio for users based on an algorithm that relies on key demographic information from the user. We asked for basic information, and gave detailed descriptions of what each portion is useful for in terms of the algorithm. We ask users for their top industry, and provide them with an overview of each of the sectors. Based on this, we create a portfolio with 55-60% of the portfolio being in the sector that they pick, and the remainder being divided up with the other sectors, which all comes together to build a diverse portfolio. 

How we built it

For the front-end, we used React.js for all of our components. We used HTML and CSS to style our website and create the flashier UI elements.

For the back-end, we used Python which was for the stock picking algorithm based on the user age, risk tolerance, and the sector that they want to invest in. For our stock-picking algorithm, we developed our own formulas for achieving a target beta, and then used an algorithm to pick the most optimal stocks for the portfolio. We used Google Finance in order to find the betas for each of the stocks. 

For our database, Google Cloud Firebase was the way to go. We realized that Realtime Database fulfilled our needs perfectly by allowing us to add unstructured JSON data. We added the pies for each of the users into Realtime Database, along with a link to the visualizations we created and the average beta. 

We used many libraries for our project. We utilized Pandas in order to create the data frames that we received from Google Cloud’s Realtime Database. For our visualizations, we used Plotly in order to generate data visualizations, and then had to use the Create Studio/Plotly API in order to upload our visualizations for our front-end to fetch. 

Challenges we ran into

We ran into a lot of challenges with using our tech stack as this was the first time that we created a web app. Some struggles we went through were creating data visualizations as well as creating the back-end algorithm for picking the top stocks. We first aimed for picking a stock that fell within the target beta, but sometimes, the algorithm would fail to pick one fast enough and would time out. We had to change the algorithm in order to make sure that such an error doesn’t happen. With the data visualizations, we aimed to first convert our graphs to an HTML string, but we realized that it wouldn’t work due to the string being too long. We had to use the Plotly API in order to upload our visualizations to the Chart Studio website. Based on that, we had to pass the link to the visualizations through JSON for the front-end to show the visualization.

Another recurring struggle was making sure the order of which ReactJS executed different actions when moving from one screen to another was consistent. For example, the “Submit” button in the home page does the following big tasks in order: send request to Flask backend to create optimal pie and publish it to the Firebase DB, move the user to the result page, request the finished Plotly plot from the backend, and then render that graph and the rest of the results page.

Accomplishments that we're proud of

We are proud of creating a dynamic user interface and creating an alogorhim that achieves a reasonable target beta based on the parameters provided by users. Most of us had no prior hackathon or frontend development experience. However, we were able to put together the various components of the project by persistently researching, designing, and testing the code.  

What we learned

Urjoshi: Coming in I had no experience with front end. However I learned how to collaborate with a team on a software product using the git workflow, write and style html components with html and css, and design for better user understanding. 
Adithya: The overall React.js framework and communicating between react front end and flask back end. 

What's next for Apex Pies


A buy functionality that trades on paper trading API which will spawn more educational metrics on pie performance. 
Incorporate other interesting and impactful user metrics such as yearly income when determining the best recommendation of stocks.
Create a more robust list of signals that shape a optimal pie in addition to the beta indicator. 
More ideas we have:
Educational pop-ups
More randomization in the diversification of the pies
Being able to access all the stocks on the market 
Better UI experience (grouping pie pieces by sector)

",https://github.com/adithyasolai/apex-pies,,"Best Use of Google Cloud - MLH, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Educational Hack - Bloomberg, Best Use of Data in an Application - Two Six Technologies, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","react, python, flask, google-cloud, firebase, html, css, pandas, numpy, google-finance, git",,University of Maryland - College Park,3,""
Group Trip Scheduler ,https://bitcamp2022.devpost.com/submissions/320878-group-trip-scheduler,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 06:32:15,"Inspiration

Our Inspiration from this was how our friend group would always meet up as a group and do major activities together (like going to the zoo or an amusement park). We wanted to share this experience with others and help them find a group they can have fun going to places with. Going to places alone is not as fun as going with a group.

What it does

The app allows users to create events/trips which others can join. The UI is a map where everyone can see markers for trips around the world in which they can click to get more information about what trips or activities people are doing in that location. 

How we built it

We built our app through Android Studio and constructed our ideas through discord 

Challenges we ran into

Some of the challenges we ran into was working with the GUI in Android Studio. A lot of the settings of the GUI were either too complicated or didn't work the way we wanted them to. We tried using After Effects for the GUI by transferring the XML files but were unsuccessful because of Abobe's support for XML exports. We also struggled a lot with trying to set up a database to push and receive data remotely from, and most of our time ended up being wasted because of that.

Accomplishments that we're proud of

How well we integrated the map and seamlessly went from a login screen to it. We also are very proud of how well we worked as a team and split up the work without getting in each other's way even though we were all coding from different devices. It is very easy to clobber each other's progress when we aren't sharing the same screen and that is something we were able to avoid.

What we learned

For this project, we all went and explored new things. None of us have ever done any of the stuff related to our project before, so everything we did was stuff we did for the first time. We learned the challenges of creating an online database, how to use Android Studio, how to code in Kotlin, and how to manipulate GUI elements. This was also the first time any of us have truly worked as a team of 3-4 people for a programming project, and so we had to learn file management systems like Git for the first time (and it is something we all picked up pretty quick on and integrated with what we did). 

What's next for Group Trip Scheduler

The Group Trip Scheduler right now is very bare bones. We are planning to develop a group chat feature, a friends list, safer log ins, nearby events, notifications approaching the event, and event filters/restrictions to match criteria. In the very end, we hope to also be able to match people up together based on data we collect about them so people will be more likely to form life long friendships.
",https://github.com/backedman/GroupTripScheduler,,Best First Time Hack - Bitcamp,"android-studio, kotlin",,"University of Maryland - College Park, UMD",3,No
Better Housing: Affordable and Valuable In Washington D.C.,https://bitcamp2022.devpost.com/submissions/320884-better-housing-affordable-and-valuable-in-washington-d-c,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 06:48:23,"Inspiration

I have always heard the constant trope made by opponents of new affordable housing communities in many cities say that they decrease the home value of nearby properties. Often I'd see residents of wealthy neighborhoods in cities that lack affordable housing oppose new developments on this ground, and I always wanted to know if that had any merit.

What it does

In this notebook, I look at new low-income housing developments funded by the Department of Housing and Urban Development and measure the impact on nearby property sales. This can be seen through graphical and statistical analysis.

How we built it

With the D.C. property sales data provided by Costar and Low-Income Housing Tax Credit locations, I combined the datasets in a way that created time-series location-based housing data. Then I used pythonic libraries to display this information to strengthen my hypothesis.

Challenges we ran into

My main challenge with this project was that I was unsure how to visualize and convince the reader that affordable housing does not lower property values. I originally wanted to create a scrollytelling D3 based persuasive webpage, but that proved too time-consuming in such a short time.

Accomplishments that we're proud of

I think I made a pretty good case that in Washington D.C., property sales increased in every district regardless of the new affordable housing. In about half of those areas, the value of properties outpaced the growth of new affordable housing communities.
",https://betterhousing.mathewsteininger.com/,,"Best Use of Real Estate Data - CoStar Group, Best Educational Hack - Bloomberg, Best Social Good Hack - Bitcamp","python, folium",,University of Maryland - College Park,0,No
Decisive Dining ,https://bitcamp2022.devpost.com/submissions/320900-decisive-dining,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 07:15:11,"Inspiration

We’ve all experienced wanting to go out to eat (either individually or with a group of friends) but not being able to decide where to go. Normally you hear “I’m fine with anything” or “I don’t really care where we eat,” which makes finding a place to go take even longer.

Worry no more with Decisive Dining! We created a website that picks ONE restaurant based on proximity to your location, budget, and cuisine preference (including Chinese, fast food, Italian, Korean, Mexican, Vegan, and Vietnamese food, as well as a “None” option if you’re open to anything). 

What it does

Our Decisive Dining project has users complete a short survey with their phone number, zip code, type of cuisine they want, and budget. Then it takes this information and uses it to pull restaurants from the Google Maps API based on the user’s preferences. It then picks a random restaurant from the list of fitting restaurants for the user to go to.  

How we built it

In order to create the web version of Designated Dining, we used ReactJS for our frontend and linked it to a Django backend running on CockroachDB. Our API uses the django-google-maps API to get data of nearby locations and to convert zip codes and addresses into geographical coordinates.

To get restaurants near us with specific attributes (e.g. type of cuisine, different price rankings, proximity), we used Python to interact with GoogleMap Geocoding and Places APIs. If more than one restaurant fit the criteria, we randomly selected one as a decision for our user. 

Challenges we ran into

One of our biggest challenges was connecting our React frontend with our Django backend. We also generally struggled as we worked in React, as we had no prior experience working with it and had to spend ample time researching and loosely following tutorials. 

Accomplishments that we're proud of

We had to teach ourselves how to use React, SQL, Django, JavaScript, and how to connect our frontend to our backend after never having prior knowledge all within 36 hours. We are proud of our idea itself as we have all struggled with finding a place to ear, as well as successfully building a fully functional design within 1 ½ days. 

What we learned

At the start of bitcamp, we had no prior experience with React (what we used for our frontend) or Django (what we used for our backend). We also learned how to pull from the Google Maps API which gave us a whole new appreciation for the complexity of Google’s services!  

What's next for Decisive Dining

Ideally, we want the user to only have to use the website once to sign up and enter their zip code. From there, Designated Dining would be completely SMS based where the user would text a bot, which is more convenient than having to look up a website every time they want to use the Decisive Dining services. The user would text certain keywords that the bot would respond to and would send a text with the final decision for a restaurant as well as a link for the location. (The user would also be able to alter their zip code through texting key words to the bot, even after entering a different one when they signed up through the website.)
",https://github.com/lluo02/Bitcamp,https://www.youtube.com/watch?v=iRlcXjTe9us,"Best Use of Google Cloud - MLH, Best Razzle Dazzle Hack - Bitcamp, Best Use of Data in an Application - Two Six Technologies, Best Moonshot Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","python, javascript, react, django, html, css",,University of Maryland - College Park,2,No
Fast Platform,"",Draft,Pending,Additional info,04/10/2022 07:18:54,"Inspiration

What it does

asdf

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Fast Platform
","",,"Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp",fastapi,,University of Maryland - College Park,0,""
TerraPinned,https://bitcamp2022.devpost.com/submissions/320903-terrapinned,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 07:23:23,"Inspiration

One night last semester, my groupmates and I were deep in the thralls of a CMSC351 homework assignment. As we computer scientists are wont to do, we decided to take a break. We wound up playing a game of GeoGuessr, and after we spent an hour tracing highways through rural Norway, searching for our location, we joked about makng a version of this game for the campus where we spend all of our time. Unfortunately, we didn't have much time to give this project the love and attention it deserved, and so when BitCamp sign-ups opened, we knew what we had to do. 

What it does

TerraPinned is a simple, but surprisingly in depth game. When you press play, you are virtually transported to an iconic (or at least iconic in our approximation) location on the University of Maryland's fine campus. You are given a 360 degree view, and tasked with locating where exactly you are. You enter your location by dragging the pin on the map to the appropriate location.  When you are confident in your answer, you can lock in your answer and you will be rewarded with points appropriate to how close/far you were. 

How we built it

We used Node.js and React to build a functional website. We used Github to version control, and Python for various simple scripts throughout. We also used the Google Maps API for the map components and Panolens for the 360 virtual camera. 

Challenges we ran into

None of us are experienced with React, Node.js, or even Javascript. As with any learning process we learned through failure. Lots and lots of failure :). We ran in to issues constantly, about concepts that normally we wouldn't find very challenging. For example, we spent a few hours stuck on accessing a JSON file in Javascript. Moreover, we struggled with where to host our project. We registered a website with Domain.com, and served it through a Github Page, but we had a lot of difficulty dealing with DNS connections and size constraints. 

Accomplishments that we're proud of

Our goal was to learn something new and make something fun, and we feel that we succeeded on both accounts. We all are now intimately more familiar with the Javascript web development platform, as well as HTML and version control. We also made a project that we are proud of, that met the criteria we wanted to hit. We're also proud that we didn't give up. We worked all day and all night, and though we got discouraged, we powered through. 

What we learned

We learned intermediate web development with Javascript and React. We learned how to divide work to suit each of our skills. Finally, we learned how to persevere, and that though sometimes you can feel discouraged, the joy of succeeding at something difficult is unparalleled.

What's next for TerraPinned

Ideally, we'd like to make the interface a little cleaner. We'd like to add loading screens and a nicer UI. Moreover, we'd like to add more locations, and maybe some vertical functionality. Currently, the game doesn't account for height (I.E. the fifth floor vs the second), and we'd like to change this.
",https://github.com/AmanSheth/TerraPinned,,"Best Razzle Dazzle Hack - Bitcamp, Best Domain Name from Domain.com - MLH, Best UI/UX - Bitcamp ","react, javascript, node.js, html5, python, github, domain.com",,University of Maryland - College Park,3,No
Color Blindness Simulator,https://bitcamp2022.devpost.com/submissions/320920-color-blindness-simulator,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 07:49:21,"Inspiration

I tend to get a lot of shower thoughts out of nowhere, and this idea to create a virtual experience that replicates color blindness has been in my head for a while. With a bit of research, I learned that even today, there are accessibility problems in video games regarding color settings and those with color blindness. This can lead to frustrating experiences or games that are straight-up unable to be played.

What it does

Using simple controls through WASD and the mouse, you can navigate the terrain and toggle different lenses that replicate color blindness. 

How I built it

Using Unity, I downloaded a handful of packages to helped me properly create this experience. From texture packs to environment assets, to tools for terrain sculpting and camera filters. I created a lot of the C# and C++ scripts for the project myself, but followed some YouTube tutorials for scripts for things I was unfamiliar with.

Challenges I ran into

Initially, I planned to implement this project for VR, but I wasn't able to find anyone here at Bitcamp who had the hardware or expertise in working with VR development. Then, I decided to do an AR game, but unfortunately, Unity on Windows is incompatible with my iPhone, so I then decided to make the switch to a simple 3D game. In terms of developing my project, the biggest obstacle I had to overcome was figuring out how post-processing works. It used a ton of new scripting I was completely unfamiliar with, so I had to resort to web tutorials and videos for help.

Accomplishments that I'm proud of

I'm proud of how well I was able to get the character and camera to control, as well as how nice and clean the level I created is. I'm also proud of how I was able to pick up how to use new tools that I had never used before.

What I learned

Unity's rendering engine is a lot stronger than I thought, so creating lenses and textures for my game proved to be a challenge. Now that I'm introduced to post-processing, I can take what I learned and use it on some of my personal hobby projects with Unity.

What's next for Color Blindness Simulator

I'm planning on getting this project to work fully, as well as possibly adding more features such as interactable games that simulate the difficulty of navigating things with color blindness. 
",https://github.com/dino-tendies/Color-Blindness-Simulator,,Best Social Good Hack - Bitcamp,"unity, c#, c++, c, github, visual-studio-code",,"",0,M
Untitled,"",Draft,Pending,Manage team,04/10/2022 07:54:36,"","",,"","",,University of Maryland - Baltimore County,0,""
Bonfire,https://bitcamp2022.devpost.com/submissions/320941-bonfire,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:06:07,"Inspiration

We envision this app to be a great way to supplement group interactions back into our daily lives. Face it, the pandemic turned many of us into hermits. We also picture this being a great resource for students, from freshman to seniors, on campus to meet new people.

What it does

Our app runs completely off of Bluetooth, meaning No internet? No Problem! This also limits new interactions to line-of-sight communication, establishing the important face-to-name bonding. We are currently able to see currently hosted bonfires, join them, view the connected users, and share messages amongst the Bonfire!

How we built it

We built this app in Android Studio using Google Nearby Connections API.

Challenges we ran into

Many hours were spent figuring out the Bluetooth communications, this left a lot to be desired in terms of user and group customization. Our hacking also began in the afternoon on Saturday, we've never had so much caffeine!

Accomplishments that we're proud of

With this basically being our first time developing an app, we are very excited with what we were able to produce in such a short amount of time.

What we learned

We learned a lot in terms of of app development, and with this app relying solely on Bluetooth adapters, we also learned how important is to have plenty of hardware to test with! We also learned that coming in person together as a team resulted in an amazing time, and were able to accomplish so much more than if we were remote. Hey, that sounds like a Bonfire!

What's next for Bonfire

We plan to hit the ground running with this app, once we take a much needed rest after this Hackathon. We want to implement lots of modern user profile customization features to provide a polished experience when the app reaches the hands of the users. 
","",,"Best Social Good Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp",google-nearby-connections,,"University of Maryland - Baltimore, University of Maryland - Baltimore County",2,"Row B, Right in front of the SoKat booth"
DripBot,https://bitcamp2022.devpost.com/submissions/320942-dripbot,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:06:49,"Inspiration

Remembering to drink the required amount of water can be difficult sometimes, especially for busy college students. So, we created DripBot to remind users to stay hydrated.

What it does

DripBot is a Discord Bot that sends periodic messages to the user, reminding them to drink water. The bot asks users for their age and weight to determine the required number of ounces to drink. Next, the bot asks users when they wake up and go to bed, which determines the intervals at which the messages will be sent. If users don't respond to the message within time, the bot sends a second message.

How we built it

We used Python to create this project. Using the discord.py API, we coded the entirety of the project on the Replit IDE. To send text messages, we utilized the Twilio API.

Challenges we ran into

We ran into some challenges when we tried sending text messages to the user's phone through Twilio. We also had some trouble getting the bot to send scheduled messages at the correct time and not send messages in an infinite loop.

Accomplishments that we're proud of

We're proud of the bot's text message feature and the ability of the bot to send messages at various intervals, depending on the user's wake-up time and bedtime.

What we learned

We learned how to create a bot on Discord and use Twilio for the first time.

What's next for DripBot

We would like to improve DripBot by adding more personalized questions for the user to determine water intake because it depends on a variety of factors, not just weight and age. Eventually, we would like to expand this app to be a general health reminder bot, reminding users to take their medication, go to sleep, etc.
",https://replit.com/join/asxuputhrg-pramatik,,"Most Creative Use of Twilio - MLH, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","python, discord.py, twilio",,"University of Maryland - College Park, University of Maryland - University College",3,""
Morse Code Blinking Translator,https://bitcamp2022.devpost.com/submissions/320947-morse-code-blinking-translator,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:17:07,"Inspiration

Our inspiration was from Spy movies and events that had secret morse code messages within the blinks of the person.

What it does

Based on the blinks, the software is able to turn those blinks into english letters through morse code.

How we built it

We built it using Python using the cvzone and cv2 library extensions that added in facial detection. Based on the distance between the top eyelid and bottom eyelid would determine a blink, and the timing between each blink will determine if it's a short blink or long blink,

Challenges we ran into

Some challenges we ran into were to having the proper library extensions to make it work. Some of us did not have the proper hardware or software in order to download the libraries we needed. Another issue was the facial detection was very sensitive and recording blinks were not accurate at all.

Accomplishments that we're proud of

We are proud that we were able to make the sensitivity better and more accurate to count blinks. We were also able to optimize it better later on.

What we learned

We learned much more about facial detection and how it works and the obstacles we would run into if we would continue this project. It gave us a better sense of the strengths and weaknesses of facial detection.

What's next for Morse Code Blinking Translator

The next steps for the project is to make it more accurate at different distances and different angles. 
",https://github.com/tklaus-git/morse_code_blink/,https://youtu.be/beUByo-Jm8k,Best First Time Hack - Bitcamp,python,,University of Maryland - College Park,1,no
Venture,https://bitcamp2022.devpost.com/submissions/320950-venture,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:20:19,"Our project was inspired by the theme of this years bitcamp ""Adventure Awaits""! The problem that we have seen in young adults today is that they are excited to go adventure to new places but they are uninformed. Also another problem that they face is even if they know where to go, often they feel scared to go by themselves. We decided to make an app that will allow young adults to see the best events in their area whether its a nightclub having an event, campus party, 5 v 5 basketball game, or a book club. Once you found where you want to go, we will then then use our algorithm based on your interests and what events you have gone to, to determine several options for friends we think you would want to go to the event with. Due to the social isolation and loneliness of Gen-Z post Covid 19, our generation is desperate from a way to help us all reconnect again. No more will young adults sit in their rooms unwillingly on a Friday night without anything to do or someone to spend it with. Introducing our app Venture.

We learned through this project that it is really hard to develop a figma design, and an app in 36 hours. We had to make a design, a backend, and a front end in such little time and it was very hard giving us a reality into what may be in we decide to pursue this in the future.

We built this project using React-Native, PostgreSQL, Django, CockroachDB
Our video was made on expo
We also made a slide on Google Slides

The biggest challenges we faced were on the coding end as we were not able to get as much done as we hoped to
","https://github.com/aidmelvin/bitcamp-venture-frontend, https://docs.google.com/presentation/d/1OXc-114G9cynMVKI8NkTbfSZEUPXXDnx9zplw8d3HWQ/edit#slide=id.p",https://www.youtube.com/shorts/QEJ3a_G4XGE,"Best Web Monetization Project - MLH, Best Use of Data in an Application - Two Six Technologies, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","python, javascript, django, postgresql, cockroachdb, react-native",,"University of Maryland - College Park, University of Maryland - Baltimore County",3,No we can move anywhere
Bitcamp #1,https://bitcamp2022.devpost.com/submissions/320951-bitcamp-1,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:22:58,"Inspiration

I have always been obsessed with music, and many times I'll hear of a song I want to listen to but I don't have a way to remember to listen to it later.

What it does

Enables the user to add songs to a list that they want to listen to later, and remove the songs from the list as they listen to it.

How I built it

Got source code from to-do list and changed the functionality, design, and purpose.

Challenges I ran into

Getting the listener for the clear listened button to work.

Accomplishments that I'm proud of

Learning how to code in HTML and JavaScript.

What I learned

I learned what it takes to make a website using HTML and how to add buttons using JavaScript.

What's next for Bitcamp #1

Add more functionality to take the user to Spotify to listen to each song.
",https://www.dropbox.com/sh/ednv7ddm7cvqmfr/AABtEsCvmKlorKpMWIo2WDHWa?dl=0,,"Best Razzle Dazzle Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ","html, javascript, css",,University of Maryland - College Park,0,""
pop-bot,https://bitcamp2022.devpost.com/submissions/320956-pop-bot,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:30:42,"Authored by

Dilan Cruz-Flores,
Raion Fet,
Joshua Ikegwu, and 
Dhruv Rathod

Inspiration

All of us play the game Counter-Strike: Global Offensive together using popflash.site. Sometimes, we would like to know our stats after a game, or we would like to know how well we did compared to someone else that we played with. 

What it does

This Discord bot responds to certain commands done by the user on a Discord server. The user must start by registering their popflash profile to their Discord username by way of the !reg command. Doing so will send their popflash id to our database based in MongoDB. Once the user is registered, the bot will let the user know by way of a Discord message and will in return the user's stats in the form of a Discord message

How we built it

This project was built using javascript on the front and backend. We also used Discord's developer portal in order to create the actual Discord bot and give it the appropriate permissions. 

Challenges we ran into

First and foremost, none of us have coded in javascript before, which was a slight problem seeing as how our entire project depended on us being able to use javascript. Secondly, once we had the Discord bot created via Discord's developer portal, we had trouble getting it to respond properly to our commands. We also had trouble getting Docker to work properly with the database that we were using. 

Accomplishments that we're proud of

We're quite proud of the fact that we managed to get the bot to respond to different commands besides !reg.

What we learned

We learned a lot about javascript! Since it was the first any of us had seen javascript, we learned to rely on each other for help and assistance in case someone else had figured out something we hadn't. We also learned a lot on using a database, which only one of us had worked with.

What's next for pop-bot

We would like to implement many more commands. Some potential ones are:


!compare: By passing two users id's, we could compare the two people's stats

",https://github.com/RaionVAF/bitcamp2022,,"Best Gamification Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best First Time Hack - Bitcamp","mongodb, javascript, docker",,University of Maryland - College Park,2,no
Color Bit Wars,https://bitcamp2022.devpost.com/submissions/320957-color-bit-wars,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:30:47,"Inspiration

Heavily inspired by /r/place, we decided to make a game for Bitcamp intended to pit the color teams against each other and encourage teamwork and cooperation.

What it does

Every few hours, an image is presented and all teams will have their own canvas to try and recreate the image. Every user can place down a pixel of a color they choose, with a cooldown of 5 minutes. However, where you choose to place your pixel can decide which team wins. Users can choose to place down their pixel to help recreate the picture or clean up their team's canvas, or choose to place a random pixel on the other teams' canvases to sabotage their progress. Whichever canvas most closely resembles the image by a certain period of time wins for that period, and another image is shown and the canvases reset.

How we built it

HTML5/CSS/Javascript 

Challenges we ran into

HTML5 Canvas gave us a few mathematical issues involving estimation and forcing input to change by approximating user input coordinates to the nearest acceptable coordinates.

Accomplishments that we're proud of

First javascript project

What's next for Color Bit Wars

Logging and account integration, multiplayer integration, automatic timer and resets. Selection cooldown, show all previous canvases, stats page
","",,"Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Moonshot Hack - Bitcamp","css, html5, javascript",,University of Maryland - College Park,1,no
Quarter Portal,https://bitcamp2022.devpost.com/submissions/320958-quarter-portal,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:31:20,"Inspiration

Finding a house off campus already served enough of a challenge. With the added struggle of finding roommates that won't be physical health hazard, it can be very overwhelming to find the best living situation. 

What it does

Every user is given a form regarding what kind of houses they are searching for. They select attributes such as the number of rooms, type of housing, the home's conditions, and more to get a result of houses that match their criteria. What sets it apart from normal sites that have rental listings is the incorporation of matching users with each other based on the similarities between their own search results. 

How we built it

Using Costar's public housing data that they've provided for this hackathon, we utilized that and incorporated it with cockroachdb's system. 

Challenges we ran into

Getting cockroachdb to work seamlessly was the biggest challenge. We've never worked with their systems at all before and trying to migrate from our existing knowledge of sql to postgresql was not as easy as it would seem. This was due to the many nuances between the two that are easily overlooked such as syntax and names of the object attributes when interacting with it through a webpage.

Accomplishments that we're proud of

We're proud of the fact that we were able to collate the data and implement and utilize a database system we had never used before.

What we learned

Incorporating a variety of programming languages and technology stacks together is always a common lesson at most hackathons.

What's next for a

The next step would be incorporating a user profile and allow for users to have more metrics aside from similar search results to be able to match with each other.
","",,"Best Use of Real Estate Data - CoStar Group, Best Use of Data in an Application - Two Six Technologies, Best Use of CockroachDB Serverless - Cockroach Labs","javascript, node.js, express.js, css, postgresql, cockroachdb",,"Rutgers, The State University of New Jersey",1,No
so-basicly,https://bitcamp2022.devpost.com/submissions/320959-so-basicly,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:32:11,"Inspiration

We originally had a different project in mind, but on the morning of the second day of the hackathon, our adventure to South campus for breakfast at Dunkin' Donuts turned into a whole hour of walking back and forth, trying to catch a shuttle (we ended up walking all the way from north campus to south and back). We knew that this was a more relevant problem to solve, so we immediately switched our project to so-basicly

What it does

This application uses data scraped from the Shuttle-UM website (https://transportation.umd.edu/shuttle-um) stored in a SQL database (CockroachDB). The front-end of the application works on the Django framework.

The user can select options from a list of departure and arrival stops and the program uses Dijkstra's algorithm to calculate and display the fastest possible route. The application uses an undirected graph to mimic the stops, with edges being weighted with the time it takes to get from one stop to another.

Challenges we ran into

Unfortunately, the Shuttle-UM website was difficult to scrape because the HTML script wasn't consistent enough for us to be able to use beautiful-soup as well as we would have liked. We did not have enough time to manually enter the data, and therefore could not progress past the data collection point.

What's next for so-basicly

However, we definitely plan on completing this project soon, so that we can use the application ourselves!
",https://github.com/shrads-4/so-basicly,,"Best Social Good Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best Use of CockroachDB Serverless - Cockroach Labs","python, beautiful-soup, cockroachdb, psycopg2",,University of Maryland - College Park,1,""
Squirrel Quest,https://bitcamp2022.devpost.com/submissions/320964-squirrel-quest,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:35:58,"Inspiration

The squirrels on campus were our inspiration because they are constantly dodging obstacles and we wanted to create a game out of that idea.

What it does

This game was inspired by Subway Surfers. Our squirrel moves forward across Mckeldin Mall automatically as well as side to side with a press of the A and D keys. The goal of this game is to get points by collecting Carbies (bread) while avoiding abandoned scooters and spikeball players to reach Testudo.

How we built it

We built it in Glitch using Javascript with the help of HTML and CSS.

Challenges we ran into

The key presses do not work so the squirrels can't move from side to side.

Accomplishments that we're proud of

Creating a semi-working game seeing as we are both beginners with limited coding experience. As well as the cute images.

What we learned

We learned that you can run into errors unexpectedly as well as roadblocks when figuring out how to create a certain feature. Also, we learned that the internet is a good resource for figuring out the problems we have as we code.

What's next for Squirrel Quest

We're going to get the side-to-side keys working. We would also like to display statistics like high score and add sound.
",https://internal-shorthaired-parrotfish.glitch.me/,,"Best Gamification Hack - Bitcamp, Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp","javascript, html, css, glitch",,University of Maryland - College Park,1,""
UMD Food Planner,https://bitcamp2022.devpost.com/submissions/320965-umd-food-planner,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:38:59,"Inspiration

We like to work out and lift, and nutrition is very important for building muscle. However, UMD’s dining services do not have an obvious way where students can track their nutrition information. Instead, you have to go onto a site that takes multiple steps to actually get to the nutrition information, so we created a solution. 

What it does

Our hack allows students to conveniently look up the nutrition information of umd dining items and plan out their daily meals accordingly, all from your phone.

How we built it

We used python and selenium to build a web scraper for UMD’s daily menu nutrition information to feed to the app. For the actual app, we used flutter, which is an open source development tool created by Google that creates multi-device compatible apps. 

Challenges we ran into

Xcode took 4 hours to download and app development was very difficult because none of us had prior development experience. 

Accomplishments that we're proud of

Our project works decently well. The main pages are all navigable. The webscraper is able to scrape all of the diners and all the meals.

What we learned

App development is much harder than it seems

What's next for UMD Food Planner

We plan to eventually update the UI to be more intuitive and aesthetic, especially on the selection page and the results page. If coronavirus comes back for another wave, we can expand the app to include orders for takeout. 
",https://github.com/aaronl1661/UMDFoodTracker,https://youtube.com/shorts/BZonCYHN74A?feature=share,"Best Use of Data in an Application - Two Six Technologies, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp","python, flutter, selenium, pandas, csv, xcode",,University of Maryland - College Park,2,""
The Den of Testudo,https://bitcamp2022.devpost.com/submissions/320969-the-den-of-testudo,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:40:41,"Stephen Nguyen was unable to join my team on devpost, but he was my teammate for this project!

Inspiration

Wanted to make a tribute to Testudo. 

What it does

You play as testudo and try to reach a 4.0 GPA. You increase your GPA by collecting little Bitcamp icons. Warning: This game is not easy. 

How we built it

We used a game engine called Godot.
We used the following website to design a lot of game. 
https://godottutorials.pro/how-to-make-games-godot/

Challenges we ran into

Started with zero knowledge on how to build a platformer game.

Accomplishments that we're proud of

Making a game that actually runs and is playable.

What we learned

How to find good resources when you're stuck coding.

What's next for The Den of Testudo

Multiple levels are soon to come.
",https://drive.google.com/drive/folders/18umWsIjfaucWUGiFx1HD9xv2PomRfLc9?usp=sharing,https://youtu.be/Co9b0-E3IMM,"Best Gamification Hack - Bitcamp, Best First Time Hack - Bitcamp",godot,,University of Maryland - College Park,0,No
Ocean Adventure,https://bitcamp2022.devpost.com/submissions/320970-ocean-adventure,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:42:44,"Elevator pitch

Have you ever pond-ered the unknown? Has your adventurous itch ever been unsatisfied, wondering about the porpoise of life? Whale, we’ve got you covered! Introducing Ocean Adventure—an interactive webpage to learn more about the ocean. Scroll around to your heart’s desire to meet some of the world’s most wonderful water life! You won’t want to miss this op-perch-tuna-ty!

Inspiration

For our first hackathon, we decided to create an educational website to teach users about the zones of the ocean and some of the aquatic life that inhabits those zones.

What it does

Ocean Adventure provides the user a unique, interactive experience to explore and navigate the three zones of the ocean, as well as certain species of animals that live there. By scrolling down after clicking start, users can navigate through the deep sea at their own pace and learn about the Surface Zone, Twilight Zone, and the Deep Ocean. Users are also placed in a first-person point of view as they can use their pointer as a flashlight to make the bubbles expand and become more apparent.

How we built it

We built the website using React for the front end and collaborated over Github.

Challenges we ran into

Since this was our first hackathon for the four of us, we had to learn how to effectively use Github and Git to collaborate together on Ocean Adventure. Despite having only one team member with some prior web development experience, our team was able to self teach ourselves and overcome this obstacle.  We also ran into challenges about how to make the website visually appealing, easy to use, and informative at the same time so we went for a clean and simple user interface.

Accomplishments that we're proud of

Our group is most proud of successfully creating our website as well as the experience we have gained from collaborating as a group through Github.  We truly have learned so much about designing a web page in the span of 36 hours.  We are also proud of the way we managed to add a lot of information without making the user interface too cluttered, crafting a minimalistic ocean adventure for our users.

What we learned

We came in with little knowledge about web development and Git, but over the course of the Hackathon, we learned a lot about React and how to collaborate over Github in general.

What's next for Ocean Adventure

In the future, we can add more animations, sea creatures, and locations around the world to explore the mysteries of the true final frontier - Earth's oceans!
","https://github.com/tonywu315/ocean-depths, https://tonywu315.github.io/ocean-depths/",,"Best Educational Hack - Bloomberg, Best ""Bitcamp"" Hack - Bitcamp, Best First Time Hack - Bitcamp","javascript, css, html, react",,"University of Maryland - University College, University of Maryland - College Park",3,No
Get Good Tech,https://bitcamp2022.devpost.com/submissions/320972-get-good-tech,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:44:34,"Inspiration

All of us have had to go through the tedious process of finding a good laptop -- looking at tons of review sites, comparing the dozens of specs that each laptop has to find the best one for our needs. We realized that there was a missing niche for an easy-to-use laptop recommendation system that ranks laptops based on objective measures combined with the users' subjective value assessment, allowing them to Get Good Tech.

What it does

It is a website that, when accessed, displays a minimal interface which gives the user the option to select a price range, as well as rank various laptop factors (e.g. performance, battery quality, etc.) as more or less important. Then we go through our laptop database and find the examples which best fit their criteria. 

How we built it

The data was collected via web scraping from e-tailers and other performance databases and synthesized using Python + Jupyter notebook. The app itself was written in Flask and hosted with Heroku.

Challenges we ran into

None of us had much experience with Flask, so it was a learning experience for all of us. Also, we didn't know the most effective way of getting data about the specs and performance of various laptops, so we spent a significant amount of time exploring multiple avenues for data collection and aggregation there.

Accomplishments that we're proud of

We managed to get a functional product out of it, despite our lack of experience.

What we learned

For one, web apps are hard (even seemingly trivial ones). For two, finding useful resources and APIs can make the difference between a failed hack and a successful one. 

What's next for Get Good Tech

In the future, we hope to expand the feature set as well as use formal API processes and diversify the set of accessed e-tailers.
","http://bitcamp-2022.herokuapp.com, http://getgood.tech",,"Best Use of Data in an Application - Two Six Technologies, Best Domain Name from Domain.com - MLH, Best First Time Hack - Bitcamp","python, flask, jupyter, html, css",,University of Maryland - College Park,2,""
Thirteen Heroes,https://bitcamp2022.devpost.com/submissions/320973-thirteen-heroes,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:46:50,"Inspiration

Inspiration for the making of Thirteen Heroes comes from my desire to show respect for our military using my profession, which is programming video games!

What it does

Users can walk around in a virtual memorial and pay respect to each soldier at their respective casket. The user will receive a poppy flower that they can place for every soldier they pay respect to. Poppy flowers are a symbol of remembrance for fallen U.S. soldiers and originated after World War 1.

How we built it

Thirteen Heroes was built using a game engine called Unreal Engine 4.

Challenges we ran into

The features weren't too challenging to code, but I'd say the most challenging was setting up the headstones and being able to see information about each soldier and view pictures of them.

Accomplishments that we're proud of

What we learned

What's next for Thirteen Heroes
","",https://youtu.be/5q_-APyvstE,"Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Open Source Hack - Bitcamp",unreal-engine,,University of Maryland - Baltimore County,0,Yes
Test Project 1,https://bitcamp2022.devpost.com/submissions/320974-test-project-1,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:46:54,"Inspiration

Bitcamp!!!

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Test Project 1
","",,"Best DIY Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp ",java,,University of Maryland - College Park,0,Hard to move hack: table 1!
kikudle.moe,https://bitcamp2022.devpost.com/submissions/320976-kikudle-moe,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 08:47:14,"Inspiration

Kikudle (based on the Japanese term ""ヒア"" meaning ""to hear"") is inspired from the trendy internet game Wordle! We wanted to create a fun and intuitive game for anime lovers to test their knowledge and compete with friends.

What it does

In Kikudle, players guess the daily anime based on bits and pieces of the opening theme song. After each guess, they're given hints based on their proximity to the answer, and can guess again right after. Subsequent guesses are easier since the duration of the opening theme is revealed incrementally. 

How we built it

We used Figma to create a quick prototype / mock-up, and developed the game using Next.js, React, HTML, CSS, JavaScript, and Node.js.

Challenges we ran into

The biggest challenge we ran into was making the game fun and fair for all players. We wanted to make sure that the process of guessing was challenging, but not too easy to the point that it wasn't fun. In order to do this, we had to give them certain hints after their guess. It was a challenge to figure out what stats or hints to reveal , but after much deliberation, we came up with a few categories that anime veterans and casuals alike could use to find the answer. 

Accomplishments that we're proud of

We are proud of how we achieved great playability and renewability of our project. We wanted to make sure the game was both fun for the first session, but also something that people would come back to and play daily, just like Wordle! Following the Wordle template, we were able to apply both of these aspects to our game. 

What we learned

We learned many things in the process of making this hack. We improved our web development skills and successfully implemented a searching system for the guessing aspect of the game. We were also able to implement a system of randomly selected opening theme songs so that it is able to be replayed.  

What's next for kikudle.moe

We will continue to expand and improve our product and perhaps expand on Wordle formula. 
","https://kikudle.moe, https://github.com/cf12/kikudle-moe/",https://www.youtube.com/watch?v=TKDb7HhzHBY,"Best ""Bitcamp"" Hack - Bitcamp, Best Domain Name from Domain.com - MLH, Best UI/UX - Bitcamp ","react, node.js, nextjs, html5, css, javascript, figma",,"Montgomery College, University of Maryland - College Park",2,Nope!
Class Finder,https://bitcamp2022.devpost.com/submissions/320995-class-finder,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:02:41,"University Life is all about socializing, having fun but most importantly studying towards your goals. Many students prefer to study on their own but find places like libraries already full.

So they would take the best alternate option, classrooms. But when it comes down to classrooms we don't know which class rooms are available, which classrooms are the closest and which ones have a bigger space. 

We Have the solution with Classroom Finder. Its a online Website that lets you find empty classes around the campus, for different time periods making it easier to find your comfort zones for your study needs. We have also implemented a chance to book a classroom of your choice through our web app as to reserve it depending on your needs. 

With this much functionality and support you would be easy to find a classroom for your studies. Even Clubs and societies can get in on this opportunity to reserve rooms for their activities. So come on down and check out our website. We welcome you to the classroom finder.
",https://github.com/Ramareigns/Website-Bitcam22.git,,"Best First Time Hack - Bitcamp, Best UI/UX - Bitcamp , Best Use of CockroachDB Serverless - Cockroach Labs","html5, css3",,"University of Maryland - College Park, None",3,""
Non Giraffable Tokens,https://bitcamp2022.devpost.com/submissions/321000-non-giraffable-tokens,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:07:22,"Inspiration

If you were to look at NFTs on popular NFT market place right now, all Collections follow one similar property, they all have a constant size. Almost all the popular NFT Collections right now are basically variations of the same concept on a canvas the same size. Realizing this, I've created an NFT Collections of Giraffes that are different by the length of their necks 

I say all Collections, but what i really mean is that I've never seen anyone use this method of creating individual NFTs

How we built it

Built mostly using image manipulation with the python package openCV

Challenges we ran into

Learning some of the openCV documentation was challenge. I've used it in the past, but I wasn't that familiar with the documentation. 

What we learned

Although I didn't use the majority of the functions from the openCV documentation, It definitely further my ability to use it. 

What's next for Non Giraffable Tokens

The only sensible thing to do now is to make more and longer giraffe NFTs
",https://opensea.io/collection/untitled-collection-285546874,,"Best ""Bitcamp"" Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp","python, opencv",,"",0,""
Test Project,https://bitcamp2022.devpost.com/submissions/321003-test-project,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:08:29,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

dwddwdwd

What we learned

What's next for wdwdw
",http://google.com,,Best Moonshot Hack - Bitcamp,dw,,"",0,""
Thocc ,https://bitcamp2022.devpost.com/submissions/321006-thocc,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:13:04,"Inspiration

We are big fans of mechanical keyboards and love to listen to mechanical keyboard ASMR videos on YouTube.

What it does

Thocc simulates the sound of multiple mechanical keyboards with different keyboard switches when you type on your computer.

How we built it

We coded it all in Java using Java Swing and NativeKeyListener in order to create a UI to select and switch different keyboard switch sounds and listen for when any key on the keyboard is pressed to simulate the sound. 

Challenges we ran into

We ran into challenges when importing and learning an external library from GitHub and how to work with audio in Java

Accomplishments that we're proud of

It Works!

What we learned

The ins and outs of java GUI elements

What's next for Thocc

MORE SWITCHES!!!
",https://drive.google.com/file/d/1-8ovfjN3IcjKJmWAAd7ihSOdgCpqCwRp/view?usp=sharing,https://youtu.be/4i6klg6vPV4,"Best ""Bitcamp"" Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX - Bitcamp , Best Social Good Hack - Bitcamp, Best DIY Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Open Source Hack - Bitcamp","java, nativekeylistener",,"Walter Johnson High School, hs",2,No
AutoDrift,https://bitcamp2022.devpost.com/submissions/321011-autodrift,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:18:27,"Inspiration

Drifting cars is cool. Control systems are also cool, so building a control system to drift a car is extra cool.

What it does

Uses Model Predictive Control to simulate and control a Porsche CS to drift on the F1 Hockenheim track.

How we built it

From Vdrift opensource software, isolated relevant car and environment data utilizing Replay function, calculated various measures and sampled inputs, set up a model predictive control system to determine next least costly action while prioritizing drift (constraints), rewired Vdrift AI agent to use our model's controls.

Challenges we ran into

Environment and car data were given in various units and formats that were inconvenient to work with. C++, in which Vdrift is written, does not have support for the necessary ML libraries so we had to pipe in Python.

Accomplishments that we're proud of

The car drifts.

What we learned

Look at the units. Start earlier.

What's next for AutoDrift
","https://github.com/rytse/autodrift, https://github.com/rytse/vdrift/tree/autodrift, https://docs.google.com/presentation/d/1Y2Mek60hs7TKecd8L2ifkODANoqRKj3RQF7fS3K1S48/edit#slide=id.p",,"Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Open Source Hack - Bitcamp, Best First Time Hack - Bitcamp","python, c++, torch, mpc, lqr, control",,University of Maryland - College Park,2,Nope!
DC Realestate Price Predictor,https://bitcamp2022.devpost.com/submissions/321016-dc-realestate-price-predictor,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:23:24,"Inspiration

We're broke college kids and want to know how much things cost before buying it.

What it does

Our website displays a Price Predictor based on data from the Costar dataset using machine learning.

How we built it

We used pandas library to parse through dataset and host the information using the streamlit library, which abstracts the front-end of our app.  In reading in data through a .csv file, we attempting to optimize performance by manually allocating the minimum required amount of bytes for each dtype column.  We also used ....

Challenges we ran into

First time collaborators and had to learn a lot about the group project, common libraries, and git functions.  (ie. lots of merge conflicts)

Accomplishments that we're proud of

We actually got a working website!  For a first time competing, we're happy.

What we learned

Come to the event with a plan and organization so that most of the preparation is done ahead of time so the 36 hours used can be spent on actually coding and making progress.

What's next for DC Realestate Price Predictor

We want to try to implement a map such as from Google maps to locate specific ones
",https://minhnhatnguyen2003.github.io/bitcampfinal/,,Best First Time Hack - Bitcamp,"python, streamlit, costar, github, pandas",,University of Maryland - College Park,3,No
SHPE Job/Opportunity Board,"",Draft,Pending,Project overview,04/10/2022 09:27:22,"","",,"","",,University of Maryland - College Park,0,""
Data base for houses for sale ,https://bitcamp2022.devpost.com/submissions/321022-data-base-for-houses-for-sale,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:27:28,"Inspiration

Saw the huge amount of data provided by Costar group and use CockroachDB data base to hold all the data 

What it does

Currently Using SQL I can filter all information in the Database thanks to cockroach labs

How we built it

I build a plain webiste that displays the table and then use SQL in command line to acquire desire data 

Challenges we ran into

Learning react. I was trying to build something better but ran into some issues learning a new Programing language 

Accomplishments that we're proud of

I'm proud of importing a massive data set into a database and having a filter with SQL

What we learned

I learn new SQL commands and the SQL language 

What's next for Data base for houses for sale

I would improve more visually finally finish the react project I had in mind for it instead of a simple website 
","",,"Best Use of CockroachDB Serverless - Cockroach Labs, Best Use of Real Estate Data - CoStar Group, Best Use of Data in an Application - Two Six Technologies","sql, cockroachdb, html5, css3",,University of Maryland - College Park,0,""
Re;byte,https://bitcamp2022.devpost.com/submissions/321026-re-byte,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:28:35,"Inspiration

Re:Zero served as our inspiration

What it does

Our program was supposed to represent the life of the main character Re:Zero. The character is supposed to complete a certain number of tasks within 8 seconds. If they fail, the character is restarted to the beginning screen 

How we built it

Using Unity

Challenges we ran into

Code wasn't working 

Accomplishments that we're proud of

nothing in particular really

What we learned

I coded on Unity for the first time

What's next for Re;byte

More tasks, Timers, and Power-ups
","",,"","c#, unity",,Baltimore Polytechnoc Institute ,0,""
Project Lamda 3D Scanner,"",Draft,Pending,Project overview,04/10/2022 09:36:19,"","",,"","",,University of Maryland - College Park,0,""
The Vending Machine,https://bitcamp2022.devpost.com/submissions/321037-the-vending-machine,Submitted (Gallery/Visible),Pending,Submit,04/10/2022 09:37:50,"Inspiration

I was trying to do something simple

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for The Vending Machine
","",,"",repl,,Baltimore Polytechnic Institute,0,No
