Project Title,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Opt-In Prizes,Built With,Submitter First Name,Submitter Last Name,Submitter Email,Notes,Will You Be Present To Demo In Person On Sunday? (You Should Only Select No If You Cannot Make It In Person Due To Religious Obligations Related To Easter Sunday),List All Of The Universities Or Schools  That Your Team Members Currently Attend.,List All Of The Domain Names Your Team Has Registered With Domain.Com During This Hackathon.,"Share Feedback About Any Of The Technology You Interacted With At This Hackathon. Make Sure You Mention What Tech You're Reviewing (E.G. Twilio, Git Hub, De So, Etc.).",Tell Us About Your Technology Experience This Weekend.,Capital One Is Looking To Reach Out To Teams With Outstanding Projects To Potentially Highlight Their Work.,Team Colleges/Universities,Additional Team Member Count,Team Member 1 First Name,Team Member 1 Last Name,Team Member 1 Email,...
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:38:34,"","",,"","",Anish,Babu,ababu12@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,3,Roshini,Saravanan,rsaravan@terpmail.umd.edu,Karthick,Sankar,ksankar1@terpmail.umd.edu,Aarti,Itikirala,aitikira@terpmail.umd.edu
Brisbane: Discover Your Data,https://bitcamp2023.devpost.com/submissions/403163-brisbane-discover-your-data,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 19:49:17,"Inspiration

Currently, LLMs like ChatGPT seem to answer almost anything with great accuracy. However, what if you were working on a large project, and wanted help with something? What if you wanted to better understand a large amount of financial data in a more structured way?
Thus, we were inspired to create a more smart way to harness the full power of LLMs for more specialized tasks

What it does

Brisbane is a desktop application that allows users to upload a variety of things, including text files, Word documents, PowerPoint slides, PDFs, and code repositories of any programming language. After uploading repositories, users can chat with our improved AI and learn things about their files. For example, one could ask about a certain method that is written in a large code base. Or patterns in a large amount of Form 10-K financial data. After a query, the AI will not only answer but give sources that users can click on to instantly access.

How we built it

We first vector embeddings of entire directories, which are stored in a database. These embeddings can be fed to LLMs, such as OpenAI's GPT-3.5, to teach them to better understand information from these files. Smart use of prompt engineering also allowed us to teach GPT to keep track of what file and even page it was extracting information from when answering. This solves another huge problem of current GPT interfaces: it can be hard to validate and contextualize the answers it gives.

We built the front end for our desktop application using Electron. We created a Rest API in Python using Flask and used it to serve outputs from our language processing modules. The use of these technologies allows us to easily incorporate sharing and user collaboration in the future.

Challenges we ran into

As a group of first and second-year students, this was our first time working with each other on a project from start to end. None of us had significant experience building desktop applications or designing effective user interfaces. This project involved a lot of hours googling to learn more about vector embeddings, implementing APIs, frontend development, and more. Though it was tough, we found satisfaction in tackling small goals and eventually ended up with an application we are all proud of and plan to continue to use and develop more even after Bitcamp.

Accomplishments that we're proud of

We were able to create embeddings for a variety of different file types and platforms, more than we initially thought during the planning stage. In addition, the use of prompt engineering to better teach the model allowed us to shape its output and utility even more.

What we learned

We have collectively learned a lot through this hackathon. By attending workshops, we learned a lot about research opportunities, machine learning, and more. Through intensive googling, we have learned a lot about front-end development, natural language processing, and desktop application development. Above all, we learned that AI is incredibly capable, and it is possible to shape it for a plethora of applications.

What's next for Brisbane: Discover Your Data

We want to distribute this technology as a desktop app to allow others to use it.
Also, we hope to implement collaboration and integration with Google Drive or OneDrive. This will allow Brisbane to be used by small organizations and companies to keep track of their file systems.

Applications

Advanced file search with citations has several notable applications: 

Finance

Lots of financial applications require implicit or conventional knowledge - Brisbane can access large amounts of conventional or market knowledge and cross-apply them to help users figure out what new social, political, and financial events have happened, or how those events might affect markets.
Also, since finance applications require transparency, Brisbane’s ability to cite where it got its knowledge will increase the number of ways in which it can be used.

Real Estate

Brisbane can analyze housing markets or even particular properties to find useful trends in housing and real estate for individual buyers. Giving Brisbane access to public national data reports lets it provide even more informed advice to users, and turns it into an industry tool to produce housing/real estate market data.

Code Bases

Code Navigation: Brisbane can help developers navigate complex codebases by providing semantic search capabilities, making it easier to locate specific functions, classes, or variables. It could be a fantastic pair programmer, with deep useful knowledge of how the codebase is structured.
",https://github.com/magikarp01/BrisbaneGPT,,"CoStar Group - Best Use of Real Estate Data, Capital One - Best Financial Hack, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, People's Choice Hack - Bitcamp","python, electron, javascript, flask, openai, gpt, chatgpt",Rishi,Pradeep,keshav.r.pradeep@gmail.com,,Yes,"University of Maryland, College Park","","",We had so much fun resolving git conflicts.,Yes,University of Maryland - College Park,3,Neel,Jay,neeljay03@gmail.com,Phillip,Guo,philliphguo@gmail.com,Aaquib,Syed,aaquibahm@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:54:05,"","",,"","",Neel,Jay,neeljay03@gmail.com,,"","","","","","","",0
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:59:53,"","",,"","",Ven,Gostar,gostarfr@gmail.com,,"","","","","","",University of Maryland - College Park,0
Savings app,https://bitcamp2023.devpost.com/submissions/403166-savings-app,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 20:02:32,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Savings app

People are often confused about how much money they should save depending on their finances, expenses, and what they are saving money for. This app will solve that problem by using an algorithm to decide how much money they should save based on those parameters
",https://github.com/Mikebrown4768/bitcampProjectsavingsapp,,"Capital One - Best Financial Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp",react,Michael,Brown,mbrown66@terpmail.umd.edu,,Yes,University of maryland,"","",We loved the experience. This is our first hackathon,Yes,University of Maryland - College Park,1,Ven,Gostar,gostarfr@gmail.com
Housing Price Map,https://bitcamp2023.devpost.com/submissions/403169-housing-price-map,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 20:11:05,"Inspiration

We wanted to tackle the CoStar Group Real Estate Data challenge, because we felt that through studying housing market data, we could potentially build a powerfully socially impactful app at Bitcamp.

What it does

Our app's CockroachDB instance holds around 20000 instances of housing data from the state of California. We've built a web interface for our users to query the average cost of a house within an specific location. The app intuitively visualizes the user's query parameters in real time through the use of map overlays, and heat maps.

How we built it

We wanted to leverage the most exciting technologies being provided to us at BitCamp, so naturally we gravitated towards a Next.js and CockroachDB stack hosted on Microsoft Azure. 
Much of our time at BitCamp was spent on making our CI/CD process as smooth as possible. Once we had built our Azure DevOps pipeline, we focused on implementing the core functionality of our app in an pseudo-Agile environment. Near the end of Bitcamp, as we become more satisfied with our app's functionality, we began to polish the UI/UX of our web app.

Challenges we ran into

We had much to learn about DevOps with Azure. The majority of our time was spent reading documentation to build our CI/CD pipeline. 
We also had trouble with the specifics of implementing our REST API. And finally, we had to all brush up on our PostgreSQL to create the appropriate queries for our CockroachDB instance.
However, I think our greatest challenges were also the most memorable aspects of Bitcamp. Especially after we'd solved them,

Accomplishments that we're proud of

We successfully delivered our MVP without too many hitches, and with much time to spare.

What we learned

We took a deep dive into Microsoft Cloud, and came out much more well-versed in DevOps. We also learned the power of Next.js as a Front-end framework, especially in its ability to facilitate API calls and routing.

What's next for Housing Price Map

The Housing Price Map project has much potential. Chiefly, with better datasets, more overlays can be generated. Additionally, we really wanted to implement a machine learning algorithm into our project (XGBoost), but a lack of labeled data had stopped us in our tracks.

Much improvement can be made in our app's UX. Although we overall are happy with our delivered product's features, we feel that our app would benefit from a long term development cycle.
","https://bitcamp-app.azurewebsites.net/, https://github.com/johnma02/bitcamp-housing",,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, CoStar Group - Best Use of Real Estate Data, Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp","typescript, next.js, cockroachdb, azure, github, google-maps, react-bootstrap",Jan,Ahmed,janahmed@udel.edu,,Yes,University of Delaware,"","",wifi slow,Yes,University of Delaware,3,Sanjay,Siddharth,sanjaysiddharthcv@gmail.com,Makayla,Pham,makpham@udel.edu,Jonathan,Ma,ma.jonathan02@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 20:11:57,"","",,"","",Cameron M.C.,Thacker,cthacker@udel.edu,,"","","","","","",University of Delaware,0
untitled,"",Draft,Pending,Project overview,04/07/2023 20:22:15,"","",,"","",david-umd,Diaz,david0@umd.edu,,"","","","","","",University of Maryland - College Park,0
MusePay,"",Draft,Pending,Project overview,04/07/2023 20:33:51,"

MusePay: Simple and secure spending and lending within social groups and families.

A social hub for friends and family to monitor finance, a simple and secure platform for lending and spending, and a non-destructive companion to one’s buying experience. Spending other people's money has never been easier and more secure.

How it Works

Sending Muse Hashes


Create an account on our platform
Connect your bank/debit card as a funding source
Begin sharing Muse Hashes! Set merchant locks (or not) and spending limits, and have a unique hash generated (keep it a secret between you and your friend!) that acts as a key to a MusePay Virtual Credit Card.



Using Muse Hashes


Install our Google Chrome Extension
Copy your hash to your clipboard
When you are ready to pay, simply right-click, and press Pay With Muse Hash.
 


Inspiration

Driven by the want to create a finance-related project from our collective interest in fintech, the idea came about while musing over (get it) the technologies we know how to use and ones that we want to learn and would be cool to use. 

Tech Stack & Development Process


We began brainstorming ideas and creating diagrams using Figma. Using Figma's FigJam application, we were able to collaborate and quickly see each other's ideas and bounce them off of each other.





Once we came up with an idea, FigJam was again our software of choice to create a general flowchart and list of technologies we needed to use and connect together.

We then used Figma to design our UI and the components that we wanted to be made.

The frontend was built entirely off of React, CSS, and Bootstrap, written with Typescript. 
Our user login/authentication system is powered by Google's Firebase platform.
We stored our users' data using SQL on CockroachDB Serverless. Their platform was very easy for us to learn to use (as complete SQL novices) and it was quick for us to deploy and utilize, as well as debug. The performance of the database also fit our needs well.

Our application's server-side backend was driven by NodeJS.
We chose Express as our API framework of choice because of our general familiarity and its simplicity, as well as decent performance.
Deciding on what financial platforms we would build our project on was a big challenge. We considered many different options, each with its own benefits. Some platforms, such as Plaid, provided a simple and convenient way to get a user's banking data, but it didn't have options for things such as virtual credit cards. We decided instead to opt for Synapse. Synapse had a lot of benefits that was perfect for our use case and our possible future use cases: Virtual Cards, Credit/Loans, Banking solutions, and Crypto solutions. We currently only use Synapse for its VCCs and banking solutions, but in the future we plan on using it for credit and loans, as well as cryptocurrency.
The final part of our project is the Chrome extension, which builds upon the Chrome Web API to provide features that are less intrusive but still powerful.



Features


Create merchant locked and spend restricted codes that are tied to individual virtual credit cards
Link your bank account/debit card as a funding source
Create a private group with your friends and family to more easily share hashes and share spending
See all your spending in easy to understand visualizations
Spend hashes in 2 clicks with the Chrome Extension


Challenges we ran into

Bitcamp was an incredible experience for our team and for some of us our first-ever in-person hackathon. We had to deal with fatigue from working for so long, surviving on only a couple hours (or less) of sleep. In terms of the development process, it was very rough. When creating our authentication/login system, we used the Auth0 service first, but we ran into issues with cross-domain sessions and managing a react app and API on a single Heroku instance. This led to us creating an authorization system on Firebase instead.

When working with Syanpse, we ran into issues with their sandbox environment, documentation that was not as detailed as it needed to be, and an API wrapper library that only covered half of the API. We had to figure out RSA PKCS1 encryption for credit card information and to pull the API requests from a Postman collection that they had, but even in that collection some of the requests were not usable directly and required a lot of debugging. 

Another challenge we faced was CORS, or cross-origin resource sharing. Most of the time, you can only access APIs and other web resources from the same domain as the request origin, but because we had to deploy our API separately from our main web application, we had to figure out how to allow CORS to these other domains. 

The overall most challenging part was figuring out how to structure and connect all parts of our multi-faceted application together and keep it all organized. We had to create data structures for our databases and create class structures that would be most efficient and organized. Classes like our Database manager and Synapse manager were very complex with a ton of challenges faced in during their creation, but when we were able to get it all integrated properly, everything fell together perfectly.

What we learned

Nobody in our team has used SQL before, let alone a SQL database provider like CockroachDB before. We were able to fully learn how to use and deploy it very quickly, and now feel confident in utilizing this technology in all of our future projects.

What's next for MusePay

Credit and Cryptocurrency are two big services that Synapse offers that we want to take advantage of. With their Credit Hub we would be able to create Pay in Installments Muses, Subscription Muses, Muses that can build credit, and Cryptocurrency based Muses.

View our FigJam Document Here

View our Figma Document Here
",https://github.com/matthewnanas/bitcamp22,,"","react, javascript, node.js, typescript, firebase, cockroach, sql, bootstrap, chrome, synapse, figma, figjam, express.js",Andy,Guo,info@aguo.dev,,"","","","","","","Stanford University, poolesville high school",3,Matthew,Nanas,matt0.bananas4@gmail.com,Adam,L,ghostlyvisuals@gmail.com,James,Xu,james@jamesxu.dev
Shared Spaces,"",Draft,Pending,Additional info,04/07/2023 20:42:18,"Inspiration


We have always been fascinated by the world of real estate and investing, but like many others, lacked the resources and capital to pursue it. Real estate, in particular, has always intrigued us as it is a stable asset that typically appreciates over time. However, the high cost of entry has always been a challenge.




Fortunately, we realized that by pooling our resources, a group of like-minded individuals could combine our collective capital to invest in real estate. This approach not only allows us to take advantage of real estate's stability and appreciation potential but also helps us to diversify our investment portfolios.



As we began exploring this avenue further, we found that there were many opportunities available to us, including rental properties, commercial buildings, and even land development projects. Each opportunity had its own set of risks and rewards, but the potential benefits were clear.

In conclusion, while real estate may seem out of reach for many individuals, it is possible to invest in this asset class by pooling our resources. By doing so, we can take advantage of the stability and appreciation potential of real estate, while also diversifying our portfolios and potentially generating significant returns over time.

What it does

We are proud to announce that we have built a platform that enables individuals to invest in real estate together. Our platform provides users with the opportunity to pool their resources and invest in a range of properties that suit their investment preferences.



Our platform is unique in that it suggests groups of people properties that they can invest in based on the total amount of capital shared between the group and the amount of risk they are willing to take. This ensures that each group invests in properties that align with their investment objectives and risk profile.

To further assist groups in their investment decisions, our platform provides crucial data such as the return on investment for the property and its long-term value. This data allows groups to make informed decisions and maximize their investment potential.

All profits generated from these investments are split between the group based on the amount they initially invested. This ensures that each individual is rewarded fairly for their contribution and encourages collaboration and teamwork.

Moreover, our platform also allows users to be part of multiple investing groups at the same time, providing flexibility and further diversification of their investment portfolio.

In summary, our platform has made real estate investing more accessible and collaborative. By bringing people together and providing valuable data and tools, we aim to help our users achieve their investment objectives and generate significant returns over time.

How we built it

Our platform is built using a combination of powerful technologies that allow us to provide users with unparalleled functionality and features.



On the front end, we used Flutter, a popular open-source mobile application development framework, to build a highly interactive and intuitive user interface. Flutter allowed us to incorporate advanced features that would not have been possible using other frameworks.



On the backend, we used Python, a high-level programming language, to build our predicting and suggesting algorithm that is used to suggest properties to groups. Python allowed us to build a highly efficient and scalable algorithm that can analyze large datasets and provide accurate recommendations to users.

To enable user authentication and alert users of potential investment opportunities, we used the Twilio API. This allowed us to send SMS notifications to users and ensure that they never miss an investment opportunity.

For data storage and access, we used CockroachDB, a cloud-native, distributed SQL database. CockroachDB provided us with a highly scalable and reliable database solution that can handle large amounts of data.



Finally, we connected the front and back ends using Flask, a popular Python web framework, and Dart, a client-optimized programming language used to build applications for iOS, Android, and the web. This allowed us to build a seamless and highly responsive platform that users can access from any device. 

Challenges we ran into

Our journey in building the real estate investment platform was not without its challenges. We faced several obstacles throughout the development process, but we overcame them through perseverance and collaboration.



One of the biggest challenges we faced was connecting the front end and back end of our platform. Flutter is a package used for designing the user interface, while Python allows users to perform computational algorithms. Connecting the two was a daunting task that required a lot of time and effort.

Another significant challenge we faced was retrieving data from publicly available sources. Building an algorithm for data-scraping that can bypass a bot test was a new experience for us, and it took time to develop a robust solution.



We also faced a challenge in developing our suggested algorithm and building a formula to compute the price of a real estate property in 10 years. As beginners in the field, fully understanding the complex factors that go into these algorithms was a challenge.

Despite these challenges, we persisted and worked together to overcome them. By leveraging our technical skills and market knowledge, we were able to create a functional platform that meets the needs of our users.



Our experience in building the platform taught us that every project comes with its own set of challenges, and it's essential to remain adaptable and creative in finding solutions. By working collaboratively and leveraging each other's strengths, we were able to overcome these challenges and deliver a platform that we are proud of.

Accomplishments that we're proud of

We are thrilled to share the accomplishments that we are proud of while building our real estate investment platform.

One of our key achievements is successfully connecting the front end and back end of our platform. This allowed us to exchange data between the two and perform complex computations that form the basis of our platform. This connection also enabled us to retrieve data from our databases and display it on the app, providing users with up-to-date and accurate information.



Another achievement that we are proud of is developing an algorithm that predicts the price of a property. This algorithm utilizes a range of data points and metrics to provide users with accurate predictions of the value of a property. This feature is crucial in helping users make informed investment decisions.

Additionally, we developed an algorithm that suggests properties to groups based on their investment preferences and risk profile. This algorithm analyzes large datasets and provides users with a range of investment options that align with their investment objectives.



These accomplishments are a testament to the hard work and dedication of our team. By building a platform that utilizes cutting-edge technologies and advanced algorithms, we aim to provide users with a seamless and intuitive real estate investment experience that helps them achieve their investment goals.

What we learned

Our journey in building the real estate investment platform has been a tremendous learning experience for us. While we gained significant technical skills like connecting the front end and back end, we also learned a lot about the real estate market and what goes into understanding a good investment.

Through research and analysis, we now have a clearer understanding of how the real estate market works and what factors make a good investment. We learned that it's not just about the property itself, but also its location, market trends, and other economic factors that can impact its value over time.

Though we do not claim to be experts in the field, we are confident that we have built a platform that helps users get started in real estate investing. We have designed our platform to provide users with relevant data and insights, enabling them to make informed investment decisions.

Overall, our experience in building the platform has taught us that creating a successful product requires a balance of technical skills, market knowledge, and a deep understanding of users' needs. We will continue to learn, grow, and improve our platform to ensure that it meets the needs of our users and provides them with a seamless real estate investment experience.



What's Next for Shared Spaces

As we continue to develop Shared Spaces, our main focus is on improving our algorithms to ensure that they provide accurate and reliable results and suggestions. While our current algorithms work well, we understand that there is always room for improvement, and we plan to invest more time and effort into researching and refining them.

Another key priority for us is expanding our platform's reach beyond Washington, DC, to cover the entire United States and eventually the world. By widening our scope, we can provide more opportunities for real estate investment to a broader user base and help empower more people to make informed investment decisions.

Ultimately, our goal is to provide a user-friendly platform that supports users in making smart investment decisions while also offering expert guidance and advice. We believe that by continuing to invest in our platform and improving our algorithms, we can continue to meet the evolving needs of our users and provide them with a valuable tool for real estate investment.
","",,"Best Domain Name from Domain.com - Major League Hacking, CoStar Group - Best Use of Real Estate Data, Capital One - Best Financial Hack, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, People's Choice Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, flutter, dart, cockroachdb, twilio",Aryan,Agrawal,aryan527@terpmail.umd.edu,,Yes,University of Maryland (All team members),sharedspaces.tech,"","Capital One API - It was a very interesting API but I felt that the documentation was prepared hastily and some of the things were not explained clearly (for example, creating a new account for a user requires an account id in the request according to the body scheme but it doesn't work.)

Twilio - the Twilio API is very easy to use. It's just that it doesn't let me top up my balance using promo codes",Yes,University of Maryland - College Park,3,Rishabh,Chheda,rishabhchheda01@gmail.com,Aadesh,Kheria,kheriaaadesh@gmail.com,Agastya,Mukherjee,amukhs13@terpmail.umd.edu
Mortgage Knapsack Calculator,https://bitcamp2023.devpost.com/submissions/403181-mortgage-knapsack-calculator,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 21:08:54,"Inspiration

The knapsack algorithm is an intuitive solution to the query of which properties to choose.

What it does

It generates text files containing information on each loan an a given mortgage pool. 
The results are printed in this format: 
loan_id|upb|note_rate|borrower_fico|coborrower_fico|combined_fico|state|dti|ltv|maturity_date|loan_ter |property_type
Please inspect the outputted files using this guide

How we built it

We built this project in Java, using Replit to collaborate and Eclipse to edit.

Challenges we ran into

The hardest part of this challenge was managing the large data set we were given. We frequently ran out of available space on the heap and had runtime issues.

Accomplishments that we're proud of

Our code works as instructed by the Fannie Mae Challenge. Considering our group is freshmen computer science majors that are beginners, we are happy that we provided a concrete answer to the challenge.

What we learned

We learned about solving and implementing the knapsack algorithms; parsing, writing, and creating .txt files in java; utilizing RegEx expressions; managing large data sets.

What's next for Mortgage Knapsack Calculator

We would like to optimize our knapsack algorithm to be able to work on even larger data sets without running into any issues with memory management and runtime.
",https://drive.google.com/drive/folders/1Eb8EDx-rE6gkBjEU3PYAZ7b72KToklP8,https://youtu.be/er1I90R2coI,"CoStar Group - Best Use of Real Estate Data, Fannie Mae - Don’t Put All Your Eggs in One Basket","java, regexlib",Chetanya,Makkar,chetanyamakkar99@gmail.com,,No,University of Maryland,"",GitHub provided us the data for the Fannie Mae challenge. We appreciate the concise presentation it offered,We did not run into any technology problems with software or data provided by Bitcamp 2023.,Yes,University of Maryland - College Park,2,Sreenidhi,yaratha,yaratha@gmail.com,Charlie,Stevens,stevens1007031@gmail.com
namaka,https://bitcamp2023.devpost.com/submissions/403184-namaka,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 21:25:32,"namaka

Snapshot testing tool for Nix based on haumea
nix shell github:nix-community/namaka
namaka check # run checks
namaka review # review pending snapshots

Usage
Usage: namaka <COMMAND>

Commands:
  check   Wrapper around `nix flake check` to prepare snapshots for failed tests [aliases: c]
  review  Review pending snapshots and selectively accept or reject them [aliases: r]
  help    Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version

load

Type: { flake, dir?, ... } -> { ... }

Arguments:


flake : Path


Path to the Nix flake.


(optional) dir : String


Path to the testing directory relative to flake, defaults to tests.
  ${flake}/${dir} is passed to haumea.load's src option.

Wrapper around haumea.load to loads snapshot tests from a directory.
See tests for how the directory should be structured.
Ignore the _snapshots directory, as it is automatically generated by namaka.

The rest of the arguments are passed directory to haumea.load,
with the exception of src, which always gets overwritten (ignored).

Related Tools


Namaka is largely inspired by insta,
a snapshot testing tool for Rust.
Namaka is based on haumea, which also has some testing functionalities.

",https://github.com/nix-community/namaka,,"","rust, nix",Ziqi,Yang,figsoda@pm.me,,Yes,UMD,"","GitHub, crates.io, lib.rs, docs.rs","GitHub is a great site for hosting open source software, and docs.rs is good for viewing documentation of Rust libraries.",Yes,University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/07/2023 21:34:14,"","",,"","",Nathan,Nussbaumer,nussbau65@gmail.com,,"","","","","","",University of Maryland - College Park,3,Nhat,Nguyen,doristrungvuong@gmail.com,Akash,Patil,akashspxp@gmail.com,Kyle,Geary,kgeary1@terpmail.umd.edu
FitFlow,"",Draft,Pending,Project overview,04/07/2023 21:58:19,"","",,"","",Ansh,Tyagi,anshtyagi003@gmail.com,,"","","","","","",University of Maryland - College Park,3,ishaan,kalra,ishaankalra2004@gmail.com,Kabir,Grover,kgrover1@terpmail.umd.edu,Sohum,Belhe,sohumbel@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 22:09:02,"","",,"","",Sachin Kapoor,Saigal,ssaigal@umd.edu,,"","","","","","","",0
Untitled,"",Draft,Pending,Manage team,04/07/2023 22:30:43,"","",,"","",Kylie,Gong,kyliegong123@gmail.com,,"","","","","","",University of Maryland - College Park,3,Alstroemerys,,cutecocokitty@gmail.com,Waley-Wang,Wang,waley.wang.sun@gmail.com,Joanna,Zhao,jo.qzhao@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:17:38,"","",,"","",Tarun Krishna,Reddy,ktkreddy1999@gmail.com,,"","","","","","",University of Maryland - Baltimore County,0
guesser.ai,https://bitcamp2023.devpost.com/submissions/403206-guesser-ai,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 23:24:18,"Inspiration

The rise in OpenAI and Dalle-E 2

What it does

Assists in data training through a unique game app

How we built it

Swift and Python

What's next for guesser.ai

Coming to Android very soon!
",https://github.com/knightowl247/Bitcamp2023,,"Capital One - Best Financial Hack, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","swift, python, openai",Amy,Tran,amytran3406@gmail.com,,Yes,University of Maryland,"","",n/a,Yes,University of Maryland - College Park,1,William,Huang,huang.william6688@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:25:55,"","",,"","",Taha,Al Nufaili,talnufai@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
LUHQ,https://bitcamp2023.devpost.com/submissions/403210-luhq,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 23:36:20,"
","https://www.figma.com/file/GafEqgSmiwtXBTcvais5wW/LUHQ?node-id=0%3A1&t=3kwx5E6296C4Q9yy-1, https://github.com/IFireGamer/LUHQ",,"Capital One - Best Financial Hack, People's Choice Hack - Bitcamp, Best UI/UX Hack - Bitcamp","figma, react, typescript, tailwind, css3, python, fastapi, qiskit",Jaden,Hou,jadenhou19@gmail.com,,Yes,"University of Maryland, Poolesville High School",N/A,N/A,N/A,Yes,"poolesville high school, Poolesville Highschool",3,James,Xu,james@jamesxu.dev,Andy,Guo,info@aguo.dev,Miguel,Ventura,miguelventura1123@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:49:25,"","",,"","",Joshua,Nguyen,jnguye17@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:54:25,"","",,"","",Sourabh,Velaga,svelaga@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Shelfie,"",Draft,Pending,Additional info,04/08/2023 01:32:29,"Our Story 💭

The story of Shelfie began with a shared experience among us team members and our respective families. We had all faced issues with produce and products nearing or past their expiration dates in their home fridges, and sometimes encountered products like mayonnaise being way past their expiries. Thus, we set out to create a solution that would help users keep track of the expiration dates of items in their fridge and reduce food waste.

Challenges we faced 🤒

We faced several challenges during development. First and foremost, we all considered ourselves beginners, having only been proficient in Java. However, throughout the course of bit.camp, we learned some more high-level Python and React to accompany our web stack. Some other observable challenges included displaying the webcam feed on the website; integrating multiple APIs to allow for primitive image recognition; accurate, helpful recipe generation; and lastly, sleep.

But we overcame them 💅

Shelfie employs advanced image recognition techniques to accurately recognize produce and products with expiration dates. The reminder system, powered by CockroachDB, alerts users when a product is about to spoil or expire. The OpenAI-powered recipe recommendation system suggests recipes based on the ingredients in the fridge and the user's dietary preferences and needs.

What's next for Shelfie 🚀

Looking towards the future, we plan to continue improving and refining our product. By using higher-definition, more efficient image-processing techniques, we can more accurately read and analyze the barcode or product. Integrating GPT-4 or Hugging Face models will allow the software to suggest healthier alternatives to some of the products in the user's fridge. We also plan to integrate it with AI-speaking assistants for recipe retrieval.

Accomplishments that we're proud of 🤠

Learning about OpenCV, using tensorflow, CADing a demo
That we love UMD CS and the entire Bitcamp team!
",https://github.com/nicolasliuu/Shelfie/,,"Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","openai, opencv, tensorflow, next.js, prisma, cockroachdb, onshape, typescript, tailwindcss, nextauth.js, trpc, google-cloud",Nicolas,Liu,nicolasliu18@gmail.com,,Yes,Johns Hopkins University,"","CockroachDB is very intuitive to use. The workshop, hosted by Aydrian, was very helpful.","Seamless GitHub as always, and amazing experience with CockroachDB!",Yes,Johns Hopkins University,1,Jonathan,Liu,jjliu2004@hotmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 01:32:39,"","",,"","",Jordan,Marry,jmarry@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
UMD Course Tracker,https://bitcamp2023.devpost.com/submissions/403255-umd-course-tracker,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 02:32:57,"Inspiration:
Our inspiration for creating this app came from our own experience as freshmen struggling to navigate the complicated process of selecting courses. It can be overwhelming and confusing to figure out which classes to take and how to plan out your four years at UMD. We knew that we weren't the only ones feeling this way and we wanted to create a solution that could help our fellow students.

We put our heads together and used our innovative skills to design an app that simplifies the course selection process. With our app, students can easily see all the available courses and choose the ones that interest them. We wanted to create something that could save students time and stress, and make the whole process a little bit easier.

At the end of the day, our inspiration comes from wanting to help our fellow UMD students. We know how challenging the course selection process can be, and we believe that our app has the potential to make a real difference. By streamlining the process and providing a user-friendly platform, we hope to make it easier for students to plan their academic journey and make the most of their time at UMD.

What it does:
Users are presented a list of courses, which are nested under drop-downs that are labeled with which gen-eds the courses under the drop-down satisfy. Users can then add the gen-ed courses they’re interested in and see how many credits and which gen-ed requirements they’re working towards.

How we built it:
Our project was built using the umd.io API to retrieve comprehensive information about the classes required for our Gen-Ed program. After successfully accessing and parsing the data, we moved on to the crucial step of designing an intuitive and user-friendly interface that would allow us to select the courses we wanted to take, keep track of our progress, and view the credits we had fulfilled.

Using React, we were able to create a dynamic and responsive front-end that seamlessly integrated with our API data. We utilized various HTML and CSS elements to customize the appearance of our application, while ensuring that it remained accessible and easy to navigate for all users.

One of the key design features of our project was the division of the interface into three distinct sections. The first section was a comprehensive list of all the gen ed courses available to us, complete with details such as course descriptions, prerequisites, and scheduling information. The second section was a personalized list of the courses we had selected, which allowed us to keep track of our progress towards fulfilling our degree requirements. Finally, the third section was a visual representation of the credits we had completed, which provided us with a clear and concise overview of our academic standing.

Throughout the development process, we remained focused on creating a project that was both practical and aesthetically pleasing. We paid close attention to the user experience, conducting extensive testing and gathering feedback to ensure that our project met the needs of our target audience. By combining our technical skills with our design sensibilities, we were able to build a project that we are proud to showcase.

Challenges we ran into:
Working with new technologies and language components presented a significant challenge for us during the hackathon project. Learning how to integrate our HTML code into React components, and integrating an API into our application was a steep learning curve. One of the biggest challenges we faced was updating the Gen-Ed requirements as the user selected courses. 

Accomplishments that we're proud of:
Despite being new to these technologies, we are extremely proud of the accomplishments we achieved during the hackathon project. With our combined skills, we were able to create a user-friendly application that streamlines the course selection process for UMD students.

One of our greatest achievements was learning how to use an API to filter and manipulate data. This was a new skill for all of us, and we were thrilled to successfully incorporate it into our project. Additionally, we were able to leverage our previous experience with HTML and CSS to build a strong foundation for our project, and we expanded our knowledge by learning and implementing React.

The end result is a project that we're extremely proud of, and we hope it will be a valuable resource for our fellow UMD students for years to come.

What we learned:
We learned how to utilize React in order to simplify the complex functionality of a web application, and we learned how to connect that knowledge with using an API that consisted of comprehensive data on UMD courses. We then performed specific operations on this data to extract what we needed in order to display it on the site. Regarding the look of the site, we learned how to use different CSS properties so that the site would appear well-organized and clear to any viewers.

What's next for UMD Course Tracker:
In the future, we plan to create a search feature to build on the front end of UMD Course Tracker. This search feature will allow the user to find exactly which course they are looking for. We can also add additional details to the courses so that the user has an idea of what they can register for. Thinking longer term we can allow users to send feedback on the courses they take and we can utilize artificial intelligence to recommend courses that people should take. In addition, we believe we can further develop this application so it works for a multitude of majors and their courses.
",https://github.com/anshulg614/UMD-Course-Tracker,https://www.youtube.com/watch?v=t2vWTyHrLmA,"Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","html, javascript, react, css, visual-studio, umd.io, api",Rahul,Anantuni,anantuni.rahul@gmail.com,,No,University of Maryland,"","","We were all experiencing significant connectivity issues with the wifi network, which has been impacting our ability to work efficiently. Is there a way to improve the network's stability or explore other options for connectivity?",Yes,"University of Maryland - College Park, North Penn High School",3,Sam,Sanjith,samsanjith@gmail.com,Ritvik,Venkat,ritvik.venkat715@gmail.com,anshulg614,,aganumpally@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 04:43:17,"","",,"","",Aman,Talreja,atalreja@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Application Automata,https://bitcamp2023.devpost.com/submissions/403322-application-automata,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 10:53:37,"Inspiration

Are you tired of looking over the list of places/companies you've applied to and tired of searching thourugh each and every one every time you get an update? Don't you wish there was a more efficient way to store the information about all the applications you submitted and that you didn't have to log in to a different WorkDay page to check the status of each of your applications every once in a while just waiting for updates?

What it does

I'm trying to automate the process of checking for updates on submitted internship applications. My program asks users for the basic input that it needs (such as the links for the submitted applications) and then it checks for updates for each individual application and updates the dataset entered by the user to reflect changes and updates after parsing the data from the website. 

How we built it

I used HTML/CSS/JavaScript to build the main page of the appplication where all the data is entered and stored. I used Selenium (it's a software that automates browsers) to get to the webpage/webpages entered by the user and I used BeautifulSoup to extract text from the webpage. I integrated Twilio into my code so that the user gets an SMS update each time something (i.e., the status of an application) gets updated. I connected it all to my back-end Python script that runs the Selenium and Twilio code when required. 

Challenges we ran into

There isn't any way for me to change anything on the webpages of my submitted internship applications that I could use for testing or for the demo.
So I came up with a hardcoded solution. I created an HTML webpage that I can change for the purpose of the demo, but this simplifies the scraping/parsing process.

Accomplishments that we're proud of

I'm proud that I was able to integrate different kinds of software into my project.

What we learned

Learnt the basics of Selenium, Twilio and how to host my webpages on an Apache server.

What's next for ApplicationTracker

I want to expand it to parse actual applications becuase this is a software that I would use. I also want to improve efficiency for large datasets since my current project does not really handle that. I want to connect it to a SQL based software to store data. In the user_input_form page that I have, I want to modify it using a different language so that users can modify what information they want to store (just like in excel or google sheets, but there would still be some required fields for the functionality of my code).
",https://github.com/Arushitib/Bitcamp23-project,,"Most Creative Use of Twilio - Major League Hacking, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, html, css, javascript, selenium, twilio, apache",Arushi,Tibrewal,atibrew1@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","Twilio, GitHub","I had a lot of fun trying out different technologies, getting the integration to work was a little challenging since I'd never done it before and I dont have a team to help me out, but it all sort of worked out:)",Yes,University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 11:18:36,"","",,"","",Annie,Perdue,theflagandthearrow@gmail.com,,"","","","","","",Montgomery College,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 11:33:12,"","",,"","",James,Espericueta,espericueta2303@gmail.com,,"","","","","","","",0
Influencer HQ,"",Draft,Pending,Additional info,04/08/2023 11:48:42,"","",,"Most Creative Use of Twilio - Major League Hacking, Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","",Eddy,Koundjou Yem,ekoundjou@gmail.com,,Yes,"Bowie State University, Morgan State University, University of Maryland","","",We used...,Yes,"Bowie State University, University of Maryland - College Park",2,ekeneonoh456,,ekene.onoh123@gmail.com,Maurice,Barksdale,mbarksd3@terpmail.umd.edu
Purspective,"",Draft,Pending,Project overview,04/08/2023 13:15:13,"","",,"","",Inesh,Tickoo,inesh.tickoo@gmail.com,,"","","","","","","Florida Institute of Technology-Melbourne, Drexel University",3,Muntaser,Syed,jemsbhai@gmail.com,Hasan,Shameer Muhammed,hasanshameer@gmail.com,Anomitro,Paul,anomitropaul@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 13:31:37,"","",,"","",Amanuel,Seifu,aseifu@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Sorting Simulator,"",Draft,Pending,Project overview,04/08/2023 14:09:53,"","",,"","",Minsi,Hu,mimziwho@gmail.com,,"","","","","","","University of Maryland - University College, University of Maryland - College Park",1,Jonathan,Mei,jmei2657@terpmail.umd.edu
KarenAI,"",Draft,Pending,Project overview,04/08/2023 14:31:13,"","",,"","",Fady,Yanni,fady@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 15:01:30,"","",,"","",lotus5,Xie,zxie4696@gmail.com,,"","","","","","",University of Maryland - College Park,0
CoRide,https://bitcamp2023.devpost.com/submissions/403417-coride,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 15:50:04,"Inspiration

Bryan has to spend $200 just to take the Amtrak every time he wants to head home to Pennsylvania. We realized that Bryan is not the only student who goes home to that area. In fact, Bryan's mom even asked, ""Don't you guys have a bulletin board where you share stuff like this?""

We realized the need for a platform to connect students headed home, enabling them to share rides and save time and money while reducing their carbon footprint, we set out to create an innovative solution that brings people together for a greener, more social commute.

How We Built It

When users put down their info into our signup page, trycoride.com, that triggers our Zapier Zap, which binds our whole process together. The Zap enters that user's data into our Google Sheets database. Then, using Twilio, we text the user that just signed up to confirm their account creation. At the same time, we kickoff our first AWS Lambda, which searches through our Google Sheets database to find the best matching user who is also going to that destination. After that match has been computed, we use Twilio again to text the rider of that pairing and ask them to confirm. If they confirm, we use Twilio to send a text to the driver of that match. While these texts are being sent, we use our second AWS Lambda to monitor that the driver has confirmed. After both parties have confirmed, we reveal their names and phone numbers and send both parties a text over Twilio so that they can connect.

What it does

CoRide let's students sign up as riders or drivers. Riders are looking for a more economic, green, and social way to get home, and drivers are already headed home and are looking to help others get home just for the price of gas. When a user signs up, they are automatically notified whenever a user of the opposite type (rider/driver) is also headed near them, and they are continually notified as better matches come along. If both the rider and the driver agree to the match, we connect them and help them set up a CoRide. The beauty of CoRide is that once you submit where you're going, the app works in the background and you only interact with others over text, seamlessly integrating CoRide into your daily life.

Challenges we ran into

Last year, we overcomplicated our hack and spent too much time on aspects we couldn't even demo. This year, we went for simplicity and used no-code solutions like Zapier as much as we could. Our biggest challenges came from integrating all of our moving pieces together, and this required us to rethink our approach and switch from the Twilio SDK to the REST API, but we still glued our whole app together using just Zapier, Google Sheets, and AWS Lambdas.

What's next for CoRide

From discovery, we have learned that many potential users have safety concerns with regards to riding with people they haven't met before, so we plan on continuing our research in this area as well as adding accountability measures such as reviews.
",https://trycoride.com/,,"Most Creative Use of Twilio - Major League Hacking, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp","python, amazon-web-services, zapier, sheets",Abhinav,Modugula,abhimodugula@gmail.com,,Yes,UMD,ridealong.tech,"We used Twilio to send SMS updates to users and receive confirmations. It worked exceptionally well and was not difficult to set up. In addition, the Twilio Zapier integration was also excellent.","We used Twilio to send SMS updates to users and receive confirmations. It worked exceptionally well and was not difficult to set up. In addition, the Twilio Zapier integration was also excellent.",Yes,University of Maryland - College Park,3,Rohan,Uttamsingh,rohanuttamsingh@gmail.com,Peter,Geertsema,iwannapjg@gmail.com,Bryan,Houlton,brhoulton@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 15:53:14,"","",,"","",Edna,Adissu,ednadissu@gmail.com,,"","","","","","","",0
Explainable AI 4 Cancer w/ Quantum Transfer Learning? Yes!,"",Draft,Pending,Additional info,04/08/2023 15:54:44,"Inspiration

If there's one thing that our team has learned throughout our several bio informatics classes, it's that cancer is bad. (we have learned other things too but that's not important at the moment) Dealing with cancer is an arduous task from its diagnosis to actual treatment. Many groups and companies have sought to create machine learning models with the goal of checking if a given sample has a malignant tumor. For our group this sparked a certain question; Is quantum computing better than classical for cancer detection? We wanted to find out, hence, the creation of this project.

What it does

What we have is a pretty simple web app, one which allows any user to upload images. Our classification algorithm, which has already been trained on a binary classification cancer data set, will analyze the image and return if it's certain that it has detected a malignant tumor. Additionally the user can request the model to point out the areas in the picture which played the biggest parts in the classification.

How we built it

After getting our dataset from the National Cancer Imaging Database we first had to turn it into a comprehensible format for our quantum and classical models to process. Once the training is done we test to see which of the two models is more accurate, both being run through a Jupyter notebook, and use that one for further classifications. LIME allowed us to mark points on the picture which the algorithm factored in the most for its decision, which is what allowed us to implement AI explainability. We hosted a web app through Anvil, connecting it to the Jupyter notebook to allow users to upload photos and have them classified.

Challenges we ran into

Pre processing the data presented a challenge because it was originally in a structure that was not supported by the software we used. Setting up the server presented a bit of a challenge as we needed to set up a chain of host locations and virtual environments to get the whole thing running. 

Accomplishments that we're proud of

What we learned

We learned how to use tcia and PyVicon to actually access the medical data. We needed to request an actual quantum computer to run our models. Training the quantum model required us to do actual quantum computing, while the classical model took a bit more PyTorch to settle down. We also need to figure out how to mke web apps with Anvil, and how to connect them to external programs.

What's next for Explainable AI 4 Cancer w/ Quantum Transfer Learning? Yes!

We could use a variety of different models in order to complete transfer learning. Expanding the number of qubits our quantum model uses could present new results. Expanding our training dataset to include more types of cancer could improve the accessibility and use even further.
","",,"","pytorch, python, anvil, umiacs",Spencer,Chan,schan12@terpmail.umd.edu,,Yes,University of Maryland,"","",OK,No,University of Maryland - College Park,3,Adam,ℓ,ithinkiamadam@gmail.com,Shreya,Shete,syshete@gmail.com,Apechs-F,Pechenov,apechs@terpmail.umd.edu
Bitin',https://bitcamp2023.devpost.com/submissions/403420-bitin,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 15:57:07,"Inspiration

We have been fans of clicker idle games, and have often thought that giving it a programming flair could be fun.

What you can do with it

You purchase conditional statements, multipliers, and timers in order to create a ""program"" that counts up to a full 32 bits. Nothing exists passed 32 bits (Or does there...?).

How we built it

Landon used vanilla JavaScript to control the UI which is made up of HTML and CSS. Alan used JavaScript to create his backend code.

Challenges we ran into

Situating the different elements was very annoying and figuring out how to drag and drop blocks took a lot of trial and error before something we were proud of could be achieved. Also, deciding on how quickly the game should scale took some research.

Accomplishments that we're proud of

We think that the UI, although simple, is quite pleasing and does everything that we wanted it to do.

What we learned

Landon learned a lot about JavaScript events and how they interact with the CSS of certain elements. Alan learned a lot about game theory and the implementation of certain scaling functions in JavaScript.

What's next for Bitin'

More stages. Going even more ""beyond"" 32 could be fun!
","https://github.com/nobiduke/Bitin, https://nobiduke.github.io/Bitin/",https://youtu.be/jKK3WySGgG4,"","html, css, javascript",Landon,Jones,lmjones647@gmail.com,,No,UMBC,"","","Although we didn't end up using it in our hack, we enjoyed playing around with CockroachDB",Yes,University of Maryland - Baltimore County,1,Alan,Nguyen,alannguyen514@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 16:15:13,"","",,"","",Danny,Shi,dshi0322@terpmail.umd.edu,,"","","","","","","",0
temphouse,"",Draft,Pending,Additional info,04/08/2023 16:31:19,"Inspiration

We wanted to create an easier way to find and evaluate housing near the office. Instead of going in between sites for different pieces of information, temphouse is a one stop solution to find housing options pricing information, and plan commutes.

What it does

Users can select a company and office location and we show them open rental listings in the area. Users can select a listing and find details, as well as commute routes.

How we built it

For the front end, we are using nextJS with the mapbox API to present company locations and the map centered around the office.
For the back end, we are using Python Flask and a real estate API to pull open rental listings in the area.

Challenges we ran into

Scraping a large list of company locations, integrating the back end into the front end, and completing all tasks on time.

Accomplishments that we're proud of

Creating an app that we would want to use and is helpful for college students like us.

What we learned

How to use mapbox API and real estate APIs.

What's next for temphouse

Create an accounts feature to allow users to make accounts and match with other interns in the area for potential roommates.
","",,"CoStar Group - Best Use of Real Estate Data, Capital One - Best Financial Hack, People's Choice Hack - Bitcamp, Best UI/UX Hack - Bitcamp","nextjs, typescript, mapbox, python, flask",Kevin,Tang,kevintang738@gmail.com,,Yes,"University of Maryland, College Park","","",No interactions with sponsor technology.,Yes,"University of Maryland - College Park, University of Maryland - University College",2,Karthikeya,Kona,konakarthik12@gmail.com,Tyler,Kempton,tk90005@gmail.com
StockByte,"",Draft,Pending,Project details,04/08/2023 16:35:39,"Inspiration

For this hackathon, we wanted to focus on learning new tools to gain a new perspective

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for StockByte
","",,"","python, flask, praw, pandas, nltk, html/css, cockroackdb",Sachin,Naraparaju,snarap@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,2,Davayan,Sanyal,davayansa@gmail.com,Brian,Ding,bding08@gmail.com
IncidentExposed,https://bitcamp2023.devpost.com/submissions/403448-incidentexposed,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 16:54:53,"Inspiration

Typically, all University of Maryland students receive countless emails regarding UMPD incidents, such as robberies, suspicious activities, and indecent exposures. However, due to these countless emails, it is hard to keep track as to where every incident occurs. Also, it is impossible for every student to be aware of every incident that takes place because emails aren’t sent for every single event that takes place.

As a result, we wanted to create a web application which displays where these types of incidents happen, so that students can not only be aware but also avoid areas of potential danger.

What it does

It is a web app that webscrapes information from the University of Maryland Police Department’s Daily Crime and Incidents public data and plots it onto an interactive map with color-coded markers. 

Additionally, the app updates in real-time. So when UMPD adds new reports, the map updates in real time and adds those markers. 

How we built it

We built our project through multiple layers of code and documentation needed to make every part of the project work. We web scraped (using BeautifulSoup) through the UMPD listings of all incidents that have occurred over the last two months, and took this information and put this into a pandas dataframe. From there, we took the data frame and put markers by using the location of the incident and finding the longitudinal and latitudinal coordinates through the use of Google’s Geocoding API to plot the points and to clean up address formats. We used the descriptions from the incidents (like their types, addresses, and dispositions) that were inputted into the database to create a description.

Challenges we ran into

One of the main challenges in our project was that we first ran into environmental issues, which made it difficult to import Python libraries that we used, such as Pandas and Folium. As a result, pathetic as it was, we had to use Google Colaboratory in order to program part of our project before switching back to a better, permanent IDE: VScode. We also had issues with transferring a frontend markup from Figma to HTML and CSS. Besides that, there were just a lot of bugs with Folium’s map making, the web scraping, and the geocoding api, which caused some inconvenience at times.

Accomplishments that we're proud of

We are proud that we learned how to use multiple different python libraries like folium, request, csv, pandas, BeautifulSoup, IPython, date-time, and geopy in such a small amount of time. We are also proud of utilizing html pages with css styling in order to make a functional website and webpage, and are proud of making an interactive map.

We are also proud of the idea we chose, because it is a present and immediate concern for students like us at the university. Thinking of the idea is the hardest part, so once that was done, implementation was not too complicated to figure out.

What we learned

Although we learned how to use multiple libraries, the most important thing that we learned was how to delegate backend and frontend tasks between one another and combine projects and code with each other to be more productive and to use our strengths. It was enlightening to see how complex backend material can be added to html pages through just one line of code, after which styling becomes easy.

What's next for IncidentExposed

In the future, we plan to move towards other campuses and generate similar statistics to include the entirety of the nation. We also look forward to increasing speed and automation of updates to create alerts the moment an incident is reported. Lastly, we look to provide more information about the incident using analytical graphs and charts.
","https://github.com/DebarshiDey/IncidentExposed, https://docs.google.com/presentation/d/1jNwyuzS566i14Crf8X7Y56Jr8X8MI4I2Bhk7C-8hIKk/edit?usp=sharing",,"Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, html5, css3, folium, pandas, requests, geocoding, google-maps, beautiful-soup, csv, date-time, ipython, geopy",Yash,Sakharkar,yash.sakharkar0327@gmail.com,,Yes,"University of Maryland, College Park","","","Github Desktop: It was amazing for version control. It made it so easy to collaborate, fork, and merge branches locally in connection with the shared version online. 
Folium: Although the documentation was a bit cryptic, there were enough resources online to figure out how to use this very useful library to customize our embedded maps.",Yes,University of Maryland - College Park,3,Debarshi,Dey,ddey23@terpmail.umd.edu,Soham,C,sohamchaw@gmail.com,Ishan,Khillan,ikhillan@terpmail.umd.edu
eHealth,"",Draft,Pending,Project details,04/08/2023 16:59:34,"eHealth Information

eHealth has 4 main uses. The first one is a health assistant, which is the app's focus. It provides on-the-go medical information which you can access. The second part is a voice assistant, which was mainly added so that you can entirely rely on eHealth, instead of relying on other sources such as Siri or Google Home. The third is a virtual keyboard, where you can type using a window on your computer, by simply putting your index and middle finger together in front of a webcam. The fourth is a virtual mouse, where you can move your cursor using a window on your computer. You can move your mouse using your pointer finger and click by moving your thumb out. Both the virtual keyboard and the virtual mouse work outside of the application. The health assistant uses an intents.json file to read data and then uses the module NLTK to stem the words inputted; then, the application utilizes a neural network and machine learning algorithms to convert your inputted string to a probability of it being a specific tag which is read in the intents.json file. If the probability is high enough, it returns an answer to your question. The voice assistant is almost the same, except it uses deep speech to understand what you are saying, and then converts it to a string. The virtual mouse and keyboard both use media pipe and OpenCV to scan the webcam for the indexes of your fingers (photo provided in the demo video), and, for the mouse, upscales the camera intake and uses the pointer finger's top index as the center of the cursor. To log in to eHealth, there is a facial recognition system using machine learning that is stored in an Encodings.p file which also stores data such as login attempts in Google Firebase. Overall, eHealth uses AI, machine learning, deep speech, and neural networks to function.

eHealth Inspirations

The prevalence of injury amongst disabled children is over four times as likely as that of a child without disabilities. Over half of the injuries dealt to disabled children occur at home, and around half of those injuries are caused by falling. These alarming statistics inspired me to create this app. AI technologies such as Siri don’t have readily available medical information; thus, it becomes incredibly hard to treat damages done at home, especially when the injury happens unexpectedly. 62% of adults with disabilities say that they own a computer, while 81% of adults without disabilities say that they own a computer. This gap comes from the fact that it is incredibly hard to use computers if you are disabled, even with the new technology to help aid this problem. I wanted to create this app so that disabled people can help treat their injuries faster and have an easier time navigating technology.

eHealth Challenges

Package control was by far the largest technical difficulty I faced when programming eHealth. To put it in perspective, specific module versions were incompatible with other modules, which would in turn destroy the code. Many of the modules I used had a plethora of issues in their newest release, and thus, the documentation and the skills I received from working with these modules were useless as I had to relearn another version of that module for the app to work. Modules such as PyAudio were not even possible to install on my system, and thus I had to find the original wheel file to install it. Overall, finding the right package versions, testing out my program and its runtime on these versions, and then implementing new code into these versions was a huge problem. Something would always break along the way until I found the perfect balance of package versions within my app.  
",https://github.com/Rishi-prog731/eHealth,https://www.youtube.com/watch?v=C-r2kR5ahTg,"","python, nltk, tensorflow, opencv, mediapipe",Rishi,Hariharaprasad,marczuccisameme@gmail.com,,"","","","","","",Louis D. Brandeis,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 17:26:22,"","",,"","",Burner,Account,elmalo8213@gmail.com,,"","","","","","",University of Maryland - College Park,0
LocalHealth,https://bitcamp2023.devpost.com/submissions/403475-localhealth,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 17:43:42,"Inspiration

Remembering and accessing medical records is a challenge for both patients and medical professionals in and around nursing home facilities. Despite our medical technology advancing at very rapid rates, some departments, like this one, are lagging behind due to unchanging ways in an ever changing world. Keeping records on paper of every resident is common practice in the nursing home world, which can make organization difficult and more time consuming . Having a simply designed, easily accessed medical file for keeping track of the appropriate times, dates and dosages of the patient's medication is a critical part of this line of work. 

What it does

A general understanding of each resident’s medical history is key to providing the appropriate care. LocalHealth would swiftly take care of this issue by providing easy to access, appropriate information, all of which can be easily pulled from a database with the scan of a chip implanted inside of the LocalHealth wristband. After scanning the wristband with the LocalHealth app, an easy to read, basic medical file for the appropriate resident appears on the caregivers smartphone. On their file we can read about their food allergies, medical conditions and most importantly, their schedule for intaking medication. When tapping on a specific date, the caregiver can see a list of medications that the patient might need to take, as well as having the ability to put a checkmark to indicate that they have administered the appropriate medication at the appropriate time. This makes it easy for the caregivers' coworkers to ensure that their residents are well taken care of.

How we built it

We started off by brainstorming bracelet concepts as well as app logos, using Onshape and Medibang Paint, respectively. The wristband tag CAD was exported as an .stl file and converted to .gcode so it could be 3D printed using Bitcamp’s printers. While the physical side of our project was being conceptualized and discussed, another part of our time started working on the app development, creating our app’s system paths and display using Flutter. We also researched relevant examples of the possible patient files that nurses might encounter while using LocalHealth the application
Wristband design features include a slit in the tag for the microchip, holes for a band to tie the tag to the patient’s wrist, and rounded edges to reduce chafing. The prototype band is made from tape folded over itself to increase durability. Our example patient, John Doe, has his name engraved onto the 3D printed tag. Due to the low volume of filament used to print these tags, production is fast and inexpensive.

Hardware

The app can be used on smartphones to scan the physical wristband that a patient wears. The wristband prototype was created with the CAD software Onshape and craft materials provided by Bitcamp.  

A finalized model of the LocalHealth wristband would include a microchip inside the tag sleeve and a more easily adjustable wrist strap, like that of a watch.

Software

App development was created sing flutter. We imbedded the platform view within flutter that integrates a QR scanner that works both with Android and iOS. App development was created sing flutter.

What we learned

-Figured out how to navigate Flutter
-Common medical conditions for the elderly and their respective treatments/medications
-How to put text on 3D printed CADs, change letter size and position
-Experimented with Arduino, Python, and sensors and learned some of the ways to connect them
","https://cad.onshape.com/documents/11be03ab94e8043e136d7edd/w/3206edda8a4f00f1af62f10f/e/56335c39fc4ea9cda4a18753, https://github.com/golu099/bitcamp2023.git",,"Capital One - Best Financial Hack, Bloomberg - Most Philanthropic Hack , Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp","flutter;, onshape;, medibang, paint, pro;, github;, firestore",Alejandro,Palacio,alpalacio01@gmail.com,,Yes,University of Maryland,"","","We were very excited to participate in this Bitcamp 2023 hackathon, we learnt a lot about Github, machine learning, as well as how to apply your coding knowledge into different sectors. Hopefully for next year we will have the experience to integrate more of this knowledge into our submission for the 2024 Bitcamp Hackathon.",Yes,"Montgomery College, University of Maryland - University College",1,golu099,Negrete,flavianegrete@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 18:17:23,"","",,"","",Brayden,Ngo,braydenngo2@gmail.com,,"","","","","","",University of Maryland - College Park,0
SpotCharts,https://bitcamp2023.devpost.com/submissions/403512-spotcharts,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 18:48:14,"Inspiration

The inspiration for SpotCharts came from my deep passion for music and my fascination with the power of data visualization. I was drawn to the idea of creating an application that could take a user's Spotify data and translate it into a unique and captivating visual experience. While the annual Spotify Wrapped is a great way to reflect on one's listening habits, I wanted to create something even more expressive and personal -- something that could tell a story about someone over time with something as simple as an image. And that's how I came up with SpotCharts.

What it does

SpotCharts is a web application that allows users to visualize their top 50 Spotify artists in a proportional bubble chart. Users can log in to their Spotify account, authorize the app to access their data, and then see their top artists represented as bubbles, sized based off of listening time (larger bubbles for artists with more listening time and vice-versa).

How I built it

I built SpotCharts using Python Flask for the back-end, D3.js (a javascript package that handles data visualization) and html/css for the front-end, and the Spotify API for data retrieval and user authenication. The python script authenticates the user using tokenization and writes their data into a dictionary, which is fetched by the javascript and used to create the bubble-chart display. There's also a loading screen.

Challenges we ran into


Sizing: I Initially wanted to size the bubbles based off listening time in hours/minutes, but couldn't find a good way to get that data since the Spotify API doesn't allow you to. Instead I sized them based off of their rank in the user's top 50 artists (which was based on the listening time for each artist).
User Login: The authentication process took a long time to figure out as I had never done a project like this before. I learned the whole process of recieving a user code and requesting a token, then using that token for the application to make it specific to a user.
Data Storage / Time: The process of storing the data into a dictionary and recieving it on the front-end side proved to take a while, around 5-10 seconds. I realized that this was not very optimal and tried to find workarounds. In the end, I added a simple loading screen during the processing stage to make it feel less time heavy.
D3.js: D3 is a huge library with tons of support for different visualizations. I found it a little overwhelming at first but was able to narrow my implementation down to the parts I wanted. Find the right animation proved to be a very long process.


Accomplishments that I'm proud of

I'm very proud of the way this project turned out, as it's exactly what I envisioned. I was satisfied with the bubble chart visual, and am glad I could figure out how to size the bubbles using a similar metric. I felt most accomplished after I was able to retrieve the artist images as svg's and actually display them in the chart, as well as when I created the ease-out flower animation. That was really cool.

What we learned

Through building SpotCharts, I learned how to work with the Spotify API, how to create an interactive data visualization using D3.js, and how to optimize data retrieval. I also learned how to implement a python back-end using flask and how it interacted with the javascript html css front-end using routes and requests on the server.  

What's next for SpotCharts

I intend to contact the Spotify Developer Team to obtain a commercial license for my software and extend its impact among Spotify users. In addition, I plan to introduce new features, such as a hover animation to display the bubble's artist name, rank, and top songs on users' playlists. I also aim to integrate a filter by genre feature and randomize the bubble chart sizing for a more personalized experience. Furthermore, I am interested in exploring monetization opportunities for SpotCharts through partnerships with music companies like Spotify, who could leverage the visualizations to engage their user-base.
","",https://youtu.be/BYjQPCmmnws,"Best Razzle Dazzle Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","d3.js, python, javascript, html, css, flask, spotifyapi, spotipy",Pranav,Bolla,bollapranav05@gmail.com,,Yes,University of Maryland,"","",I had a great time.,Yes,"",0
Rizzulator,"",Draft,Pending,Additional info,04/08/2023 19:22:16,"Inspiration

“Rizz” is one of the popular words and trends of the year. So we figured, why not make a game based around it? And while we’re at it, why don’t we make that game hilariously corny and funny. And thus, the Rizzulator was born. 

What it does and how we built it

This game is a single/local multiplayer game where players try to get the highest “Rizz” score they can. The way the program works is that before the game starts it asks the players a bunch of questions (Their name, who they’re trying to 'rizz up', and the pick-up lines they have to memorize). Then, players take turns going through a facial test and a pick-up line test to earn points.

Round 1: Facial recognition

The game tracks the user’s facial expressions using MoodMe, a Unity asset. Unfortunately, the free asset of MoodMe only accounts for Shocked, Sad, and Neutral facial expressions. While we didn’t do anything too advanced, we came up with a calculation for what determines a player’s rizz. The less neutral they look, the more rizz points, and the more sad they look, they lose rizz points. From experience when a person smiles, sometimes the Shocked expression rises. We hypothesize that it’s tracking a player’s mouth opening, and since the Happy expression doesn’t exist in this model, it replaces it with Shocked. Because of this, we made it so that Shocked increases a player’s score pretty well.

Round 2: Pick-up line

Beforehand, each player got to pick or create three pick-up-lines to memorize. The original plan was to use voice recognition so that the player repeats back the lines, then we compare what they said to their original pick-up-line and award them points based on how accurate they were. Of course, we’d include a time limit so they wouldn’t take all day. However, since Unity’s Dictation Recognizer wasn’t working properly (despite having the proper syntax for this sort of thing), we decided to improvise and instead of people saying the pick-up line, we’ll have them write it out and have an AI speak the pick-up line for them. Then we’ll grade what they typed out to the pick-up lines they selected and award them the proper “rizz points”.

At the end of round 2, a total score of each player’s rizz is shown

How we built it

We built this game using Unity software and assets including MoodMe. 

Challenges we ran into

A very big challenge we ran into very early on was getting the voice recognition to work and pick up our voices. We tried using Unity’s DictationRecognizer to pick up the user’s voice and convert it into text, but even though we used Unity’s documentation for it, allowed windows permissions, and tried using the mic through the headset we had and our PC, we couldn’t get it to work. Since the bitcamp mentors also couldn’t figure out why the DictationRecognizer wasn’t working, we resorted to their suggestion about using Google’s speech to text and have that in our Unity game. Unfortunately, there was an issue with that as well. Besides problem solving voice recognition, the other challenges of creating this was random errors in the debugger and trying to figure out how to calculate “rizz” in a fun way that would make people laugh.

Accomplishments that we're proud of

Including facial recognition in a coding project is a first time for this group. It was also an accomplishment making several people laugh with the idea of our game alone before explaining how the project would work.

What we learned

For voice recognition, Unity can be unreliable and next time we will make a back-up plan. 

What's next for Rizzulator

There are many funny and wacky ideas we could do to improve. Firstly, we could figure out a solution to voice recognition so we can do our original plan. Secondly, we can do better with facial recognition and make it so that when a player does something like biting their lip they get bonuses for “rizz”. We also thought about doing a full body recognition so that players can do a lot of body movement and be graded on it in Round 2, but due to a time crunch and voice recognition issues, it was quickly decided that that wasn’t going to make the cut.
","",,"Best Razzle Dazzle Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, moodme",Zavier,Howard,zhoward1@umbc.edu,,Yes,"University of Maryland Baltimore County, Montgomery College","","","Unity voice recognition was annoying to deal with, but we managed.",Yes,Montgomery College,2,Daniel,,44daniel.mz@gmail.com,Umar,Chaudhry,awesomeumar27@gmail.com
Techy Domain names,https://bitcamp2023.devpost.com/submissions/403525-techy-domain-names,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 19:31:22,"Our Domains

toms-totally-terrific.tech


Just Tom's totally terrific tech website :D


sk3.tech


Looks similar to the word ""sketch"", so maybe someone can sketch with some nice tech on this website...


niicomii.tech


N i i c o m i i. Sounds nice doesn't it? :)
Niicomii is currently a personal brand 
Domain will serve as a personal home page (portfolio, resume, etc)
Domain is currently being linked to a Replit website (records are currently propagating)
http://niicomii.tech/ (it might work!)

","",,Best Domain Name from Domain.com - Major League Hacking,"brainpower, domain.com",Tom-Dai,Dai,technopupper@gmail.com,,Yes,"University of Maryland, College Park","toms-totally-terrific.tech, sk3.tech, niicomii.tech","",none,No,University of Maryland - College Park,2,Hannah,Ham,hham1@terpmail.umd.edu,Jimmy,Garcia,netuser5525@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 20:01:11,"","",,"","",Parth,Bhodia,parthbhodia08@gmail.com,,"","","","","","","",0
G(PT)hosting,"",Draft,Pending,Project overview,04/08/2023 20:22:54,"","",,"","",Luke,Luo,lluo1@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,2,Chris,Antar,cantar@terpmail.umd.edu,Shilin,Huang,shilin40@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/08/2023 21:22:11,"","",,"","",Thomas,Li,thomasli1234567890@gmail.com,,"","","","","","","",0
TextAssess,https://bitcamp2023.devpost.com/submissions/403545-textassess,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 21:23:24,"Inspiration

The inspiration behind this project is to address the challenges faced by students and teachers when it comes to writing and grading written responses. By leveraging the power of NLP technology, the project aims to provide a faster and more efficient way to grade responses, while also helping students improve their writing skills.

What it does

This NLP architecture takes in user input of a prompt and a response. Then, using common Language models, the user's response to their prompt is rated on similarity to the context of the question (judging how 'well' the user answers the question). Then, using an alternative (generative) model, a ML-generated response is concocted. At this point, we have two possible outputs to the same prompt. Therefore, using language models, responses can be compared, and better sentences can be chosen at each stage (between the user's sentences and the computer generated sentence).

Models used are Google's BERT model and OpenAI's GPT-2, hosted on HuggingFace and fine-tuned with AWS SageMaker.

How we built it

To demonstrate how this model works, refer to the architectural diagram below. It incorporates our future plans in addition to what is currently implemented. At the moment, our output represents how well a user answered a prompt with the metric being a similarity score between their response and a generated response. We are using cosine similarity to accomplish this by passing embeddings of the responses into the scikit-learn cosine similarity function. Then, we are identifying which parts of the user's response are not good enough.

Challenges we ran into

We used tools and platforms such as AWS Sagemaker and Hugging Face for the first time. There was a lot of debugging and reading documentation involved but we were able to get a prototype working using these new tools as well as our previous expertise. 

Accomplishments that we're proud of

Submitting a working prototype with the ability to be improved and have a real impact. 

What we learned

Working with an end-to-end machine learning pipeline and utilizing cutting-edge technology to solve a prevalent issue.

What's next for TextAssess

Fully implement the ""improvements to response"" feature and create a user-facing product such as a website or app so students and teachers can easily access and benefit from all the features. 
",https://github.com/pranavdulepet/TextAssess/blob/main/README.md,https://youtu.be/t8jtQ6WOwts,"Best Razzle Dazzle Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, scikit-learn, hugging-face, amazon-web-services, sagemaker, jupyter-notebook, google-bert, gpt-2",pranavdulepet,Dulepet,ps.dulepet@gmail.com,,No,"University of Maryland, College Park","","The WiFi was dastardly, I had to leave the venue to work since I couldn't do anything there.",I loved interacting with the sponsors and it was very interesting learning about how they're implementing cutting-edge technology into real-world applications to streamline processes and improve the quality of their products for the users.,Yes,University of Maryland - College Park,1,MukundShankar-dev,Shankar,smukund23@gmail.com
PokemonQuiz,https://bitcamp2023.devpost.com/submissions/403547-pokemonquiz,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 21:41:06,"The project is called ""PokeRPS"", a website that tests your knowledge of Pokémon types and their weaknesses in a timed setting. The website is designed to be simple and easy to use, making it accessible to anyone who loves Pokémon.

When you visit the PokeRPS website, you will see a straightforward interface that allows you to start the quiz with just one click. Once you start the quiz, you will be presented with a 3 of multiple-choice questions that test your knowledge of Pokémon types and their respective weaknesses. You get 60 seconds and if you choose one wrong answer the game ends. And if you choose one correct answer you get a point and the round switches to a new pokemon and multiple options.

At the end of the quiz, you will receive a score that reflects your knowledge of Pokémon types and their weaknesses. Overall, PokeRPS is a fun and challenging way to test your knowledge of Pokémon types and their weaknesses. 
",https://github.com/KennyWu/PokemonExam,,"","python, javascript, html5, css, pokeapi",Kenny,Wu,wukenny0@gmail.com,,No,"university of maryland, college park","","","Vert nice, worked with python scrpts, reading,creating json files, javascipt, html, css, and using replit. used github to upload all code.",Yes,University of Maryland - College Park,3,Sai,Sreeramani,saisuhas2004@gmail.com,Nihar,Chegireddy,nihar.chegireddy@gmail.com,Arjun,Suresh,henryphillipsthethird@gmail.com
Speechify,https://bitcamp2023.devpost.com/submissions/403550-speechify,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:04:54,"Snap it, Read it, Live it!

Inspiration

Our team's inspiration for this project comes from our shared passion for accessibility. We believe that technology has the power to level the playing field for individuals with disabilities, and we wanted to use our skills to create something that could make a real difference. We recognized that dyslexic individuals often struggle with reading text from images, which can be a significant barrier to learning and information access. By leveraging the power of Flutter, we aim to design a beautiful and intuitive mobile app that can help dyslexic individuals read text from images more easily. In doing so, we hope to promote greater accessibility and inclusivity for all. This led to the birth of Speechify - an app that can make a real difference in the lives of dyslexic individuals.

What it does

Are you tired of struggling to read text from images? Do you have dyslexia or are visually impaired and find it challenging to access information? If so, we have the perfect solution for you - our revolutionary new app that reads text from images!

Our app is specifically designed to cater to the needs of people with dyslexia and visual impairments. It uses advanced technology to instantly recognize text from images and convert it into an easy-to-read format. 

But that's not all! Our app also has a text-to-speech feature, which reads the text aloud for visually impaired individuals. It's incredibly user-friendly and can be used to read all kinds of text, from books to handwritten notes.

So, whether you're dyslexic, visually impaired, or simply want a more accessible way to read text from images, our app has got you covered. Say goodbye to the frustration of struggling to read and hello to a new world of convenience and accessibility with our app!

How we built it

The development process of Speechify involved a variety of technologies and techniques. To create the frontend of the app, we utilized the Flutter framework, which allowed us to build a visually stunning and responsive UI. We implemented the backend in Python, which handled the processing of the image data through OpenCV and PyTesseract, and returned the extracted text via an HTTP GET request to the frontend.

We used Dart programming to link these two components, enabling smooth communication between the frontend and backend. Additionally, we incorporated Flutter's text-to-speech capabilities, allowing users to have the option of listening to the extracted text instead of reading it.

Each component of the app was styled with deep intricacy, taking into account both functionality and aesthetic appeal. The user interface was designed to be intuitive and easy to navigate, with a focus on accessibility and inclusivity. We also incorporated machine learning models from PyTesseract to improve the accuracy of the text extraction process. Pre-processing techniques using OpenCV were employed to make the image more usable by the machine learning model. The codebase was managed for our team using GitHub. 

Challenges we ran into

As with any project, our team faced a few challenges while developing our app that reads text from images. However, we were determined to overcome these obstacles and create a product that would truly make a difference in the lives of people with dyslexia and visual impairments.

One of the biggest challenges we faced while developing our app that reads text from images was getting the text-to-speech feature to work correctly. It was essential that the app read the text accurately and in a way that was easy for visually impaired individuals to understand. However, this proved to be a difficult task as there are many nuances to language that can be challenging for machines to accurately interpret and vocalize.

To make an accurate text recognition technology, it was essential that the app be able to accurately recognize and convert text from a wide range of sources, including books, signs, and even handwritten notes. We spent countless hours fine-tuning the technology to ensure that it could accurately recognize text under a variety of lighting and background conditions.

Despite these challenges, our team was able to overcome them through hard work, dedication, and collaboration. We are proud to have developed an app that truly makes a difference in the lives of people with dyslexia and visual impairments, and we look forward to continuing to improve and expand its capabilities in the future.

Accomplishments that we're proud of

One of the accomplishments that we are particularly proud of is how well we worked together as a team during the development process of Speechify. Despite the tight deadline of the hackathon, we were able to collaborate effectively, share ideas, and divide tasks efficiently to maximize our productivity.

Another accomplishment that we are proud of is our ability to learn and implement new technologies quickly. In less than two days, we were able to familiarize ourselves with technologies such as Flutter, Dart programming, OpenCV, PyTesseract, and HTTP requests. We were able to integrate these technologies seamlessly into the app and create a fully functional prototype that met our goals and exceeded our expectations.

What we learned

The hackathon provided us with an opportunity to learn Flutter and Flask for web development, work efficiently under pressure, and solve technical difficulties with Xcode. We learned the importance of teamwork, persistence, and creativity when facing challenges. The experience helped us develop our technical skills, particularly in OCR and text-to-speech. Overall, it was a valuable learning experience that we can apply to future projects.

What's next for Speechify

The next steps for Speechify are to focus on increasing accessibility for visually impaired and blind users. This will involve adding more auditory cues and voice commands to improve the user experience. Additionally, the app will use more powerful OCR and text-to-speech algorithms to enhance accuracy and speed. These improvements will enable Speechify to better serve its target market and expand its reach to more users.
",https://github.com/vaidya45/Bitcamp,https://www.youtube.com/shorts/grJKSSN2bPc,"Bloomberg - Most Philanthropic Hack , Best Social Good Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, dart, flutter, flask",hbalickgoodman,Balick Goodman,hbalickgoodman@gmail.com,,Yes,University of Maryland College Park,"","",Our team had a great experience using Flutter to develop Speechify - a dyslexia assistance app at the hackathon. The framework was easy to use and allowed us to build a functional app quickly.,Yes,University of Maryland - College Park,3,Arjun,Vaidya,vaidya@umd.edu,Raghav,Aggarwal,raghav4@terpmail.umd.edu,Rithwik,Bhardwaj,rithwikbhardwaj13@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 22:08:01,"","",,"","",Saumit,Kale,skale1@terpmail.umd.edu,,"","","","","","","",0
mooneh,"",Draft,Pending,Additional info,04/08/2023 22:14:01,"Inspiration

The inspiration for Mooneh comes from the pains of having to track personal expenses. Expense trackers such as SplitWise do a great job in helping you to track your expenses, with an intuitive interface and neat features that do the job. But why not do things better? Why not have fun and get rewarded for your efforts? Taking inspiration from forestapp.cc, we built Mooneh to make the mundane task of expenditure tracking something fun that you'd look forward to!

What it does

Mooneh rewards you for keying in your expenses in the form of MoonDust. Everytime you key in your expenses, you get a certain amount of MoonDust, which you can use to purchase Domes from the store to place in your MoonBase! Mooneh also comes with a dashboard that allows you to see all your expenses from the specified month so that you can keep track of your spending. 

How we built it

Using the React framework, our front-end was built using Tailwind CSS and Javascript. The 3D models you see on our app are made using Three.js and React Three Fiber. Our back-end was built with (ABRAM INSERT)

Challenges we ran into

We encountered some issues with moving files around in Git which resulted in not ideal integration between the front-end and back-end. As a result, we decided to restart the repository and imported our work over to the new repository in a structured manner. It worked!

Accomplishments that we're proud of

This idea itself is something we are very proud of! This is our first hackathon, so we came into it blind, with no ideas and no idea what to expect. But within the first 2 hours of the BitCamp, we were able to identify a mundane task (ie tracking expenses, which we personally encounter in our daily lives and find it a complete pain) and come up with a way to make it more fun and rewarding! 

What we learned

What's next for Mooneh

Our end goal is for Mooneh to be an application on the App Store and Google Play so that it is easily accessible. You can key in your expenses and grow your MoonBase on the go! With this in mind, a few of our next steps would be:


Designing and coding the mobile view for Mooneh
Adding user login and authentication
""Add friends"" utility and allow splitting of bills with friends
Filtering for the dashboard (allow to filter by category, different time periods, etc.)
Designing a larger variety of Domes to purchase with MoonDust!

",http://mooneh.tech,,"Best Domain Name from Domain.com - Major League Hacking, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","javascript, ruby, ruby-on-rails, react, google-cloud, google-cloud-run, three.js, tailwindcss, html",Abram,Tan,abramtjh@gmail.com,,Yes,"UC Berkeley, Singapore University of Technology and Design","mooneh.tech,","",hi,Yes,SUTD,1,Kay,Wee,tankaywee09@gmail.com
Steering a Hotdog,"",Draft,Pending,Project details,04/08/2023 22:18:16,"Inspiration

Mario Kart Wii's steering functionality inspired this project. Our group wanted to experiment with a hardware project, so we thought it would be fun to include this steering feature into our project.

What it does

It's a game that tests reaction time and coordination in a fun, retro style format.

How we built it

We attached an accelerometer and a button to an Arduino Uno R3. We also 3D printed a base for all of the parts as a remote controller for the player to use to steer. The game was built in Unity, but we use an arduino as a controller to orientate the player in the game.

Challenges we ran into

We needed to figure out how Arduinos worked and how wires worked on breadboards. We also did not know how to connect an Arduino to Unity, so we installed a Unity package as a solution.

Accomplishments that we're proud of

We learned how to use an Arduino and the basics of 3D printing by using software like Tinkercad and PrusaSlicer.

What we learned

We learned intermediate Unity topics through C# scripting and beginner level Arduino topics like using a breadboard.

What's next for Steering a Hotdog

We need to improve the UX and UI of the game so that it can be more engaging for the user. We will focus on finding color palettes online as well as looking for someone to draft new images. We also need to change the dimensions of the controller because it is too bulky by reducing the amount of material used. 
",https://github.com/Michaell14/Arduino-Controller-for-Hotdog-Unity-Game/tree/master,,"","arduino, unity",Michael,Li,limichael909@gmail.com,,"","","","","","","",1,Nick,Peng,dupopking@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 22:24:07,"","",,"","",Sidd,Jasti,siddjasti@gmail.com,,"","","","","","",University of Maryland - College Park,0
Tradeiverse,"",Draft,Pending,Project details,04/08/2023 22:24:30,"Inspiration

Looking at the prizes for this years Bitcamp hackathon, our group wondered: ""whats the best prize we can win?"" 

What it does

Tradeiverse is a fun and engaging virtual marketplace that lets users trade items with one another.  Whether you want to become the ultimate merchant, build a collection of exotic items, or shop and trade at ease, Tradeiverse can satisfy your needs. In the Tradeiverse marketplace you can buy anything from planets to luxury cars to 

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Tradeiverse
","https://github.com/foshesss/Tradeiverse-, https://tradeiverse.azurewebsites.net",,"","python, flask, azure, html5, css, javascript, sql, cockroachdb",Mederick,Grivel,m3grivel@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,1,lotus5,Xie,zxie4696@gmail.com
BitConnect,https://bitcamp2023.devpost.com/submissions/403560-bitconnect,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:34:25,"Inspiration

Our team was inspired to create this platform to address the difficulty that sponsors face when they try to connect with individuals who are interested on their contents but are not able to talk to them in person because of different circumstances. 

What it does

We have built a unique database that allows users and companies to register and create group or private chats, as well as conduct live video calls, whether in a group or 1v1 setting.

How we built it

We utilized Agora, a Real-Time Voice and Video Engagement platform, for the live video calling feature, and Ngrok, a free web hosting URL service, for hosting. Additionally, we used HTML, CSS, and JavaScript for video service. For the messenger feature, we used Firebase as a database and Chat Engine API for live-time messenger. The chat service was implemented using TypeScript, JSON, React, and HTML/CSS.

Challenges we ran into

Our team encountered several challenges in building BitConnect, but the biggest challenge were implementing the live video streaming and messenger features which both are not easy feature to build and arrange them together in one service without prior knowledge. 

Accomplishments that we're proud of

We are proud that we were able to overcome challenges and complete the project as we had intended from the start.

What we learned

We have learned various technologies, including those we had not previously used. We also gained valuable experience in setting goals, forming a team, and working towards a shared objective.

What's next for BitConnect

We plan to make BitConnect even more accessible and user-friendly, and add more features, such as more detailed user profiles. We may also explore the potential of this technology and service, and potentially start a startup related to this field.
",https://github.com/yeokim5/BitConnect,https://youtu.be/mt1h6SylJEU,"Best Razzle Dazzle Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","html5, css3, javascript, typescript, react, firebase",Yeomyung,Kim,yeokim5@terpmail.umd.edu,,Yes,"Orange Coast College, University of Maryland - College Park (current), Iowa State University, Arizona State University,","","GitHub, Firebase, ChatEngine, Agora.","We had a great time this weekend using different technologies to build our web app for online video chat and conversation. The front-end of our program was built using React TypeScript JavaScript, which allowed us to develop a dynamic and responsive user interface. We managed our version control and coding collaboration using GitHub. We used Firebase to safely and flexibly store our user data and login details. We integrated real-time chat capability using ChatEngine into our app, allowing us to send and receive messages, photos, emoticons, and other content. With the help of Agora, we were able to include video calling capabilities in our app, enabling us to have smooth video chats with other users. We loved investigating these technologies' capabilities and features and learned a lot from utilizing them. We value the chance to take part in this hackathon and are appreciative of the help the sponsors and organizers have given us.",Yes,University of Maryland - College Park,1,Akshit,Sanoria,akshitsanoria1995@gmail.com
Poker Flip App,https://bitcamp2023.devpost.com/submissions/403563-poker-flip-app,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:46:52,"Inspiration

We saw some people at the Xfinity Center playing flip poker. So we decided to make that but in a website.

What it does

Lets you play poker without betting.

How we built it

React

Challenges we ran into

Making the UI

Accomplishments that we're proud of

It works!

What we learned

React and CSS animations

What's next for Poker Flip App

Play online
",https://guanglinwei.github.io/Bitcamp2023/,https://youtu.be/BLpyKLn2sTg,Bloomberg Industry Group - Best Public Sector Hack,react,guanglinwei,Wei,guanglinwei@gmail.com,,No,UMD,"",GitHub,suffering,Yes,University of Maryland - College Park,3,IdleSicko,,sonicrules12@gmail.com,DavidLin29,,dlin12@terpmail.umd.edu,Hanish,Vadlamudi,hanishv15@gmail.com
InterviewIO,https://bitcamp2023.devpost.com/submissions/403567-interviewio,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:08:35,"InterviewIO

Saatvik Vadlapatla, Pranav Polasam, Steven Zhang, Adam Yang

Project

https://github.com/SaatvikV/InterviewIO

Inspiration

As four computer science students, we noticed a clear need for interview resources as there wasn't an efficient way to practice the skill of interviewing. Many students only have one shot at the perfect interview and it is vital they get all the experience they can to achieve their goals. Furthermore, many students get fairly nervous with interviews due to a lack of practice. We believe that having a resource like our project to practice talking out interviews and getting real feedback on answers would be immensely helpful to students and give them the interview prep they need.

What it does

Our project simulates a behavioral interview by asking questions that the user can answer. The model then takes the user's response into account and then asks relevant follow-up questions. The questions are voiced so that the user gets an authentic interview experience. Once the user decides to end the interview, they are directed to an interview history page to see logs of all previous interviews. Each log will contain the time the interview ended, each question and answer conducted during the interview, and feedback on the interview based on the user's answers. The user will also get a score for each response.
To run it locally, clone the github repository first. Then, use flask run in main/backend  and npm start in main after installing needed dependencies.

How we built it

The front end of the project was mainly on ReactJS and CSS. In order to simulate the interview, we set up an API endpoint to an instance of a  GPT-3 model. The backend was mainly developed utilizing Flask. We prompt-engineered the GPT-3 model to generate a suitable response which is then sent and parsed on the front end. In order to create the voice for the interview we mainly used ReactJS frameworks.

Challenges we ran into

We struggled quite a bit with configuring the API endpoints to utilize the user input and generate the response. We originally intended to send the audio file directly from the front end to the back end and handle the text transcription over there. However,
this turned out to be a daunting task and we ran into quite a bit of compatibility issues.

Accomplishments that we're proud of

.We are proud of getting a finished product that accomplishes exactly what we intended to do 
and creating a resource for everyone to practice interviews. This was a great learning experience for us, and we are fairly proud of all the amazing technology we were to pick up on during the development of this project which we can carry on to future endeavors.

What we learned

None of us had much experience with web development in general, so developing a full-stack project of this magnitude was a bit daunting but quite rewarding. We learned quite a bit of frontend development and how to utilize ReactJS for developing the webpage, while also honing on the specific libraries to enhance capability. Through the various challenges we faced with the API endpoints and the model, we learned quite a bit about how to transfer information between the front end and back end and how to train a model properly.

What's next for InterviewIO

In the future, we aim to make the interview more immersive and realistic for the user. We plan to introduce a talking face so that the user can get the experience of talking to someone face to face just like a real interview. Furthermore, we plan to allow users to practice technical interviews along with behavioral interviews to widen the scope of what the user can do. Finally, we want to host this website for easy user access.
",https://github.com/SaatvikV/InterviewIO,https://youtu.be/M1Xd0BfEt1I,"Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","react, flask, javascript, python",Steven,Zhang,szhang99@terpmail.umd.edu,,Yes,University of Maryland-College Park,"",All the tech we interacted with was brilliant.,All the tech we interacted with was brilliant and worked perfectly.,Yes,University of Maryland - College Park,3,Saatvik,Vadlapatla,vgsaatvik@gmail.com,Adam,Yang,adamfyang@gmail.com,Pranav,Polasam,ppolasam@terpmail.umd.edu
CurryCoolum,"",Draft,Pending,Project overview,04/08/2023 23:14:18,"","",,"","",Sahil,Jagtap,sahil.jagtap45@gmail.com,,"","","","","","",George Mason University,1,Sam,Mathew,dayumsam22@gmail.com
Marshmallow Moonbase,"",Draft,Pending,Project overview,04/08/2023 23:20:03,"","",,"","",Riya-T,Thapar,riyathapar06@gmail.com,,"","","","","","",University of Maryland - College Park,2,CSinn,SInha,chayanikasinha007@gmail.com,Sockister,,eosterman042@gmail.com
Squat Rep Counter,https://bitcamp2023.devpost.com/submissions/403578-squat-rep-counter,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:42:05,"Inspiration We are all active individuals at various fitness levels. A problem that we all realized we came across was that we could not tell how well our form was after performing various exercises.

What it does This application counts the number of squats done with proper form

How we built it We used Flask for the backend, OpenCV and media pipe for the pose estimation, and Python for logic. HTML/CSS was used to host the application as a web app.

Challenges we ran into None of us were experienced in any of the technologies used. The biggest challenge besides that was determining what was a ""full squat.""

Accomplishments that we're proud of Learning about OpenCV and media pipe!

What we learned Basic computer vision, API use, and hosting websites using Flask.

What's next for Squat Rep Counter Adding different exercises and determining when a user is struggling/has poor form.
",https://github.com/PShah81/Bitcamp-Project,,"","python, flask, opencv, html, css",Victor,Su,victor.yuchen.su@gmail.com,,Yes,University of Maryland,"","",Poor wifi,Yes,"University of Maryland - University College, University of Maryland - College Park",3,Kaushal,Janga,kjanga@terpmail.umd.edu,Vishwa,Dukkipati,vdukk@terpmail.umd.edu,Pranav,Shah,pshah115@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/08/2023 23:50:01,"","",,"","",Madison,Drummond,m.drummond2006@gmail.com,,"","","","","","",Baltimore Polytechnic Institute,0
Photo Assassin,"",Draft,Pending,Project overview,04/08/2023 23:54:12,"","",,"","",Patrick,Gough,pgough@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Safe & Secure,https://bitcamp2023.devpost.com/submissions/403602-safe-secure,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:04:00,"Inspiration

Mass shootings have become increasingly more common in the past few years. The recent shooting in Nashville has once again highlighted the urgent need to address the issue of gun violence in our society. As a response to this tragic event, we are inspired to take action and develop a security system that can detect firearms in real-time. Our project aims to enhance safety and security measures in public spaces by using computer vision technology to automatically detect the presence of firearms.

What it does

The project enhances the safety and security of public spaces, such as schools, airports, and shopping malls, by automatically detecting the presence of firearms in real-time and alerting security personnel and building inhabitants in real-time.

How we built it

We first gathered a dataset of images and videos of firearms, both in indoor and outdoor environments. We then used  TensorFlow and transfer learning to train a custom object detection model based on the SSD-MobilenetV2 architecture.  When the model detected a firearm, an alarm would be triggered, and a notification would be sent to security personnel.

Challenges we ran into

One of the main challenges that we faced while building this project was the limited availability of labeled firearm images for training the object detection model. We had to manually label a significant portion of the dataset, which took a lot of time, Additionally, optimizing the model to run in real-time was also challenging, as we needed to find a compromise between speed and accuracy.

Accomplishments that we're proud of

We were successfully able to develop a system that can detect firearms in security camera feeds and alert personnel as nessesary.

What we learned

This project taught us a lot about computer vision.
","",,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best First Time Hack - Bitcamp","python, tensorflow, opencv",srivishnupiratla,Piratla,srivishnupiratla@gmail.com,,Yes,"university of Maryland, university of Massachusetts","","","Used Tensorflow, opencv, python, and an Azure Cloud VM to train the model.",Yes,Sharon Middle School,0
DivyUp,"",Draft,Pending,Additional info,04/09/2023 00:06:05,"Inspiration

Being a group of friends, we order a lot of food collectively and pay back whoever ordered all the food. However, this process requires a lot of math to make sure everyone pays back their fair share. During this process, a lot of mistakes can happen such as paying back the wrong person, the amount calculate ends up being incorrect, and so many more. To avoid all this, we thought we could make an application which makes this process significantly easier by computing all the values for each person in the group order while also factoring in tax

What it does

Our application, DivyUp, makes the process of splitting a group bill significantly easier. We allow users to enter their group members for the order and then scan the receipt they were given. After this, the app displays each persons name and their respective share for the order. 

How we built it

DivyUp was made as a PWA (Progressive Web App) for cross-compatibility with mobile devices while maintaining a native look and feel. PyTesseract was used as the OCR engine for scanning receipts, and Flask was used as middleware to connect the Python OCR with the JS UI.

Challenges we ran into

One challenge was improving the accuracy of the OCR system. After experimentation, we realized that the JS implementation of Tesseract was less accurate compared to PyTesseract, which forced us to redesign our app with Python API compatibility. To further improve OCR, we also used a variety of pre-processing techniques, such as kernel convolution for denoising.

Accomplishments that we're proud of

We are proud of being able to deliver a fully functional application within the deadline. We are also proud of our ability to work together as a cohesive team, as well as our resilience in the face of various technical and practical challenges. Furthermore, we are extremely proud of our use of OCR, and our integration of OCR with our webapp via an API that we created ourselves. 

What we learned

We learned a lot about the cycles of app development, as well as how to divide up work for collaborative projects. We also gained concrete knowledge on OCR and image processing techniques, in addition to Flask, PWA, and Flexbox for UI. Building on this, we learned a number of different tools for preprocessing images with open CV. Given the nature of our data, it was important for us to preprocess our data. However, it was also important that we used the right preprocessing techniques as each reccomended method that we found online was effective, but only worked well in certain situaions and with only few inputs. We learned how to effectively implement different solutions that we found online in order to solve issues that we faced during development. For example, we learned about the differences between using Augmented thresholds, normalization, and kernel sharpening (all of which have the same perform the same task but have varying impacts given different inputs). 

What's next for DivyUp

We plan to scale this application upwards by including integration and compatibility with various money transfer applications such as Venmo, Zelle, and CashApp. This will allow the owner of a bill to send requests to their friends in order to streamline the 'paying back' process. 
",https://github.com/drnxv/DivyUp,,"Best Blockchain Project Using Hedera - Major League Hacking, Best Use of Microsoft Cloud for Your Community - Major League Hacking, Capital One - Best Financial Hack, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Cipher Tech - Best Digital Forensics Hack","javascript, python, css, html, api, flask, pytesseract, opencv, regex, image-processing, optical-character-recoginition",Pranav,Chavali,pranavchavali@gmail.com,,No,University of Maryland,None,Github,Using github was essential for the sucess of our project. Github allowed our team to each take on certain responsibilities so that each of us could work independently from eaech other and push our work online so that all of us would be able to access each others work at a moment's notice.,Yes,University of Maryland - College Park,3,Adithya,Pradosh,adi.pradosh@gmail.com,Arnav,Panda,arnavpanda19@gmail.com,Pranav,Peddamalla,pranavped1239@gmail.com
Untitled,"",Draft,Pending,Manage team,04/09/2023 00:09:26,"","",,"","",Shilin,Huang,shilin40@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Pipe Bot Timer,https://bitcamp2023.devpost.com/submissions/403612-pipe-bot-timer,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:19:34,"Inspiration

While looking through the twitter app, we found a metal pipe sound effect which caught our attention. At the same time, we realized that we were supposed to be doing homework, which became the inspiration for our Pipe Bot Timer.

What it does

First of all, it includes a timer, in which you can set with a number. Once the bot is active, you can use !new to prompt the bot for a number for minutes, which you can use with a decimal. Once you input this number, the timer will wait for this input's minutes, and once the timer is done, it will mention you in the chat that it is done. As a secondary function, if you are in a voice channel, you can use the function !music to have a chance of the bot playing a pipe falling sound effect. Finally, you can use !disconnect to disconnect the bot.

How we built it

Due to the fact that we had no prior knowledge of discord bot API, we were at a loss. However, thanks to tutorials online and our blood, sweat, and pipe sounds, we were able to create a bot that we can call our own.

Challenges we ran into

A huge challenge we ran into was actually getting the bot running in the server. While the actual action of doing it wasn't difficult, the first step in any project, especially one we have no prior knowledge, can be very difficult, which is why we're proud that we were able to create something.

Accomplishments that we're proud of

I think the biggest accomplishment that we had was actually creating the bot, and seeing it work for the first time in our small testing server was something that we can be proud of.

What we learned

With the knowledge that we learned over this weekend, we have learned how many of our favorite discord bots work, along with the time and effort that gets put into them. This can also be translated to being able to actually create bots ourselves for our own use.

What's next for Pipe Bot Timer

In the future, we hope to release the bot to the public with more refined coding. Additionally, being able to sync up the pipe sounds with the timer will make this bot a complete product, which is what we hope to do with this bot.
","",https://youtu.be/OQv6j05t69c,"Best First Time Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","java, javacord, maven, eclipse, discord",Pouncetail,Yeo,pouncetail@gmail.com,,No,University of Maryland College Park,"","",It was fun.,Yes,University of Maryland - College Park,0
Audio Poet ,"",Draft,Pending,Additional info,04/09/2023 00:31:24,"Inspiration

As music lovers, we often find ourselves wondering what genre a particular song belongs to. We also enjoy writing poetry and playing music. Combining our interests, we came up with the idea of Audio Poet, a web app that generates lyrics using ChatGPT, identifies the genre of the lyrics using a machine learning model, and maps it to appropriate music, creating a unique audio experience.

What it does

Audio Poet is a web app that generates lyrics using ChatGPT, identifies the genre of the lyrics using a machine learning model, and maps it to appropriate music. The app then plays the music along with a bot voice that reads the generated lyrics, creating a unique audio experience.

How we built it

We built Audio Poet using a combination of technologies. For generating the lyrics, we used ChatGPT, a large language model trained by OpenAI. Backend is written in Python Flask and JavaScript for buildng a simple interface. We also used a machine learning model to identify the genre of the lyrics. To map the genre to appropriate music, we used a music library and an algorithm that selects the best match based on the genre. To play the music along with the bot voice, we used a text-to-speech engine and a music player.

Challenges we ran into

One of the biggest challenges we faced was training the machine learning model to accurately identify the genre of the lyrics. We also had to find a way to map the genre to appropriate music in real-time, which required a lot of experimentation and fine-tuning.

Accomplishments that we're proud of

We're proud of creating a web app that combines cutting-edge technologies like ChatGPT and machine learning to create a unique audio experience. We're also proud of the algorithm we developed to map the genre to appropriate music in real-time.

What we learned

Through this project, we learned a lot about natural language processing, machine learning, and music theory. We also learned about the challenges of integrating different technologies to create a seamless user experience.

What's next for Audio Poet

In the future, we plan to improve the accuracy of the machine learning model and add more genres and music options to the app. We also plan to add a feature that allows users to upload their own lyrics and map them to appropriate music. Additionally, we plan to improve the bot voice to make it sound more realistic.
","",,"Most Creative Use of Twilio - Major League Hacking, Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, flask, javascript, openi, mongodb",visHUSTLE,Nandyala,vishnuraju15@gmail.com,,Yes,The University of Texas at Arlington,Audiopoet.tech,"",Twilio sendgrid sms generation is quick enough to set up. Interface was easy to navigate.,Yes,"",0
Blindspot,"",Draft,Pending,Additional info,04/09/2023 00:32:36,"Inspiration

As a team of engineers, we were inspired by the challenges faced by the visually impaired. We recognized the need for a technology that could empower the blind to navigate their surroundings safely and independently. We have also all been fascinated with the recent advancements of machine learning and artificial intelligence and their real-world applications. Thus, we set out to create a machine-learning solution that could make a real difference in the lives of those with visual impairments.

What it does

Blindspot is a prototype of image-recognition glasses designed for the visually impaired. The glasses use OpenCV to scan the user's surroundings, identify objects and people, and announce them aloud along with the distance in centimeters. Familiar faces can be registered for immediate recognition, and an emergency video call function through Twilio allows the user to share their live feed with a contact in case of an emergency.

How we built it

Using OpenCV and Twilio, we built a prototype of image-recognition glasses that featured a webcam and distance sensor. The glasses were able to identify and announce objects and people within the user's vicinity, including the distance in centimeters. We also implemented a feature to register familiar faces, allowing the glasses to announce them by name upon detection. Finally, we added an emergency video call function through Twilio to enable the user to share their live feed with a contact in case of an emergency.

Challenges we ran into

One of the biggest challenges we faced was optimizing the technology for real-time use. We had to work through significant technical hurdles to ensure that the glasses could accurately identify objects and people and provide distance measurements in real-time. We had a lot of trouble-shooting with OpenCV in order to create the most accurate image recognition we could provide, and confidence intervals, to be precise, were an area that we didn't expect to be an area of importance as they turned out to be. However realizing where the problems stemmed from and then solving them made this project all the more satisfying.

Accomplishments that we're proud of

We're proud to have developed a technology that has the potential to make a real difference in the lives of the visually impaired. Our image-recognition glasses provide a new level of independence and safety for blind individuals, empowering them to navigate their surroundings with confidence. We're particularly proud of the real-time capabilities of our technology, as well as the inclusion of an emergency video call function to provide additional support in case of emergencies.

What we learned

During our research, we discovered that many of the existing assistive technologies for the blind were limited in their capabilities, often lacking the ability to identify specific objects or people and provide accurate distance measurements. We learned that these limitations created significant obstacles for the visually impaired in their daily lives, leading to frustration and a sense of helplessness. Through the development of Blindspot, we also gained valuable experience in using OpenCV and Twilio to develop a functional prototype of image-recognition glasses.

What's next for Blindspot

Moving forward, we plan to continue refining the technology and expanding its capabilities. We aim to optimize the accuracy of the distance measurements and the object and face recognition capabilities. We also plan to explore additional features, such as a text-to-speech function for reading signs or written materials aloud, and what we find the most exciting, automating transactions by identifying items as ""buyable"" and even being able to make transactions through just looking at QR codes. We're even planning on making this compatible with the blockchain and cryptocurrencies. Ultimately, we hope to bring our image-recognition glasses to market and make a positive impact on the lives of those with visual impairments.
","",,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, Most Creative Use of Twilio - Major League Hacking, Best Domain Name from Domain.com - Major League Hacking, Best Hardware Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, opencv, twilio, arduino, raspberry-pi, html, react.js, pyttsx3, face-recognition, css, typescript, firebase",Vaxyz360,Prabhu,varunprabhu.360@gmail.com,,Yes,University of Maryland - College Park,unseenbits.tech,"",...,Yes,University of Maryland - College Park,1,Parsh,Goel,pgoel12@terpmail.umd.edu
IntelliDrive Drowsiness Detector,https://bitcamp2023.devpost.com/submissions/403624-intellidrive-drowsiness-detector,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:38:39,"Inspiration

The rising cases of accidents caused by drowsy driving inspired us to create a solution that could prevent these incidents.

What it does

IntelliDrive Drowsiness Detector uses image processing and deep learning to detect signs of drowsiness in drivers. It alerts them by flashing the light for 5 seconds.

How we built it

To build IntelliDrive Drowsiness Detector, we trained a convolutional neural network (CNN) using thousands of images of tired drivers and conscious drivers. We deployed the model in real-time using a camera and microcontroller, and integrated the hardware and software using serial communication. 

Challenges we ran into

We faced several challenges while building IntelliDrive Drowsiness Detector. One of the biggest challenges was finding a suitable dataset. Initially, we trained the model using only images of eyes, but it did not perform well when introduced to images of the whole face. We had to retrain the model using a larger dataset of images that included both eyes and face.

Another challenge we encountered was working with serial communication between the microcontroller and the computer. None of us had worked with serial communication before, and it took some time to get the Python code to communicate with the Arduino board.

Real-time detection also made it harder to send data and build an efficient system. We had to optimize the neural network model to process images quickly, while also ensuring that the system could send alerts to the driver in real-time. Despite these challenges, we were able to overcome them and create a functional system that can potentially save lives.

Accomplishments that we're proud of

We are also proud of achieving a high accuracy rate of up to 90% with the images we have. This makes our system highly reliable in detecting signs of drowsiness and preventing accidents caused by drowsy driving. Additionally, the flashing light functions as we intended, providing a clear and effective alert to the driver.

Throughout the development process, we had the opportunity to learn and apply new skills, including working with serial communication and real-time image processing. Despite initial doubts, we were able to successfully overcome challenges and create a functional system that has the potential to save lives.

What we learned

During the development of IntelliDrive Drowsiness Detector, we learned several valuable lessons. Firstly, we learned how to use Git and GitHub to collaborate as a team effectively. This helped us to manage code changes, resolve conflicts, and keep track of progress. Secondly, we gained valuable experience in working with serial communication between the microcontroller and the computer. This helped us to integrate the hardware and software components of the system seamlessly. We also deepened our knowledge of deep learning and the importance of choosing the right dataset for training the neural network model. This helped us to achieve a high accuracy rate and build a robust and reliable system. Moreover, we learned the importance of working well with other people, including understanding their skillsets and picking out suitable projects that cater to their strengths. We also learned the value of having a leap of faith in the process and being open-minded to new ideas and approaches.

What's next for IntelliDrive Drowsiness Detector

For IntelliDrive Drowsiness Detector, we plan to improve the accuracy of the system by addressing some limitations of the current model. One of these limitations is that the model may not detect drowsiness accurately for people from certain races due to the limited dataset we used for training. We plan to collect a more diverse dataset to make the model more inclusive and accurate.

Another limitation we plan to address is the possibility of false detections. While we have successfully avoided blinking from triggering the alarm, other facial expressions such as smiling may still make the model confused. We plan to improve the model's ability to distinguish between different facial expressions by incorporating additional features and data.

Additionally, we plan to make the system more robust by incorporating other sensors, such as heart rate monitors, to provide additional information on the driver's state. We also plan to explore ways to make the system more accessible and affordable, such as by incorporating it into existing car technology or developing a low-cost stand-alone device. Ultimately, our goal is to make IntelliDrive Drowsiness Detector an effective and accessible solution for preventing accidents caused by drowsy driving.
",https://github.com/ahnngo/bitcamp2023,https://www.youtube.com/watch?v=uXAnVBc2o3I,"Best Hardware Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp","python, c++, tensorflow, opencv, arduino, git, github",Anh,Ngo,ngoa@berea.edu,,Yes,University of Maryland and Berea College,"",Using Git and GitHub allowed us to collaborate and manage code changes effectively. GitHub's issue tracking and pull request features helped us keep track of tasks and review changes before merging them into the main branch.,"Firstly, using Git and GitHub allowed us to collaborate and manage code changes effectively. We were able to create branches for different features and collaborate on different parts of the project without interfering with each other's work.

Using GitHub's issue-tracking feature also helped us to keep track of tasks and monitor progress. Creating issues, assigning them to team members, and tracking their status throughout the development process were easy.

GitHub's pull request feature also allowed us to review and discuss changes before merging them into the main branch. This helped to ensure that all code changes were thoroughly tested and reviewed before being added to the project.

Overall, using Git and GitHub was a great experience, and it helped us to work efficiently and effectively as a team.",Yes,Berea College,1,Anh,Le,anhleo1008@gmail.com
Farm Buddy,"",Draft,Pending,Project overview,04/09/2023 00:40:07,"","",,"","",Nirav,Koley,niravkoley@gmail.com,,"","","","","","",University of Maryland - College Park,3,Akshay,Trivedi,aku24.7x3@gmail.com,Anish,Bhupalam,anishbhupalam@gmail.com,Vignesh,Rangarajan,vrangara@terpmail.umd.edu
Email Ahoy!,https://bitcamp2023.devpost.com/submissions/403634-email-ahoy,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:56:04,"Inspiration

When brainstorming, our group found that emails were a major stressors in our lives. We had the shared experience of feeling overwhelmed by a constant stream of relevant emails. Therefore, we decided to gamify the email experience. We also like pirates...

What it Does

Our project, italics_Email Ahoy!_italics, is a simple companion project for your email. Email Ahoy! sits in the corner of your screen, or on a second monitor, and whenever you receive an email, a new enemy pirate appears. After you have opened and read that email, your pirate defeats the enemy, and you get a doubloon!

How we Built it

We built Email Ahoy! with Python, the Google API, and the italics_pygame_italics library. We used a de-coupling design structure for the actual game to connect to the Google API, and we built all animations using italics_pygame_italics and assets found online. 

Challenges we Ran Into

Our team, as a whole, had little experience with italics_pygame_italics and the italics_Google API_italics. We spent hours trying to understand the italics_Google API_italics, specifically learning that having too many unread emails causes the API to break, without raising any observable exception. We also were challenged by Github, especially since all of us were working on the same file in the same project at the same time. Lastly, we weren't able to implement the full extent of our idea, because we ran out of time :(

Accomplishments that We're Proud of

We are proud of having a working connection with the Google gmail API, and also having an actual visual project. We are also proud to have submitted something for our first time at Bitcamp.

What We Learned

We learned a lot about teamwork on a small group project. One of our members had never used python before, so they learned a lot of about the language. As a group, we all learned about pygame, the Google API, and Github.

What's Next

We plan to continue working on Email Ahoy!, by adding more features, like cosmetics, and a shop. Eventually, we would love to develop it into a browser extension.
",https://github.com/yuwex/Bitcamp2023.git,https://youtu.be/UdY-iVCEPEw,"Best Razzle Dazzle Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","python, pygame, google, email, api",Brandon,Jenkins,bjenkins0829@gmail.com,,Yes,"University of Maryland, College Park","","",GitHub Desktop was perfect for this.,Yes,University of Maryland - College Park,2,Will,Rabalais,will.spam.emails@gmail.com,Yuji,Wexler,yuji@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/09/2023 01:14:59,"","",,"","",Aaquib,Syed,aaquibahm@gmail.com,,"","","","","","",University of Maryland - College Park,0
LectureGPT,"",Draft,Pending,Additional info,04/09/2023 01:22:00,"Inspiration

Being students ourselves, we sometimes miss out on vital details during lectures and don't feel confident in what was just taught. This product provides a way to quickly summarize our lectures and test our knowledge with practice problems to boost confidence.

What it does

LectureGPT is a Python application that allows students to upload lectures either via YouTube links or mp3 files and summarize them. It also provides practice problems in concepts they wish to practice. 

How we built it

Our Python program was broken down into 4 main tasks:


Getting an mp3 file from the specified Youtube Link:
We used the Pytube library to download the mp3 file.
Transcribing that mp3 file into text:
We used Whisper through the OpenAI API to transcribe the mp3 into a text file.
Feeding that text into GPT to the lecture and providing notes/practice problems:
We used ChatGPT via the OpenAI API to get a summary of the transcription as well as provide practice problems.
Wrapping the functionality up in a nice GUI:
We used the CustomTKinter library to create a GUI.


Challenges we ran into


Supporting Panopto Recordings:
Originally we wanted to transcribe UMD Panopto recordings but we had trouble scraping the m3u8 request codes programmatically and furthermore converting m3u8s into mp3s. We decided to not include Panopto support for this version.
Whisper's File Size Limit:
Whisper has a file size limit of 25 Mega Bytes so we had to use the FFmpeg library to cut the video into smaller chunks and transcribe each separately before combining their results.
ChatGPT Prompt's Character Limit:
The ChatGPT API has a character limit of 4096 characters while some of our longer lectures could reach up to 50,000+. Furthermore, ChatGPT can't remember individual blocks of text so we had to summarize each block and then get ChatGPT to summarize those summaries.
OpenAI's Credit Limit
For free accounts, OpenAI has a credit limit of $5 which we each quickly burned through. By the end, we had to start paying to keep using their APIs.


Accomplishments that we're proud of


Getting around file size and word limits to summarize hour+ long videos
Properly using version control with Git/GitHub.
Making a clean GUI and webpage for the product.


What we learned

We learned a lot about video streaming and the purpose of m3u8 files and how they differ from regular mp3 or mp4 files. We used many new libraries for the first time including OpenAI, TKinter, Selenium, Pytube, and FFmpeg. Most importantly, we learned how to divide up a programming project among our members and maintain our source code with GIT.

What's next for LectureGPT


Support for Panopto Recordings
Converting the app into a web app
Upgrade GPT to 4
Add support for more systems
Use our own ML algorithms to fine-tune the transcriptions

","https://lecture-gpt.vercel.app/, https://github.com/RodzAmor/Bitcamp2023",,"Best First Time Hack - Bitcamp, People's Choice Hack - Bitcamp, Best UI/UX Hack - Bitcamp","python, openai, pytube, ffmpeg, pydub, json, dotenv, re, tkinter",Thomas,Edwards,tedward6@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","","We used GitHub to host all of our code which worked really nicely and allowed our team to work on separate aspects of the project.

OpenAI has really intuitive APIs that let you use their impressive services programmatically. However, the limited amount of uses per free account is a shame and we had to make several new accounts throughout the hackathon.",Yes,University of Maryland - College Park,2,Ayhan,Mehdiyev,mehdiyev.ayyhan@gmail.com,Rodz,Amor,ramorstem2022@gmail.com
Frontier Fugue Fighters,"",Draft,Pending,Additional info,04/09/2023 01:30:55,"Inspiration

Rhythm games and fighting games... both amazing game categories.
But what if there was a game that combined both? 
From that idea, Frontier Fugue Fighters came forth!

How we built it

The wild-west aesthetics of this game are all composed of hand-drawn illustrations, carefully composed to match both existing fighting game visuals, while including the general theme within this year's bitcamp. These assets were then taken and given a nostalgic effect using a shader in Godot.

What we learned

None of us have ever touched Godot before despite wanting to create a game at some point. What a better place to take our first step than bitcamp?
Some of us have not used GitHub before either! Collaborating on code was a foreign concept, but through files lost through pushing to main and frustrated discussions on how to fix an error never before seen... we made it!

What's next for Frontier Fugue Fighters


More beats to beat em' up to!
Different kits for the different marshies!
Combos! Special attacks! There's so much more we can pull from fighting games!

",https://github.com/wolr210/Frontier-Fugue-Fighters,,"Best Razzle Dazzle Hack - Bitcamp, Best First Time Hack - Bitcamp, People's Choice Hack - Bitcamp","godot, github, gdscript, git",Kazu,Tan,pikaminecraftlover@gmail.com,,Yes,University of Maryland College Park,"","",The wifi sucked :(,Yes,University of Maryland - College Park,3,Jay,Rana,jay.rana1@gmail.com,Alex,Van,alextvann@gmail.com,Liam,McConnell,liammcconnell5@gmail.com
Cookie Jar,"",Draft,Pending,Additional info,04/09/2023 01:40:32,"Inspiration

Our inspiration for Cookie Jar was to create an online cookbook that helps reduce daily food waste in households. Traditionally, when searching for recipes, users look for recipes and then check if they have the required ingredients. At Cookie Jar, we eliminate this middle step by allowing users to search directly by ingredients.
In addition, we wanted to create a social media platform for foodies, where users can share their own recipes and their favorite recipes they would like to try. This feature enables a collaborative community where users can exchange cooking tips and inspire one another to try new recipes. Overall, our goal is to create a platform that promotes sustainable cooking practices and encourages users to reduce their environmental impact by making the most of the ingredients they have on hand.

What it does

Once a user creates an account on Cookie Jar, the landing page will feature a search functionality where they can input the ingredients they have on hand and discover various recipes. Users can also ""favorite"" recipes to save them for later viewing. These features enable users to find and save recipes easily, allowing them to make the most of their ingredients and reduce food waste. 

How we built it

The mockups were built in Figma.
The backend is built using Python-Flask.
The front end is built using CSS/HTML.
The database uses cockroach-db.

Challenges we ran into

Setting up and managing the CockroachDB database.
Getting started with sessions in Python-Flask.

Accomplishments that we're proud of

Exploring new languages (Python)
Learning new platforms (CockroachDB, CSS/HTML)
Managing a server (Python-Flask)

What we learned

Designing and managing a database using CockroachDB.
How to create websites with a python backend and html frontend.

What's next for Cookie Jar


Creating a dropdown menu from the profile icon that features Login, Register, and Sign out options
Create pop-ups for errors such as entering a taken username when creating an account, entering an incorrect username or password when logging in, invalid inputs when creating a recipe
Tagging recipes for filtering based on cuisine
Better UI

",https://github.com/yitingzh0913/CookieJar_Bitcamp2023,,"Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","python, flask, html, css, figma",Collin,Chiang,collin.chiang1@gmail.com,,Yes,"University of Maryland, College Park",...,...,"Internet inconsistent, had to use mobile hotspots",Yes,University of Maryland - College Park,2,Yiting,Zheng,sapphire32123@gmail.com,Christina,Xu,christinaxu10@gmail.com
Generalized Grover's Algorithm Color Graph Solver,"",Draft,Pending,Additional info,04/09/2023 01:54:12,"What it does

Given a graph (nodes, edges, colors), graph_colorings() outputs the circuit used and the frequencies observed by the simulator. The number of qubits used will equal len(nodes) * ceil(log2(len(colors)) + len(edges) + 1, so to ensure reasonable runtime keep this number below 10.

Important Use Information

Due to the limited time available, there are limits on what functionality has been implemented for nodes and colors. Each must be a tuple/list of consecutive integers starting at 0 (i.e (0, 1, 2, ...)). edges is a tuple of pairs of elements from nodes.

The output

When graph_colorings(nodes, edges, colors) is run, the frequencies that the simulator returns for each coloring are displayed in decreasing order. The bars that are colored red are the correct answers, while blue bars are incorrect. The label of the graph shows the percent of simulated runs that returned a correct answer. As mentioned, the function also returns the quantum circuit used and the frequency distribution. The quantum circuit can be viewed using qc.draw().

Plans to take it further

There are a few things I would have liked to implement if I had had more time.

Graph interface

I would like to implement an interface through which the user can create a graph with nodes and colors named however they like, and to display the most frequently observed graph coloring using networkX. I could also make an interface that emulates a Sudoku board.

Variable color sets

I would also like to implement the ability to give each node its own set of colors. One possible application for this is in solving a sudoku puzzle, where specific nodes are already filled in with a single value. In a 9x9 sudoku board, each prefilled node would reduce the number of qubits required by 3. My existing implementation already includes some of the backbone for this but I didn't have time to put it all together.

Multi-sided edges

In order to reduce the number of qubits required, it may be useful to implement edges that connect more than two nodes. These edges would indicate that every node connected in this way has to be colored differently. This again could be useful in sudoku, where instead of creating 36 edges for each row/column to indicate that no two nodes in the row/column can be the same, a sing nine-sided edge can be made that indicates all 9 must be different. This obviously constitutes a significant reduction in qubits required to represent certain graphs. For example, the number of qubits needed to represent an empty 9x9 sudoku board would decrease from 1297 to 352.

Resources

Mukherjee, Sayan. “A Grover Search-based Algorithm for the List Coloring Problem.” arxiv:2108.09061v2, 8 Feb. 2022, IEEE, arxiv.org/pdf/2108.09061.pdf
",https://github.com/TheMLevin/GroverGraph/blob/main/GroverGraph.ipynb,,Advanced Quantum Track - Bitcamp,"ibm-cloud, python",Mark,Levin,marklevin.co@gmail.com,,Yes,University of Maryland,"","","This time at Bitcamp I spent most of time helping other hackers as a mentor, which was an interesting experience and I like being able to help people.",No,University of Maryland - College Park,0
BASM,https://bitcamp2023.devpost.com/submissions/403743-basm,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:07:30,"Inspiration

I was inspired by the Pico-8 project. The idea of a lightweight virtual console that users could plug-and-play code into under creative restraints has always been interesting to me, and I wanted to see how I could extend it. I also wanted practice in writing simple interpreters/assemblers, and brushing up on my C and 8080 assembly seemed like a great way to do that.

What it does

The Program Known As BASM consists of two parts; the previewer, which features custom syntax highlighting, checking for code correctness, and error linting, and the BASM engine, which parses, compiles, and interprets user code.

Under the hood, the BASM virtual processor has an architecture similar to the NES, albeit heavily simplified. Users are given a few kilobytes of memory to work with, and a lightweight graphics engine lets them create and animate simple sprites. The language itself is closely modeled after 8080 assembly, with the advantage of being able to abstract in software the more frustrating parts of working with decades-old processors.

How we built it

The Program Known As BASM is a hodgepodge of an entirely bespoke UI and text rendering framework written with SDL2 and an equally customized interpreter, principally powered by pointer mayhem and pretending the memory leaks aren't real.

Challenges we ran into

It turns out writing an assembler in less than two days is very hard for someone with little experience, particularly when I spent half that time writing GUI code! I'm much more used to Python and TypeScript, so the shift to C, a language I'm less familiar with, and embracing the archaisms and quirks that come with it was a welcome challenge, but a challenge nonetheless. Memory management was a consistent issue, as was passing data to and from the multifarious parts of the application.

Accomplishments that we're proud of

I've learned more about writing GUI projects from scratch in the past 36 hours than I ever have in my years of various projects before. I feel a lot more comfortable working closer to memory in C and with writing simple parsers, and I'd love to explore programming language development even further in the future.

I'm personally very proud of the syntax highlighting -- that's all custom, and it wasn't easy! There's a lot of strange hacks under the hood to make it all come together.

What we learned

C is a difficult language! The actual assembly was the least complicated part of this project, contrary to expectation.

What's next for BASM

I didn't implement as many of the features as I wanted to (the assembler remains maybe 70% finished), but this project really interests me, and I want to work on it even further! The most obvious next step is getting some nicer graphics in there, and maybe even allowing for live editing from within the application.
",https://github.com/Spirati/basm,,"Best Moonshot Hack - Bitcamp, Best UI/UX Hack - Bitcamp","asm, c, sdl2",Lynne,Cure,pjh.cure@gmail.com,,Yes,Baltimore Polytechnic Institute,"","",I'm afraid I stayed relatively low-tech at this hackathon (barely any web to speak of),No,Baltimore Polytechnic Institute,0
Grover's Quantum Algorithm and its relation to graph theory,https://bitcamp2023.devpost.com/submissions/403769-grover-s-quantum-algorithm-and-its-relation-to-graph-theory,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:21:53,"Inspiration

I completed this project because of a deep interest in quantum computing and quantum machine learning, and a desire to learn more about it. 

What it does

My program uses Grover's Quantum Algorithm to color regions on a graph so that no two regions of the same color are touching. to do this it places all possible states into a quantum superposition and uses a matrix called an oracle to isolate the possible solutions to the problem and uses a diffusion matrix to increase the chance of the desired outcomes. repetition of the last two steps completed enough times makes the desired outcomes the only ones likely to occur. 

How I built it

I initially started trying to solve this problem for any graph which consisted of 2 or more square regions each bordering between one to four other regions. I eventually discovered an encoding method and oracle algorithm which would successfully solve this problem, but needed at least 5 qubits per region to encode this. I decided that this was a prohibitively large number of resources and added more constraints to the input.

I changed my base constraints to the assumption that the square regions fit into a rectangle which was X regions across and Y regions down. this allows me to only need one qubit per region to encode the starting state, with the total number of qubits needed being equal to two times the number of regions. 

the oracle uses XOR gates (consisting of two CNOT gates each) to verify that 2 regions aren't the same color in a possible solution. Each XOR gate output must be stored on a different qubit, and the minimum number of possible XOR comparisons that could prove a solution is one less than the number of regions. A multi input gate is needed to verify that all XOR gates outputted correctly for a possible solution, bringing the number of qubits needed for solutions up to be equal to the number needed to store the possible states. 

the output is a binary number where each number determines the color of the corresponding region. To change the input, simply enter the number of regions across the new area is as X and the number of regions down it is as Y.

Challenges I ran into

I had difficulties conceptualizing how to minimize the number of qubits because I didn't want to constrain the possible inputs. I eventually constrained my inputs enough that each region could be represented with one bit, at which point I started making progress quickly.

What I learned/What's next

I'm proud to say that the program I created is capable of accepting variably sized input graphs. I learned about Grover's algorithm in far more detail than I ever knew before, and gained a better understanding of both Qiskit and quantum computing in general. I also learned more about myself. I started this project uncertain of myself and my abilities, and not knowing if I would be able to accomplish my goals. In the process of completing my project I proved to myself that I am more than capable of achieving difficult goals when I commit myself to my goals. My next goal with this project is to implement a way to reduce the number of qubits needed to process the oracle, which would increase the speed and scope of this project. 
",https://github.com/noahkanter/Grovers-Algorithm-Bitcamp-2023,,Advanced Quantum Track - Bitcamp,"python, qiskit, jupyterlab",Noah,Kanter,nkanter@umd.edu,,Yes,University of Maryland College Park,"","","I found Qiskit easy to understand and use, and enjoyed working with it a great deal.",Yes,University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/09/2023 02:24:04,"","",,"","",Gus,Ruben,gusruben@protonmail.com,,"","","","","","",Woodrow Wilson High School,1,Anh,Pham,demonxranger8@gmail.com
Ripoff Bop-It,https://bitcamp2023.devpost.com/submissions/403778-ripoff-bop-it,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:28:29,"Inspiration

We made this project in hopes to improve other people's reaction time.

What it does

In a limited amount of time, the user has to match the text color to the answer on the screen.

How we built it

We built it using python and built in python modules including pygame, sys, and random

Challenges we ran into

Challenges we ran into was getting the specific order randomized and always generating a different order.

Accomplishments that we're proud of

We are proud of completing our project early.

What we learned

We learned how to create a timer using pygame.

What's next for Ripoff Bop-It

We are going to attempt to win this hackathon.
",https://replit.com/@YosephGetachew1/Bitcamp-Project#main.py,https://youtu.be/k614rdibNFw,"Best Razzle Dazzle Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, pygame, random, sys",Yoseph,Getachew,ytgetachew.cs@gmail.com,,Yes,Baltimore Polytechnic Institute,None,No,Wifi was not the best and could not work proficiently on project when needed in the Xfinity center.,Yes,"Baltimore Polytechnic Institute, Batimore Polytechnic Institute",1,Diego,E,diegoef555@gmail.com
Quantum Map Coloring Problem,https://bitcamp2023.devpost.com/submissions/403790-quantum-map-coloring-problem,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:41:12,"Inspiration

We believe that Quantum Computing represents the future of computer science - We wanted to challenge ourselves to create a project that would help us break into the field.

What it does

The program takes an input of a textfile that contains a graph in the form of an adjacency list, and ""colors"" the graph such that no adjacent nodes have the same color.

How we built it

We used the Qiskit library in Python to encode the qubits, and Grover's algorithm to find the solution.

Challenges we ran into

We had to deal with schedule conflicts in the team, and the wifi configuration was more akin to a jammer.

Accomplishments that we're proud of

We made a cool project! We also convinced a team member to major in Computer Science with the rest of us.

What we learned

Basics of quantum computing and Python

What's next for Quantum Map Coloring Problem

We can optimize the algorithm and also generalize for more colors and different types of graphs
",https://github.com/Aurynium/quantumcoloring.git,,"Advanced Quantum Track - Bitcamp, Best Bitcamp Hack - Bitcamp","python, qiskit",Aurynium,Yu,matthew.yu904@gmail.com,,Yes,"University of Maryland, College Park","","","The bitcamp track organizers were friendly and helpful, and created great presentations for their respective audiences.
Qiskit was definitely the right choice for getting started with Quantum, and has amazing resources for beginners and advanced quantum users alike.",Yes,University of Maryland - College Park,3,Wilson,Smith,01wsmith+devpost@gmail.com,Serena,Huang,serenaqhuang@gmail.com,Nikolai,Smith,nikolai@terpmail.umd.edu
So You Want to be a Realtor,https://bitcamp2023.devpost.com/submissions/403795-so-you-want-to-be-a-realtor,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:47:22,"Inspiration

Our love for creating games made us want to try to make something fitting the theme of a game show.

What it does

The game has five mini-games presented in a The Price is Right-style game show, hosted by an animated character named Bestudo (who resembles a certain well-known terrapin). The five mini-games each present the player with information about a particular house, and the player must attempt to guess a numerical value for another data point. The mini-games include guessing the house price (both directly and in a ""One Off""-style mini-game), the property taxes, the year it was constructed, and the number of bedrooms and bathrooms.

How we built it

We used the Unity game engine for the 3D environment with the C# language for scripting. We obtained the real estate data from Zillow. We rigged and animated the character Bestudo using Mixamo.

Challenges we ran into

We had initially wanted to be able to obtain all the information about houses on-the-fly via APIs to allow for a more unique experience each time the game is played. Unfortunately, we discovered that there are few of such APIs, and none of the ones we did find would provide the information we were looking for. After discussing this with representatives from the CoStar Group, we settled on obtaining the data ahead of time manually to keep this project within scope.

Accomplishments that we're proud of

We are proud that were were able to create a polished, easy-to-use game in a very short amount of time.

What we learned

We learned how to create a dynamic dialogue system for characters to speak through

What's next for So You Want to be a Realtor

Future improvements for So You Want to be a Realtor can include dynamic fetching of real estate data from the internet (if an appropriate API can be found), the addition of multiplayer, voice acting for Bestudo, as well as a variety of additional mini-games.
","https://github.com/grabermtw/Real-Estate-Gameshow, https://github.com/grabermtw/Real-Estate-Gameshow/releases/tag/v0.1-alpha",https://youtu.be/AJwuk0JrCu4,"CoStar Group - Best Use of Real Estate Data, Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, c#, mixamo",Matt,Graber,mgraber1@terpmail.umd.edu,,Yes,"Syracuse University, Johns Hopkins","","",We have found that Unity is a great engine for rapid prototyping. It equipped us with everything we needed to create what we wanted.,Yes,University of Maryland - College Park,1,Matthew,Vorsteg,mvorsteg7@gmail.com
SpiralScope-Parkinson's Spiral Disease Detection App ,https://bitcamp2023.devpost.com/submissions/403800-spiralscope-parkinson-s-spiral-disease-detection-app,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:55:16,"Welcome to a BitCamp 2023 Hackathon project

*SpiralScope - Parkinson's Spiral Disease Detection App *

This is a web application for detecting Parkinson's disease using spiral drawings. Parkinson's disease is a neurodegenerative disorder that affects movement, and one of the symptoms is tremors in the hands. Spiral drawing tests are commonly used to diagnose Parkinson's disease.

Quick Tour

CustomCamera Folder- Main App where IOS app is built Inside CustomCamera, the Shared folder is where all the code was built. The rest of the files are meant for configurations for different devices.

Custom_CameraApp.Swift runs the main App ContentView.Swift holds all the SwiftUI components ParkinsonDetector.mlmodel is the machine learning model built using Python Tensorflow keras approach. It was built using a convolutional neural network.

After many trials and errors, the app has a 96% accuracy to detect Parkinsons from a spiral drawing.

*How it works? *

Draw a spiral on a white paper, take a picture of it and get your results!!

If the result indicates that you may have Parkinson's disease, please consult a doctor for further evaluation.

Usage

Clone the repository Open the repo on XCode Just Run the App

DATASETS USED FOR ML: 
https://www.kaggle.com/datasets/anoushkasud/parkinson-spiral-test 
https://www.kaggle.com/datasets/kmader/parkinsons-drawingshttps://www.kaggle.com/datasets/banilkumar20phd7071/handwritten-parkinsons-disease-augmented-data

******Quick Note on Demo: The drawing classified as parkinsons was traced from a spiral test online from
a patient diagnosed with the disease
",https://github.com/zaalgocrazy/ParkinsonsAppIOS,https://youtube.com/shorts/ygK8LCbXW2Y?feature=share,"Best Razzle Dazzle Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Fannie Mae - Don’t Put All Your Eggs in One Basket, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","swift, firebase, python, tensorflow, web, amazon-web-services, s3",Abhinav,Garlapati,abhinavbg03@gmail.com,,No,University of Maryland,"","","Tech Stack: SwiftUI, Python Tensorflow Keras, Firebase, AWS S3

It was our first times with SwiftUI, Firebase, and AWS S3",Yes,University of Maryland - College Park,2,Taha,Al Nufaili,talnufai@terpmail.umd.edu,zaalgocrazy,,zbelihomji@gmail.com
tL;Dr,https://bitcamp2023.devpost.com/submissions/403802-tl-dr,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:57:34,"About

I got the idea for Tl;dr after talking to my friend at this hackathon. We were at first trying to hack away at audio Discretization, something we learned would take a lot more than a few days to accomplish. We needed something that was both doable, but also impactful to some extent by its innovativeness. She pointed me toward making a bot of some kind, some automatic, but when I was given that suggestion I started considering the potential in automation, and automatic summarization ended up being the best idea I could get out of that train of thought.

The project

Simply put, it's a summarizer.  Perferbly taking chunks of text consisting of 2 or more sentences, will shorten the text and get the important parts, and turn them into a semi-functional sentence.  There are two modes. One mode is the Teal Deer mode. (tL;Dr) Ths mode will give you a fairly easy-to-understand summarization that is roughly similar to the original text, but usually half in length. The other mode is the Black Deer mode. (bD;Dr) This mode is hardcore and will convert entire essays into singular sentences. Sentences tend to be only a line long for these and are usually very dense in meaning.

Challenges

Maintaining the meaning of people's words, and trying to say less while keeping at least 60% of the meaning intact was difficult. I had to analyze linguistic patterns and recognize correlations between the subject, verb, and object of a sentence to know when and where it'd be best to extract critical information.  

Learned

What this project has shown me, and what the few other projects I attempted to start on that same day had shown me, is that software engineering is only 25% coding and debugging. The part that really takes up that larger portion of time is considering the best way to approach the situation, and trying to construct a nearly perfect system of logic that will achieve the goal you set out for. Spending hours studying grammar, and looking at passages myself has really shown me that programming isn't really just programming since the logic of what makes up every fields in the world has to be maintained and grow upon by us.
",https://github.com/frozennuts/tL-Dr/tree/main,https://youtu.be/qfI2HIjiUkc,"Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp",python,Daniel,Awoke,dawoke@terpmail.umd.edu,,Yes,Unviersity of Maryland,n/a?,i dont have any,"I used alot of software and online resources since the research was the key to success here. Having bad wifi at times was a struggle, but I luckily had good data so I cold make up for it.",Yes,"",0
Group2Meet,https://bitcamp2023.devpost.com/submissions/403803-group2meet,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:58:27,"Inspiration

We recognized the need for temporary spaces to plan group projects in an academic setting, but found that GroupMe and When2meet, while both popular, did not do a sufficient job in fulfilling this need.

What it does

Allows users to join groups via a link (using Google sign-in) and send chat messages, create deadlines, and set up meetings.

How we built it

We stored our data in Postgres and used Phoenix LiveView to get a live updating web app connected to the database.

Challenges we ran into

CSS continues to be terrible and the database interfacing framework for Elixir was very challenging to learn.

Accomplishments that we're proud of

Despite CSS being an unmitigated disaster to work with, the GUI is very well designed and nice to use.

What we learned

We learned how to use Phoenix, Elixir, and Ecto.

What's next for Group2Meet

We need to actually finish the When2meet part of our web app and connect it to meeting creation. We also need to show the user a list of the groups that they are in.
",https://github.com/JMS55/group2meet,,"","phoenix, elixir, ecto, tailwind",Justin,Hudis,justin.hudis@gmail.com,,Yes,"University of Maryland, College Park","","","GitHub continues to be useful. Despite not using it whatsoever, we had a great experience with MongoDB.",No,University of Maryland - College Park,1,Jasmine,Schweitzer,jsch@terpmail.umd.edu
Domicilium,https://bitcamp2023.devpost.com/submissions/403814-domicilium,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:08:15,"Inspiration

Immigration is already an incredibly tough and challenging process, it doesn't have to be made harder by the complexity of immigration policies and the difficulty of finding the right place to make your new home.
As a first generation immigrant, I've always heard stories about the difficulty of dropping everything you know and have to go to a country you know nothing about. Leveraging the power of web technologies I wanted to make an accessible interface for immigrants to figure out which country is the best fit for their new home.

What it does

Our web-app aggregates data from various humanitarian and government sources to present a comprehensive map of common destination countries for migration. It provides those in the process of migrating with information about the quality of life in the country they're moving to, the cost of living, cost of rent, and additional information about who ends up moving there. We also have future plans to add information about country specific immigration policy.

How we built it

Built on top of Deck.gl it uses an Open Source fork of MapBox to help visually render the quality of life scores for countries across the globe. The data itself is sourced from UN sources, the International Organization for Migration, and Numbeo for cost of living estimates.

The data itself had to be processed independently using Pandas and Python in order to get all the information into a consistent format.

Challenges we ran into

The original plan for the project was to have immigration policies for each country available, however that ended up increasing the complexity of the project to the point where we would have been unable to complete it. Each country has its own immigration policy, which sometime may depend on the country that the person is originating from. While we do have plans to add this functionality in the future, it was too complex to add in the time we had available.

Accomplishments that we're proud of

I like how it looks! I was able to get most of the information I wanted to show displaying in a way that was both accessible and easy to read.

What we learned

Deck.GL is an extremely powerful visualization tool, we could definitely leverage it to make even more complex and thorough visualizations in the future. I also learned that there is a lot more public datasets available than I had originally thought

What's next for Domicilium

We want to leverage GPT-4 to help process the immigration policy from countries around the world to make that information simple and accessible for all migrants as well.
","",,"Bloomberg - Most Philanthropic Hack , Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp","react, typescript, python, pandas, deck.gl, mapbox",Victor,N,victorvnovichkov@gmail.com,,No,"University of Maryland, College Park","","",I was able to learn a lot about Deck.GL which is a map visualization library in typescript/javascript.,Yes,University of Maryland - College Park,0
My-Fitterp-Pal,"",Draft,Pending,Project overview,04/09/2023 03:11:43,"","",,"","",Justin,Pratama,jcwpratama@gmail.com,,"","","","","","",University of Maryland - College Park,0
TerpStrong,"",Draft,Pending,Additional info,04/09/2023 03:44:43,"Inspiration

As fitness enthusiasts and University of Maryland students, Chris, Sam, Andrew, and Matthew were passionate about creating an app that could inspire and motivate fellow Terps to reach their fitness goals. They noticed that many students struggled to navigate the gym and lacked a clear understanding of how to properly exercise. TerpStrong was born out of the desire to make fitness accessible and achievable for all.

What it does

TerpStrong is an all-in-one gym app that provides users with workout information and guides, as well as a logging feature to track progress. It delivers a seamless experience, guiding users through exercises step-by-step and logging their progress so they can see their improvements over time.

How we built it

We built TerpStrong using React Native for the frontend, and Node.js and Firebase for the backend. We also integrated various APIs for workout data and incorporated user feedback to continuously improve the app.

Challenges we ran into

One of the biggest challenges we faced was creating a user-friendly interface that was easy to navigate, yet robust enough to provide all the necessary information. We also struggled with integrating multiple APIs and ensuring that the app was scalable and could handle a large user base.

Accomplishments that we're proud of

We are proud to have created an app that has the potential to positively impact the lives of University of Maryland students. We are also proud of the user feedback we received, which helped us to continuously improve and enhance the app.

What we learned

Throughout the development process, we learned the importance of collaboration, user feedback, and iteration. We also learned valuable technical skills in React Native and Node.js, which will be useful in future projects.

What's next for TerpStrong

We plan to continue to enhance the app's features and user experience based on feedback from our users. Our ultimate goal is to expand TerpStrong beyond the University of Maryland and make it accessible to fitness enthusiasts everywhere.
","",,"Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp","react, javascript, cockroachdb, express.js, bootstrap, html5, css3, node.js, npm",Quan,Ha,haminhquan3001@gmail.com,,Yes,University of Maryland - College Park,"","Github, VSCode, CockroachDB, React","As a team, we wanted to integrate our application with one of the sponsors. We knew our app would be good with a DB, therefore we decided to explore how to use CockroachDB, which comes with learning SQL and also client-server management. It was a challenge at first but Adryan from Cockroach DB was a great help in helping us overcome roadblocks.",Yes,University of Maryland - College Park,3,Matthew Ray,Lee,matthewraylee@gmail.com,Samuel,Kosasih,samadrianko@gmail.com,Andrew,Liu,aliu1213@terpmail.umd.edu
Grover’s Algorithm for Graph Coloring Challenge,https://bitcamp2023.devpost.com/submissions/403840-grover-s-algorithm-for-graph-coloring-challenge,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:46:14,"Inspiration

https://docs.google.com/document/d/1l1Vv3XQybGYYo7UTSTt_4HbMVdQIIoB3KlpEgSSnlG4/edit#

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Grover’s Algorithm for Graph Coloring Challenge
",https://github.com/tianchuxie/bitcamp2023,,Advanced Quantum Track - Bitcamp,"python, qiskit",Qingqing,Song,qs2097@nyu.edu,,Yes,New York University,"","","Wonderful, great learning experience in New Technology",Yes,New York University,1,Tianchu,Xie,tx675@nyu.edu
WakeMe App,"",Draft,Pending,Project overview,04/09/2023 03:48:34,"","",,"","",Nandini,Venkatesh,nvenkate@terpmail.umd.edu,,"","","","","","",University of Maryland - University College,1,Radhika,Patel,rpatel07@terpmail.umd.edu
Egg,https://bitcamp2023.devpost.com/submissions/403843-egg,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:49:25,"Inspiration

We weren’t too sure what we wanted to do this year, so we considered doing nothing at all. However, once we saw Fannie Mae’s task of creating an algorithm to generate optimal pools that have the most value, we became interested in exploring this territory. Grabbing on to this year’s theme of “Find Your Frontier”, we recognized the potential of utilizing an algorithm to optimize the selection of loans. We saw this as a new frontier for us to push the boundaries of what is possible in the world of finance.

What it does

The algorithm separates the loans into categories consisting of their class, maturity date, and loan term. Then, we traverse each category and generate a dictionary of states with their corresponding loans in the category. Here comes the hurdle (hard part!)

So, we implemented a slightly better greedy algorithm by strategically adding and removing loans while also considering their state percentage.

In the end, we generated high value pools of loans that meet the criteria of the best class possible.

How we built it

We used Python and related Python libraries like pandas. First, we preprocessed the data by scanning through and labeling which class each loan would qualify for. This step dropped more than half of the loans out of consideration. Then, we implemented our algorithm to create the pools.

Challenges we ran into

We faced 2 biggest challenges.


The first of which was our misunderstanding of the dataset where we read the property type instead of the state, causing a 6 hour setback. I know, we really messed up.
Secondly, we ran into the same problem that others had: figuring out the algorithm. While this challenge was proposed as a Knapsack algorithm, we couldn’t think of a way to modify a Knapsack algorithm to fit this problem because of the uniqueness of the state percentages. So, we ended up choosing a modified greedy approach.


Accomplishments that we're proud of

Even though we were setback and very tempted to quit. We persevered and implemented our own modified greedy algorithm! Moreover, our time at Bitcamp has allowed us to meet two amazing mentors at Fannie Mae, Pavan Josyula and Peter Thaggard. 

What we learned

First off, we learned what the Knapsack algorithm was and practiced a bit of dynamic programming, also learning about the power of Python. Lastly, and most importantly we learned how to apply an algorithmic approach to tackle practical challenges with real-world datasets.

What's next for Egg

While we’ve currently implemented a modified greedy algorithm, we’d like to continue exploring and researching how we can continue to improve our solution. In addition, we’d like to look into how and what other algorithms could be modified and used to create potentially more effective and efficient solutions. In particular, we’d like to look further into the knapsack algorithm and its many variations.
",https://github.com/pillious/Bitcamp2023,,Fannie Mae - Don’t Put All Your Eggs in One Basket,"python, pandas",Tim-Vuong,Vuong,timvuong13@gmail.com,,Yes,"University of Maryland, College Park","","",GitHub was great for collaboration!,Yes,University of Maryland - College Park,3,Andrew,Lee,andrewzhlee@gmail.com,Sophie,Tsai,sophietsai31@gmail.com,Tyson,Cheung,cheungtyson@gmail.com
StudyBrew,"",Draft,Pending,Project overview,04/09/2023 03:56:11,"","",,"","",Matthew,Liu,mliu218@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,3,Adam,Soomro,redrybacon@gmail.com,Eric,Xie,exie@terpmail.umd.edu,Kieran,K,kierank.pc@gmail.com
Malware Mayhem!,"",Draft,Pending,Additional info,04/09/2023 03:56:34,"Inspiration

We were inspired by the malware analysis class at our school.  The field of malware analysis can be very daunting. We had a lot of fun taking this class and hope to make this fiend more accessible for others.

What it does

This is a web application designed to challenge people on their static analysis skills. Users are able to upload potentially malicious files and review key features of the file to determine whether it is malicious or benign. After making their choice users can even review some malware analysis knowledge .

How we built it

This application is built with a Flutter front end and a Flask back end. We used the vt-py package to access the VirusTotal API for the malware sample summaries.

Challenges we ran into

We ran into challenges with formatting the data obtained from the VirusTotal API in a way that works well with how we wanted to display the information in Flutter.

Accomplishments that we're proud of

We are proud of our prototype. We were able to include most of the original features we planed, and a few additional bonus features.

What we learned

We learned a lot about REST APIs and creating HTTP requests.

What's next for Malware Mayhem!

These are the features we would like to add:


Point system for correct answers
 Host the web app online
Include a database to reduce API calls
Add tailored feedback for malware samples
Include more malware information

","",,"Cipher Tech - Best Digital Forensics Hack, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","flask, python, dart, flutter, virustotal, vt-py",Paisley,Code,paisleyvc@gmail.com,,Yes,University of Maryland Baltimore County,"","","While we did not use any sponsored tech (besides GitHub), we appreciate that the sponsors could come out and support this event!",Yes,University of Maryland - Baltimore County,1,Brianna,Turgott,briturgott@gmail.com
Untitled,"",Draft,Pending,Manage team,04/09/2023 04:06:17,"","",,"","",Amanuel,Seifu,aseifu@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Gridlock,"",Draft,Pending,Project overview,04/09/2023 04:08:34,"","",,"","",Scott,Chen,chen7772016@outlook.com,,"","","","","","",University of Maryland - College Park,1,Advait,Vartak,advait.vartak14@gmail.com
Credit First,"",Draft,Pending,Project overview,04/09/2023 04:16:50,"","",,"","",Emily,Li,liemily.md@gmail.com,,"","","","","","",University of Maryland - College Park,0
TouchToneAI,"",Draft,Pending,Project details,04/09/2023 04:17:44,"Inspiration

There are approximately 39,200,000 people in the world who have the lack of vision

What it does

This application generates a random word in braille and outputs the word via audio speech

How we built it

To implement an app of this sort, we started off with an ML model that uses a database filled with hundreds of images that represent letters of the alphabet.

Challenges we ran into

-dataset's picture were visibly inaccurate 
-deciding between jupyter notebook and google colab
-accuracy of model
-not being able to implement the practicality aspect

Accomplishments that we're proud of

-fully deployable machine learning model
-learned and are fully able to implement a scanner and front end ui experience

What we learned

-tenserflow, python, basic machine learning

What's next for TouchToneAI

-updating practicality
-creating ui as well as scanner
","",,"","python, tenserflow, pandas, numpy",Vahin,Palle,vahin.palle@gmail.com,,"","","","","","","",1,Asrith,Biradavolu,asrithb@terpmail.umd.edu
Expend Together,"",Draft,Pending,Additional info,04/09/2023 04:23:15,"Inspiration

Banking apps have a feature where you can only keep track of your income and spending. You can only see another person's income or spending if you have someone under your name for your account. If you wanted to see how your family or friends are doing financially it would be difficult to do so since chances are almost everyone will have different banks from each other. This is where our app comes in so that your group of close friends and families can keep track of how everyone is doing financially.

What it does

User's are able to view, in realtime, income and expenditures of themselves and their close group of friends and/or families. See who is saving the most or spending the most with our app to keep track of your close ones' financial situations.

How we built it

SwiftUI was used to build our IOS application. SwiftUI brings a pleasing to the eye view of their group's spending habits and income. Firebase was used to store a user's data including expenses and income to provide the user with a realtime view of their data. Plaid API was used to connect a user's bank account so that our app can securely retrieve their bank information to display to a user.  

Challenges we ran into

Plaid gave us a lot of trouble as we were not sure on how to fully connect a user's bank account to our app. It required us to have some kind of server to be a middle man in securely connecting our app to a user's bank. We got the initial connection working, but retrieving data was proven difficult.

SwiftUI with Firebase proved difficult to implement together for realtime data viewing. One thing that was very troubling was how to have our users be able to see live changes in their expenditures and incomes when there was a changed. Despite these challenges we were able to implement most of our realtime data viewing goals.

Accomplishments that we're proud of


having users be able to view their expenditures and income in realtime
a clean UI for the user's experience
a data base to keep all of the user's data
some implementation of Plaid API that allows us to connect a user's bank to our app
## What we learned
Securely connecting to a user's bank account to get their information is tough but is doable with more time
Building an IOS in SwiftUI that has a clean UI and has a good user experience
Using Firebase to present users with realtime data viewing
## What's next for Expend Together
Fully implement realtime data viewing for all parts of our app
Implementing more charts and graphs for our users
Be able to join more groups and add group members
Fully connect a user's bank account to our app for better data transactions

","",,"Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp","swift, firebase, plaid, github, git",Dalton,Pang,dspangp@gmail.com,,Yes,University of Maryland,"","GitHub, SwiftUI, Plaid, Firebase","We tried using GitHub for version control and for everyone being able to work on a different feature with branching, but it was proven difficult to merge all of works together because of conflicts and other errors. We know the importance of git as it is a very powerful and important tool to know and use, so this brought us more experiences working with it.

SwiftUI was used to build all of our project. Along with Xcode, it is very seamless to go from code to a working app that can be put right on your phone. The simulator Xcode provides and its model view viewmodel (MVVM) model of building applications helped us immensely in the building of our app.

Plaid was an API that we used to connect a user's data from any bank to our application. We weren't able to get this fully working, but we were able to establish a connection between our app and a bank with the user's data. This was very troubling because we had no clue how to obtain some of the resources to run this API correctly. One thing we needed as some type of server and we had no idea where to go from there. 

Lastly we used firebase to store all our user's data. This was very helpful in using the concept realtime data to present our user's with the data about their banking information. Using firebase's API and SDK was not too difficult to use. One problem we had was with asynchronous calls to the database which forced us to do some workarounds to present our user's with realtime data.",Yes,University of Maryland - College Park,1,Timothy,Lee,timothy.aram.lee@gmail.com
paibot,"",Draft,Pending,Project details,04/09/2023 04:50:26,"Inspiration

What if payment systems can be brought into discord servers? Can do everything within Discord.

What it does

Discord server members can issue commands to the bot to create payment transactions to other members in the server. Splitting group cost calculations 

How we built it

Bringing the next generation of payments into Discord for gamers and ____, we used [Capital One's Hackathon]API(http://api.nessieisreal.com/) to bring a reimagined online payment integration using a Discord bot. We used CockroachDB for scalability, enabling usability for servers of all sizes, to survive the harshest conditions and thrive everywhere.

Challenges we ran into


Figuring out the Capital One API nitpicky requirements for request payloads and hoping to not get 404 response codes
Understanding how CockroachDB insert records and performing queries with SQLAlchemy
*


Accomplishments that we're proud of


Learning on the fly
## What we learned

## What's next for paibot
including other payment methodology including cryptocurrency and handling different currency transaction
We want to expand payments to more than just a transaction, but also a way to gift people 

","",,"","python, cockroachdb, discord.py, capitalonehackathonapi, discord",Jessica,Lee,jlee1290@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,2,Sherry,Liang,sliang01@terpmail.umd.edu,Eric,Yi,ericyi2001@gmail.com
Sidewalk Optimizer,"",Draft,Pending,Project details,04/09/2023 04:59:41,"Inspiration

When I walk on campus, especially early in the morning, I always have to take a long route to get from Point A to B because the fields are wet and muddy from rain and dew.  This ends up eating away from the time I get to get ready, eat breakfast, or study.  Recently, when MIT and NYU launched Tile2Net, a program that aims to identify sidewalks in urban environments, I realized how little we know about sidewalks.

What it does

This project takes in a standard .kml file from Google Maps that holds Points of Interest (POI's).  These POI's are then used to create edges between them, with the cost being distance between the points.  Using graph algorithms like Dijkstra's, an efficient graph is created that touches all nodes, but still optimizes travel times.  The final graph is then exported back into a .kml file to be displayed on Google.

How we built it

Using Jupyter Notebooks and packages like networkx, pandas, and matplotlib, the data was processed, transformed and mapped.

Challenges we ran into


One challenge was time complexity, as there were so many nodes and edges to keep track of
Another challenge was exporting the data back as kml, because of file requirements
Another challenge involved determining adequate walking paths, to save distance but decrease travel time


Accomplishments that we're proud of


Finishing the project and the kml files actually being displayed on Google Maps


What we learned

From this experience I have learned about


Packages such as Pandas, NetworkX, Beautiful Soup, and argparse
Tools such as GitHub and Jupyter Notebooks (and Google Maps)
Applications of Graphs and Dijkstra’s Algorithm
How much I can get done in 1 weekend!


What's next for Sidewalk Optimizer


Incorporate elevation into the distance weight and make a 2-costed path to account for traveling uphill vs. downhill
Use Tile2Net to access current sidewalk place and evaluate how much sidewalk aligns with the optimized graph
Use ML to find the right balance between total length and travel times between any 2 nodes
Factor in foot traffic at different times of the day and popular spots to be

","https://github.com/Metrix745/exploreMaps, https://www.google.com/maps/d/edit?mid=1dM0kZ6s7ZrdH-AC-Kn_WWqgw7zfBVi4&usp=sharing",,"","python, github, pandas, networkx, matplotlib, google-maps, beautiful-soup, xml",Nicholas,Harrell,metrix745@gmail.com,,"","","","","","",University of Maryland - Baltimore County,0
Heart Disease Prediction Using Logistic Regression,"",Draft,Pending,Project overview,04/09/2023 05:02:58,"","",,"","",Vibhu,Singh,vibhu307@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,3,KUSHAGRA,MEHTA,kushagra.mehta@gmail.com,Jai,Bobal,bobaljai@gmail.com,Shashank Pratap,Singh,shashanksp04@gmail.com
Terra-PIN,"",Draft,Pending,Project overview,04/09/2023 05:08:49,"","",,"","",Sahit,Kadthala,kadthala16@gmail.com,,"","","","","","",University of Maryland - College Park,3,Saimadhav,Sakhamuri,ssakhamu@terpmail.umd.edu,adithyako,,adithya.ko@gmail.com,Aaron,Chen,achen4928@gmail.com
