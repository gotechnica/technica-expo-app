Project Title,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Opt-In Prizes,Built With,Submitter First Name,Submitter Last Name,Submitter Email,Notes,Will You Be Present To Demo In Person On Sunday? (You Should Only Select No If You Cannot Make It In Person Due To Religious Obligations Related To Easter Sunday),List All Of The Universities Or Schools  That Your Team Members Currently Attend.,List All Of The Domain Names Your Team Has Registered With Domain.Com During This Hackathon.,"Share Feedback About Any Of The Technology You Interacted With At This Hackathon. Make Sure You Mention What Tech You're Reviewing (E.G. Twilio, Git Hub, De So, Etc.).",Tell Us About Your Technology Experience This Weekend.,Capital One Is Looking To Reach Out To Teams With Outstanding Projects To Potentially Highlight Their Work.,Team Colleges/Universities,Additional Team Member Count,Team Member 1 First Name,Team Member 1 Last Name,Team Member 1 Email,...
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:38:34,"","",,"","",Anish,Babu,ababu12@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,3,Roshini,Saravanan,rsaravan@terpmail.umd.edu,Karthick,Sankar,ksankar1@terpmail.umd.edu,Aarti,Itikirala,aitikira@terpmail.umd.edu
Brisbane: Discover Your Data,https://bitcamp2023.devpost.com/submissions/403163-brisbane-discover-your-data,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 19:49:17,"Inspiration

Currently, LLMs like ChatGPT seem to answer almost anything with great accuracy. However, what if you were working on a large project, and wanted help with something? What if you wanted to better understand a large amount of financial data in a more structured way?
Thus, we were inspired to create a more smart way to harness the full power of LLMs for more specialized tasks

What it does

Brisbane is a desktop application that allows users to upload a variety of things, including text files, Word documents, PowerPoint slides, PDFs, and code repositories of any programming language. After uploading repositories, users can chat with our improved AI and learn things about their files. For example, one could ask about a certain method that is written in a large code base. Or patterns in a large amount of Form 10-K financial data. After a query, the AI will not only answer but give sources that users can click on to instantly access.

How we built it

We first vector embeddings of entire directories, which are stored in a database. These embeddings can be fed to LLMs, such as OpenAI's GPT-3.5, to teach them to better understand information from these files. Smart use of prompt engineering also allowed us to teach GPT to keep track of what file and even page it was extracting information from when answering. This solves another huge problem of current GPT interfaces: it can be hard to validate and contextualize the answers it gives.

We built the front end for our desktop application using Electron. We created a Rest API in Python using Flask and used it to serve outputs from our language processing modules. The use of these technologies allows us to easily incorporate sharing and user collaboration in the future.

Challenges we ran into

As a group of first and second-year students, this was our first time working with each other on a project from start to end. None of us had significant experience building desktop applications or designing effective user interfaces. This project involved a lot of hours googling to learn more about vector embeddings, implementing APIs, frontend development, and more. Though it was tough, we found satisfaction in tackling small goals and eventually ended up with an application we are all proud of and plan to continue to use and develop more even after Bitcamp.

Accomplishments that we're proud of

We were able to create embeddings for a variety of different file types and platforms, more than we initially thought during the planning stage. In addition, the use of prompt engineering to better teach the model allowed us to shape its output and utility even more.

What we learned

We have collectively learned a lot through this hackathon. By attending workshops, we learned a lot about research opportunities, machine learning, and more. Through intensive googling, we have learned a lot about front-end development, natural language processing, and desktop application development. Above all, we learned that AI is incredibly capable, and it is possible to shape it for a plethora of applications.

What's next for Brisbane: Discover Your Data

We want to distribute this technology as a desktop app to allow others to use it.
Also, we hope to implement collaboration and integration with Google Drive or OneDrive. This will allow Brisbane to be used by small organizations and companies to keep track of their file systems.

Applications

Advanced file search with citations has several notable applications: 

Finance

Lots of financial applications require implicit or conventional knowledge - Brisbane can access large amounts of conventional or market knowledge and cross-apply them to help users figure out what new social, political, and financial events have happened, or how those events might affect markets.
Also, since finance applications require transparency, Brisbane’s ability to cite where it got its knowledge will increase the number of ways in which it can be used.

Real Estate

Brisbane can analyze housing markets or even particular properties to find useful trends in housing and real estate for individual buyers. Giving Brisbane access to public national data reports lets it provide even more informed advice to users, and turns it into an industry tool to produce housing/real estate market data.

Code Bases

Code Navigation: Brisbane can help developers navigate complex codebases by providing semantic search capabilities, making it easier to locate specific functions, classes, or variables. It could be a fantastic pair programmer, with deep useful knowledge of how the codebase is structured.
",https://github.com/magikarp01/BrisbaneGPT,,"CoStar Group - Best Use of Real Estate Data, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, People's Choice Hack - Bitcamp, Capital One - Best Financial Hack","python, electron, javascript, flask, openai, gpt, chatgpt",Rishi Keshav,Pradeep,keshav.r.pradeep@gmail.com,,Yes,"University of Maryland, College Park","","",We had so much fun resolving git conflicts.,Yes,University of Maryland - College Park,3,Neel,Jay,neeljay03@gmail.com,Phillip,Guo,philliphguo@gmail.com,Aaquib,Syed,aaquibahm@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:54:05,"","",,"","",Neel,Jay,neeljay03@gmail.com,,"","","","","","","",0
Untitled,"",Draft,Pending,Manage team,04/07/2023 19:59:53,"","",,"","",Ven,Gostar,gostarfr@gmail.com,,"","","","","","",University of Maryland - College Park,0
Savings app,https://bitcamp2023.devpost.com/submissions/403166-savings-app,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 20:02:32,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Savings app

People are often confused about how much money they should save depending on their finances, expenses, and what they are saving money for. This app will solve that problem by using an algorithm to decide how much money they should save based on those parameters
",https://github.com/Mikebrown4768/bitcampProjectsavingsapp,,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp",react,Michael,Brown,mbrown66@terpmail.umd.edu,,Yes,University of maryland,"","",We loved the experience. This is our first hackathon,Yes,University of Maryland - College Park,1,Ven,Gostar,gostarfr@gmail.com
Housing Price Map,https://bitcamp2023.devpost.com/submissions/403169-housing-price-map,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 20:11:05,"Inspiration

We wanted to tackle the CoStar Group Real Estate Data challenge, because we felt that through studying housing market data, we could potentially build a powerfully socially impactful app at Bitcamp.

What it does

Our app's CockroachDB instance holds around 20000 instances of housing data from the state of California. We've built a web interface for our users to query the average cost of a house within an specific location. The app intuitively visualizes the user's query parameters in real time through the use of map overlays, and heat maps.

How we built it

We wanted to leverage the most exciting technologies being provided to us at BitCamp, so naturally we gravitated towards a Next.js and CockroachDB stack hosted on Microsoft Azure. 
Much of our time at BitCamp was spent on making our CI/CD process as smooth as possible. Once we had built our Azure DevOps pipeline, we focused on implementing the core functionality of our app in an pseudo-Agile environment. Near the end of Bitcamp, as we become more satisfied with our app's functionality, we began to polish the UI/UX of our web app.

Challenges we ran into

We had much to learn about DevOps with Azure. The majority of our time was spent reading documentation to build our CI/CD pipeline. 
We also had trouble with the specifics of implementing our REST API. And finally, we had to all brush up on our PostgreSQL to create the appropriate queries for our CockroachDB instance.
However, I think our greatest challenges were also the most memorable aspects of Bitcamp. Especially after we'd solved them,

Accomplishments that we're proud of

We successfully delivered our MVP without too many hitches, and with much time to spare.

What we learned

We took a deep dive into Microsoft Cloud, and came out much more well-versed in DevOps. We also learned the power of Next.js as a Front-end framework, especially in its ability to facilitate API calls and routing.

What's next for Housing Price Map

The Housing Price Map project has much potential. Chiefly, with better datasets, more overlays can be generated. Additionally, we really wanted to implement a machine learning algorithm into our project (XGBoost), but a lack of labeled data had stopped us in our tracks.

Much improvement can be made in our app's UX. Although we overall are happy with our delivered product's features, we feel that our app would benefit from a long term development cycle.
","https://bitcamp-app.azurewebsites.net/, https://github.com/johnma02/bitcamp-housing",,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, CoStar Group - Best Use of Real Estate Data, Cockroach Labs - Best Use of CockroachDB Serverless, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp","typescript, next.js, cockroachdb, azure, github, google-maps, react-bootstrap",Jan,Ahmed,janahmed@udel.edu,,Yes,University of Delaware,"","",wifi slow,Yes,University of Delaware,3,Sanjay,Siddharth,sanjaysiddharthcv@gmail.com,Makayla,Pham,makpham@udel.edu,Jonathan,Ma,ma.jonathan02@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 20:11:57,"","",,"","",Cameron M.C.,Thacker,cthacker@udel.edu,,"","","","","","",University of Delaware,0
untitled,"",Draft,Pending,Project overview,04/07/2023 20:22:15,"","",,"","",david-umd,Diaz,david0@umd.edu,,"","","","","","",University of Maryland - College Park,0
MusePay,"",Draft,Pending,Project overview,04/07/2023 20:33:51,"

MusePay: Simple and secure spending and lending within social groups and families.

A social hub for friends and family to monitor finance, a simple and secure platform for lending and spending, and a non-destructive companion to one’s buying experience. Spending other people's money has never been easier and more secure.

How it Works

Sending Muse Hashes


Create an account on our platform
Connect your bank/debit card as a funding source
Begin sharing Muse Hashes! Set merchant locks (or not) and spending limits, and have a unique hash generated (keep it a secret between you and your friend!) that acts as a key to a MusePay Virtual Credit Card.



Using Muse Hashes


Install our Google Chrome Extension
Copy your hash to your clipboard
When you are ready to pay, simply right-click, and press Pay With Muse Hash.
 


Inspiration

Driven by the want to create a finance-related project from our collective interest in fintech, the idea came about while musing over (get it) the technologies we know how to use and ones that we want to learn and would be cool to use. 

Tech Stack & Development Process


We began brainstorming ideas and creating diagrams using Figma. Using Figma's FigJam application, we were able to collaborate and quickly see each other's ideas and bounce them off of each other.





Once we came up with an idea, FigJam was again our software of choice to create a general flowchart and list of technologies we needed to use and connect together.

We then used Figma to design our UI and the components that we wanted to be made.

The frontend was built entirely off of React, CSS, and Bootstrap, written with Typescript. 
Our user login/authentication system is powered by Google's Firebase platform.
We stored our users' data using SQL on CockroachDB Serverless. Their platform was very easy for us to learn to use (as complete SQL novices) and it was quick for us to deploy and utilize, as well as debug. The performance of the database also fit our needs well.

Our application's server-side backend was driven by NodeJS.
We chose Express as our API framework of choice because of our general familiarity and its simplicity, as well as decent performance.
Deciding on what financial platforms we would build our project on was a big challenge. We considered many different options, each with its own benefits. Some platforms, such as Plaid, provided a simple and convenient way to get a user's banking data, but it didn't have options for things such as virtual credit cards. We decided instead to opt for Synapse. Synapse had a lot of benefits that was perfect for our use case and our possible future use cases: Virtual Cards, Credit/Loans, Banking solutions, and Crypto solutions. We currently only use Synapse for its VCCs and banking solutions, but in the future we plan on using it for credit and loans, as well as cryptocurrency.
The final part of our project is the Chrome extension, which builds upon the Chrome Web API to provide features that are less intrusive but still powerful.



Features


Create merchant locked and spend restricted codes that are tied to individual virtual credit cards
Link your bank account/debit card as a funding source
Create a private group with your friends and family to more easily share hashes and share spending
See all your spending in easy to understand visualizations
Spend hashes in 2 clicks with the Chrome Extension


Challenges we ran into

Bitcamp was an incredible experience for our team and for some of us our first-ever in-person hackathon. We had to deal with fatigue from working for so long, surviving on only a couple hours (or less) of sleep. In terms of the development process, it was very rough. When creating our authentication/login system, we used the Auth0 service first, but we ran into issues with cross-domain sessions and managing a react app and API on a single Heroku instance. This led to us creating an authorization system on Firebase instead.

When working with Syanpse, we ran into issues with their sandbox environment, documentation that was not as detailed as it needed to be, and an API wrapper library that only covered half of the API. We had to figure out RSA PKCS1 encryption for credit card information and to pull the API requests from a Postman collection that they had, but even in that collection some of the requests were not usable directly and required a lot of debugging. 

Another challenge we faced was CORS, or cross-origin resource sharing. Most of the time, you can only access APIs and other web resources from the same domain as the request origin, but because we had to deploy our API separately from our main web application, we had to figure out how to allow CORS to these other domains. 

The overall most challenging part was figuring out how to structure and connect all parts of our multi-faceted application together and keep it all organized. We had to create data structures for our databases and create class structures that would be most efficient and organized. Classes like our Database manager and Synapse manager were very complex with a ton of challenges faced in during their creation, but when we were able to get it all integrated properly, everything fell together perfectly.

What we learned

Nobody in our team has used SQL before, let alone a SQL database provider like CockroachDB before. We were able to fully learn how to use and deploy it very quickly, and now feel confident in utilizing this technology in all of our future projects.

What's next for MusePay

Credit and Cryptocurrency are two big services that Synapse offers that we want to take advantage of. With their Credit Hub we would be able to create Pay in Installments Muses, Subscription Muses, Muses that can build credit, and Cryptocurrency based Muses.

View our FigJam Document Here

View our Figma Document Here
",https://github.com/matthewnanas/bitcamp22,,"","react, javascript, node.js, typescript, firebase, cockroach, sql, bootstrap, chrome, synapse, figma, figjam, express.js",Andy,Guo,info@aguo.dev,,"","","","","","","Stanford University, poolesville high school",3,Matthew,Nanas,matt0.bananas4@gmail.com,Adam,L,ghostlyvisuals@gmail.com,James,Xu,james@jamesxu.dev
Shared Spaces,https://bitcamp2023.devpost.com/submissions/403178-shared-spaces,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 20:42:18,"Inspiration

We have always been fascinated by the world of real estate and investing, but like many others, lacked the resources and capital to pursue it. Real estate, in particular, has always intrigued us as it is a stable asset that typically appreciates over time. However, the high cost of entry has always been a challenge.



Fortunately, we realized that by pooling our resources, a group of like-minded individuals could combine our collective capital to invest in real estate. This approach not only allows us to take advantage of real estate's stability and appreciation potential but also helps us to diversify our investment portfolios.



As we began exploring this avenue further, we found that there were many opportunities available to us, including rental properties, commercial buildings, and even land development projects. Each opportunity had its own set of risks and rewards, but the potential benefits were clear.

In conclusion, while real estate may seem out of reach for many individuals, it is possible to invest in this asset class by pooling our resources. By doing so, we can take advantage of the stability and appreciation potential of real estate, while also diversifying our portfolios and potentially generating significant returns over time.

What it does

We are proud to announce that we have built a platform that enables individuals to invest in real estate together. Our platform provides users with the opportunity to pool their resources and invest in a range of properties that suit their investment preferences.



Our platform is unique in that it suggests groups of people properties that they can invest in based on the total amount of capital shared between the group and the amount of risk they are willing to take. This ensures that each group invests in properties that align with their investment objectives and risk profile.

To further assist groups in their investment decisions, our platform provides crucial data such as the return on investment for the property and its long-term value. This data allows groups to make informed decisions and maximize their investment potential.

All profits generated from these investments are split between the group based on the amount they initially invested. This ensures that each individual is rewarded fairly for their contribution and encourages collaboration and teamwork.

Moreover, our platform also allows users to be part of multiple investing groups at the same time, providing flexibility and further diversification of their investment portfolio.

In summary, our platform has made real estate investing more accessible and collaborative. By bringing people together and providing valuable data and tools, we aim to help our users achieve their investment objectives and generate significant returns over time.

How we built it

Our platform is built using a combination of powerful technologies that allow us to provide users with unparalleled functionality and features.



On the front end, we used Flutter, a popular open-source mobile application development framework, to build a highly interactive and intuitive user interface. Flutter allowed us to incorporate advanced features that would not have been possible using other frameworks.



On the backend, we used Python, a high-level programming language, to build our predicting and suggesting algorithm that is used to suggest properties to groups. Python allowed us to build a highly efficient and scalable algorithm that can analyze large datasets and provide accurate recommendations to users.

To enable user authentication and alert users of potential investment opportunities, we used the Twilio API. This allowed us to send SMS notifications to users and ensure that they never miss an investment opportunity.

For data storage and access, we used CockroachDB, a cloud-native, distributed SQL database. CockroachDB provided us with a highly scalable and reliable database solution that can handle large amounts of data.



Finally, we connected the front and back ends using Flask, a popular Python web framework, and Dart, a client-optimized programming language used to build applications for iOS, Android, and the web. This allowed us to build a seamless and highly responsive platform that users can access from any device. 

Challenges we ran into

Our journey in building the real estate investment platform was not without its challenges. We faced several obstacles throughout the development process, but we overcame them through perseverance and collaboration.



One of the biggest challenges we faced was connecting the front end and back end of our platform. Flutter is a package used for designing the user interface, while Python allows users to perform computational algorithms. Connecting the two was a daunting task that required a lot of time and effort.

Another significant challenge we faced was retrieving data from publicly available sources. Building an algorithm for data-scraping that can bypass a bot test was a new experience for us, and it took time to develop a robust solution.



We also faced a challenge in developing our suggested algorithm and building a formula to compute the price of a real estate property in 10 years. As beginners in the field, fully understanding the complex factors that go into these algorithms was a challenge.

Despite these challenges, we persisted and worked together to overcome them. By leveraging our technical skills and market knowledge, we were able to create a functional platform that meets the needs of our users.



Our experience in building the platform taught us that every project comes with its own set of challenges, and it's essential to remain adaptable and creative in finding solutions. By working collaboratively and leveraging each other's strengths, we were able to overcome these challenges and deliver a platform that we are proud of.

Accomplishments that we're proud of

We are thrilled to share the accomplishments that we are proud of while building our real estate investment platform.

One of our key achievements is successfully connecting the front end and back end of our platform. This allowed us to exchange data between the two and perform complex computations that form the basis of our platform. This connection also enabled us to retrieve data from our databases and display it on the app, providing users with up-to-date and accurate information.



Another achievement that we are proud of is developing an algorithm that predicts the price of a property. This algorithm utilizes a range of data points and metrics to provide users with accurate predictions of the value of a property. This feature is crucial in helping users make informed investment decisions.

Additionally, we developed an algorithm that suggests properties to groups based on their investment preferences and risk profile. This algorithm analyzes large datasets and provides users with a range of investment options that align with their investment objectives.



These accomplishments are a testament to the hard work and dedication of our team. By building a platform that utilizes cutting-edge technologies and advanced algorithms, we aim to provide users with a seamless and intuitive real estate investment experience that helps them achieve their investment goals.

What we learned

Our journey in building the real estate investment platform has been a tremendous learning experience for us. While we gained significant technical skills like connecting the front end and back end, we also learned a lot about the real estate market and what goes into understanding a good investment.

Through research and analysis, we now have a clearer understanding of how the real estate market works and what factors make a good investment. We learned that it's not just about the property itself, but also its location, market trends, and other economic factors that can impact its value over time.

Though we do not claim to be experts in the field, we are confident that we have built a platform that helps users get started in real estate investing. We have designed our platform to provide users with relevant data and insights, enabling them to make informed investment decisions.

Overall, our experience in building the platform has taught us that creating a successful product requires a balance of technical skills, market knowledge, and a deep understanding of users' needs. We will continue to learn, grow, and improve our platform to ensure that it meets the needs of our users and provides them with a seamless real estate investment experience.



What's Next for Shared Spaces

As we continue to develop Shared Spaces, our main focus is on improving our algorithms to ensure that they provide accurate and reliable results and suggestions. While our current algorithms work well, we understand that there is always room for improvement, and we plan to invest more time and effort into researching and refining them.

Another key priority for us is expanding our platform's reach beyond Washington, DC, to cover the entire United States and eventually the world. By widening our scope, we can provide more opportunities for real estate investment to a broader user base and help empower more people to make informed investment decisions.

Ultimately, our goal is to provide a user-friendly platform that supports users in making smart investment decisions while also offering expert guidance and advice. We believe that by continuing to invest in our platform and improving our algorithms, we can continue to meet the evolving needs of our users and provide them with a valuable tool for real estate investment.
",https://github.com/aadesh18/bitcamp,,"Best Domain Name from Domain.com - Major League Hacking, CoStar Group - Best Use of Real Estate Data, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, People's Choice Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack, Best UI/UX Hack - Bitcamp","python, flutter, dart, cockroachdb, twilio, flask, api",Aryan,Agrawal,aryan527@terpmail.umd.edu,,Yes,University of Maryland (All team members),sharedspaces.tech,"","Capital One API - It was a very interesting API but I felt that the documentation was prepared hastily and some of the things were not explained clearly (for example, creating a new account for a user requires an account id in the request according to the body scheme but it doesn't work.)

Twilio - the Twilio API is very easy to use. It's just that it doesn't let me top up my balance using promo codes",Yes,University of Maryland - College Park,3,Rishabh,Chheda,rishabhchheda01@gmail.com,Aadesh,Kheria,kheriaaadesh@gmail.com,Agastya,Mukherjee,amukhs13@terpmail.umd.edu
Mortgage Knapsack Calculator,https://bitcamp2023.devpost.com/submissions/403181-mortgage-knapsack-calculator,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 21:08:54,"Inspiration

The knapsack algorithm is an intuitive solution to the query of which properties to choose.

What it does

It generates text files containing information on each loan an a given mortgage pool. 
The results are printed in this format: 
loan_id|upb|note_rate|borrower_fico|coborrower_fico|combined_fico|state|dti|ltv|maturity_date|loan_ter |property_type
Please inspect the outputted files using this guide

How we built it

We built this project in Java, using Replit to collaborate and Eclipse to edit.

Challenges we ran into

The hardest part of this challenge was managing the large data set we were given. We frequently ran out of available space on the heap and had runtime issues.

Accomplishments that we're proud of

Our code works as instructed by the Fannie Mae Challenge. Considering our group is freshmen computer science majors that are beginners, we are happy that we provided a concrete answer to the challenge.

What we learned

We learned about solving and implementing the knapsack algorithms; parsing, writing, and creating .txt files in java; utilizing RegEx expressions; managing large data sets.

What's next for Mortgage Knapsack Calculator

We would like to optimize our knapsack algorithm to be able to work on even larger data sets without running into any issues with memory management and runtime.
",https://drive.google.com/drive/folders/1Eb8EDx-rE6gkBjEU3PYAZ7b72KToklP8,https://youtu.be/er1I90R2coI,"CoStar Group - Best Use of Real Estate Data, Fannie Mae - Don’t Put All Your Eggs in One Basket","java, regexlib",Chetanya,Makkar,chetanyamakkar99@gmail.com,,No,University of Maryland,"",GitHub provided us the data for the Fannie Mae challenge. We appreciate the concise presentation it offered,We did not run into any technology problems with software or data provided by Bitcamp 2023.,Yes,University of Maryland - College Park,2,Sreenidhi,yaratha,yaratha@gmail.com,Charlie,Stevens,stevens1007031@gmail.com
namaka,https://bitcamp2023.devpost.com/submissions/403184-namaka,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 21:25:32,"namaka

Snapshot testing tool for Nix based on haumea
nix shell github:nix-community/namaka
namaka check # run checks
namaka review # review pending snapshots

Usage
Usage: namaka <COMMAND>

Commands:
  check   Wrapper around `nix flake check` to prepare snapshots for failed tests [aliases: c]
  review  Review pending snapshots and selectively accept or reject them [aliases: r]
  help    Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version

load

Type: { flake, dir?, ... } -> { ... }

Arguments:


flake : Path


Path to the Nix flake.


(optional) dir : String


Path to the testing directory relative to flake, defaults to tests.
  ${flake}/${dir} is passed to haumea.load's src option.

Wrapper around haumea.load to loads snapshot tests from a directory.
See tests for how the directory should be structured.
Ignore the _snapshots directory, as it is automatically generated by namaka.

The rest of the arguments are passed directory to haumea.load,
with the exception of src, which always gets overwritten (ignored).

Related Tools


Namaka is largely inspired by insta,
a snapshot testing tool for Rust.
Namaka is based on haumea, which also has some testing functionalities.

",https://github.com/nix-community/namaka,,"Best Bitcamp Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp","rust, nix",Ziqi,Yang,figsoda@pm.me,,Yes,UMD,"","GitHub, crates.io, lib.rs, docs.rs","GitHub is a great site for hosting open source software, and docs.rs is good for viewing documentation of Rust libraries.",Yes,University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/07/2023 21:34:14,"","",,"","",Nathan,Nussbaumer,nussbau65@gmail.com,,"","","","","","",University of Maryland - College Park,3,Nhat,Nguyen,doristrungvuong@gmail.com,Akash,Patil,akashspxp@gmail.com,Kyle,Geary,kgeary1@terpmail.umd.edu
FitFlow,https://bitcamp2023.devpost.com/submissions/403194-fitflow,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 21:58:19,"Inspiration

“As Computer Science majors who sometimes struggle to go to the gym due to our current mental state”, we know firsthand how important it is to have a personalized workout plan that caters to your unique needs. That's why we are excited to share with you the latest project that we have been working on - a website that offers a personalized workout recommendation experience like no other!

Are you tired of generic workout routines that don't take into account your specific needs? Do you struggle to find the motivation to work out when you're not feeling your best? Our website is here to help. By taking into account your current mood, sleep, heart rate, steps, water intake, and calories, we can recommend workouts that are tailored to your unique requirements.

But what sets us apart from other workout websites is our use of advanced technologies like Google authentication API, Google Fit API, and GPT API. By leveraging these tools, we can ensure that our recommendations are based on the most accurate and up-to-date vitals data available, and that our machine learning algorithm takes into account not only your physical state but also your emotional state.

Our easy-to-use interface makes it simple for you to access your custom-made workout plan with just a few clicks. Whether you're feeling down, stressed, or energized, our website has got you covered. Our goal is to help you achieve your fitness goals in a way that is both effective and enjoyable.

As Computer Science students at the University of Maryland, we know the importance of using technology to solve everyday problems, and that's exactly what we're doing with this project. Our website offers a unique combination of personalized recommendations and advanced machine-learning algorithms that will take your fitness journey to the next level.

So what are you waiting for? Say goodbye to generic workout routines and hello to a personalized fitness journey. Try our website today and take the first step towards achieving your fitness goals!

What it does

The project is a website that offers personalized workout recommendations based on the user's mood and vitals. It takes into account the user's sleep, heart rate, steps, water intake, and calories to recommend workouts that suit their unique requirements. The website uses Google's authentication API and Google Fit's API to gather data about the user's vitals, ensuring that the recommendations are tailored to their current physical state. By simply inputting their current mood, the user can access a custom-made workout plan that is designed to help them achieve their fitness goals. The website uses GPT API, an advanced machine learning algorithm that analyzes the user's mood and vitals to create a workout plan that's suited to their needs.

How we built it

The website was built using HTML, CSS, and JavaScript for front-end development and JavaScript for back-end development. To gather data about the user's vitals, the website uses Google authentication API and Google Fit API/Rest API. The Google authentication API provides a secure and easy way for the user to sign in and access their data, while the Google Fit API enables the website to gather the user's vitals data in real-time. The website uses GPT API, an advanced machine learning algorithm, to analyze the user's mood and vitals data and create a personalized workout plan that suits their needs. The front-end interface of the website is designed to be easy to use, allowing the user to quickly and easily access their custom-made workout plan with just a few clicks.

Challenges we ran into

One of the challenges that we ran into was integrating the GPT API, Google authentication API, and Google Fit API into the website. This is mainly because a lot of us were not experienced in the integration of an API within a website and that led to hours of debugging issues. We had to ensure that the data we were gathering was accurate and up-to-date and that we were using the API in a secure and efficient way. Another challenge was using JavaScript to integrate the front end and the back end of the project together. 

Accomplishments that we're proud of

We are proud of creating a personalized workout recommendation website that takes into account the user's mood and vitals data to create a custom-made workout plan.  Also, we were experimenting with JavaScript, which is a new language none of us were familiar with before. We were able to successfully integrate the Google authentication API and Google Fit API into the website, ensuring that the recommendations were based on accurate and up-to-date vitals data. Additionally, we successfully implemented the GPT API machine learning algorithm into the website, allowing us to create a personalized workout plan that suits the user's needs.

What we learned

Through this project, we learned how to integrate APIs into a website, preprocess and analyze data using machine learning algorithms, and create a user-friendly interface for a personalized workout recommendation system. We also gained valuable experience in project management, collaboration, and problem-solving. We also had to extract specific variables such as sleep time, heart rate, calorie intake, etc which was interesting because we needed to use real health variables to recommend a workout. 

What's next for FitFlow

In the future, we plan to expand the website's features to include more personalized recommendations, such as dietary suggestions based on the user's vitals data. Additionally, we will continue to improve the machine learning algorithm and user interface to ensure that FitFlow remains the best-personalized workout recommendation website available. We can also add step-by-step instructions for the exercises for the users to follow along and give the users images for them. 
",https://github.com/IshaanKalra2103/fitflow,https://www.youtube.com/watch?v=6k5t6zww7Z0,"Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp","javascript, css, html, google, rest-api, open-ai",Ansh,Tyagi,anshtyagi003@gmail.com,,No,University of Maryland,https://feelfitflow.netlify.app/,"","Github is a very useful website to use to store code, and we also used vscode to do our main HTML & CSS & JavaScript coding.",Yes,University of Maryland - College Park,3,ishaan,kalra,ishaankalra2004@gmail.com,Kabir,Grover,kgrover1@terpmail.umd.edu,Sohum,Belhe,sohumbel@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 22:09:02,"","",,"","",Sachin Kapoor,Saigal,ssaigal@umd.edu,,"","","","","","","",0
Untitled,"",Draft,Pending,Manage team,04/07/2023 22:30:43,"","",,"","",Kylie,Gong,kyliegong123@gmail.com,,"","","","","","",University of Maryland - College Park,3,Alstroemerys,,cutecocokitty@gmail.com,Waley-Wang,Wang,waley.wang.sun@gmail.com,Joanna,Zhao,jo.qzhao@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:17:38,"","",,"","",Tarun Krishna,Reddy,ktkreddy1999@gmail.com,,"","","","","","",University of Maryland - Baltimore County,0
guesser.ai,https://bitcamp2023.devpost.com/submissions/403206-guesser-ai,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 23:24:18,"Inspiration

The rise in OpenAI and Dalle-E 2

What it does

Assists deep learning models such as OpenAI to refine digitally generated images through a fun mobile app game

How we built it

Swift, Python, OpenAI

What's next for guesser.ai

Coming to Android very soon!
",https://github.com/knightowl247/Bitcamp2023,,"Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Gamification Hack - Bitcamp","swift, python, openai, api",Amy,Tran,amytran3406@gmail.com,,Yes,University of Maryland,"","","We developed our app in Swift and Python, using OpenAI to generate source images. Our final product has been uploaded on GitHub!",Yes,University of Maryland - College Park,1,William,Huang,huang.william6688@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:25:55,"","",,"","",Taha,Al Nufaili,talnufai@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
LUHQ,https://bitcamp2023.devpost.com/submissions/403210-luhq,Submitted (Gallery/Visible),Pending,Submit,04/07/2023 23:36:20,"
","https://www.figma.com/file/GafEqgSmiwtXBTcvais5wW/LUHQ?node-id=0%3A1&t=3kwx5E6296C4Q9yy-1, https://github.com/IFireGamer/LUHQ",,"People's Choice Hack - Bitcamp, Capital One - Best Financial Hack, Best UI/UX Hack - Bitcamp","figma, react, typescript, tailwind, css3, python, fastapi, qiskit",Jaden,Hou,jadenhou19@gmail.com,,Yes,"University of Maryland, Poolesville High School",N/A,N/A,N/A,Yes,"poolesville high school, Poolesville Highschool",3,James,Xu,james@jamesxu.dev,Andy,Guo,info@aguo.dev,Miguel,Ventura,miguelventura1123@gmail.com
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:49:25,"","",,"","",Joshua,Nguyen,jnguye17@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/07/2023 23:54:25,"","",,"","",Sourabh,Velaga,svelaga@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
SHELFie,https://bitcamp2023.devpost.com/submissions/403236-shelfie,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 01:32:29,"Our Story 💭

The story of Shelfie began with a shared experience among us team members and our respective families. We had all faced issues with produce and products nearing or past their expiration dates in their home fridges, and sometimes encountered products like mayonnaise being way past their expiries. Thus, we set out to create a solution that would help users keep track of the expiration dates of items in their fridge and reduce food waste.

Challenges we faced 🤒

We faced several challenges during development. First and foremost, we all considered ourselves beginners, having only been proficient in Java. However, throughout the course of bit.camp, we learned React and some TypeScript to accompany our web stack. Some other observable challenges included displaying the webcam feed on the website; integrating multiple APIs to allow for primitive image recognition; accurate, helpful recipe generation; and lastly, sleep.

But we overcame them 💅

Shelfie employs advanced image recognition techniques to accurately recognize produce and products with expiration dates. The reminder system, powered by CockroachDB, alerts users when a product is about to spoil or expire. The OpenAI-powered recipe recommendation system suggests recipes based on the ingredients in the fridge and the user's dietary preferences and needs.

What's next for Shelfie 🚀

Looking towards the future, we plan to continue improving and refining our product. By using higher-definition, more efficient image-processing techniques, we can more accurately read and analyze the barcode or product. Integrating GPT-4 or Hugging Face models will allow the software to suggest healthier alternatives to some of the products in the user's fridge. We also plan to integrate it with AI-speaking assistants for recipe retrieval.

Accomplishments that we're proud of 🤠

Learning about OpenCV and tensorflow; integrating Google Cloud Vision; CADing a demo; connecting to OpenAI; using APIs in general. ...and that we love UMD CS and the entire Bitcamp team!
",https://github.com/nicolasliuu/Shelfie/,,"Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Bloomberg - Most Philanthropic Hack ","openai, opencv, tensorflow, next.js, prisma, cockroachdb, onshape, typescript, tailwindcss, nextauth.js, trpc, google-cloud",Nicolas,Liu,nicolasliu18@gmail.com,,Yes,Johns Hopkins University,"","The workshop on CockroachDB, hosted by Aydrian, was very helpful. We used government data to train our model to suggest recipes based on the United States' population's average dietary needs and preferences.",Not too bad. High-tech s'mores experience was extremely invigorating. The RFID bracelets were cool.,Yes,Johns Hopkins University,1,Jonathan,Liu,jjliu2004@hotmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 01:32:39,"","",,"","",Jordan,Marry,jmarry@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
UMD Course Tracker,https://bitcamp2023.devpost.com/submissions/403255-umd-course-tracker,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 02:32:57,"Inspiration:
Our inspiration for creating this app came from our own experience as freshmen struggling to navigate the complicated process of selecting courses. It can be overwhelming and confusing to figure out which classes to take and how to plan out your four years at UMD. We knew that we weren't the only ones feeling this way and we wanted to create a solution that could help our fellow students.

We put our heads together and used our innovative skills to design an app that simplifies the course selection process. With our app, students can easily see all the available courses and choose the ones that interest them. We wanted to create something that could save students time and stress, and make the whole process a little bit easier.

At the end of the day, our inspiration comes from wanting to help our fellow UMD students. We know how challenging the course selection process can be, and we believe that our app has the potential to make a real difference. By streamlining the process and providing a user-friendly platform, we hope to make it easier for students to plan their academic journey and make the most of their time at UMD.

What it does:
Users are presented a list of courses, which are nested under drop-downs that are labeled with which gen-eds the courses under the drop-down satisfy. Users can then add the gen-ed courses they’re interested in and see how many credits and which gen-ed requirements they’re working towards.

How we built it:
Our project was built using the umd.io API to retrieve comprehensive information about the classes required for our Gen-Ed program. After successfully accessing and parsing the data, we moved on to the crucial step of designing an intuitive and user-friendly interface that would allow us to select the courses we wanted to take, keep track of our progress, and view the credits we had fulfilled.

Using React, we were able to create a dynamic and responsive front-end that seamlessly integrated with our API data. We utilized various HTML and CSS elements to customize the appearance of our application, while ensuring that it remained accessible and easy to navigate for all users.

One of the key design features of our project was the division of the interface into three distinct sections. The first section was a comprehensive list of all the gen ed courses available to us, complete with details such as course descriptions, prerequisites, and scheduling information. The second section was a personalized list of the courses we had selected, which allowed us to keep track of our progress towards fulfilling our degree requirements. Finally, the third section was a visual representation of the credits we had completed, which provided us with a clear and concise overview of our academic standing.

Throughout the development process, we remained focused on creating a project that was both practical and aesthetically pleasing. We paid close attention to the user experience, conducting extensive testing and gathering feedback to ensure that our project met the needs of our target audience. By combining our technical skills with our design sensibilities, we were able to build a project that we are proud to showcase.

Challenges we ran into:
Working with new technologies and language components presented a significant challenge for us during the hackathon project. Learning how to integrate our HTML code into React components, and integrating an API into our application was a steep learning curve. One of the biggest challenges we faced was updating the Gen-Ed requirements as the user selected courses. 

Accomplishments that we're proud of:
Despite being new to these technologies, we are extremely proud of the accomplishments we achieved during the hackathon project. With our combined skills, we were able to create a user-friendly application that streamlines the course selection process for UMD students.

One of our greatest achievements was learning how to use an API to filter and manipulate data. This was a new skill for all of us, and we were thrilled to successfully incorporate it into our project. Additionally, we were able to leverage our previous experience with HTML and CSS to build a strong foundation for our project, and we expanded our knowledge by learning and implementing React.

The end result is a project that we're extremely proud of, and we hope it will be a valuable resource for our fellow UMD students for years to come.

What we learned:
We learned how to utilize React in order to simplify the complex functionality of a web application, and we learned how to connect that knowledge with using an API that consisted of comprehensive data on UMD courses. We then performed specific operations on this data to extract what we needed in order to display it on the site. Regarding the look of the site, we learned how to use different CSS properties so that the site would appear well-organized and clear to any viewers.

What's next for UMD Course Tracker:
In the future, we plan to create a search feature to build on the front end of UMD Course Tracker. This search feature will allow the user to find exactly which course they are looking for. We can also add additional details to the courses so that the user has an idea of what they can register for. Thinking longer term we can allow users to send feedback on the courses they take and we can utilize artificial intelligence to recommend courses that people should take. In addition, we believe we can further develop this application so it works for a multitude of majors and their courses.
",https://github.com/anshulg614/UMD-Course-Tracker,https://www.youtube.com/watch?v=t2vWTyHrLmA,"Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","html, javascript, react, css, visual-studio, umd.io, api",Rahul,Anantuni,anantuni.rahul@gmail.com,,No,University of Maryland,"","","We were all experiencing significant connectivity issues with the wifi network, which has been impacting our ability to work efficiently. Is there a way to improve the network's stability or explore other options for connectivity?",Yes,"University of Maryland - College Park, North Penn High School",3,Sam,Sanjith,samsanjith@gmail.com,Ritvik,Venkat,ritvik.venkat715@gmail.com,anshulg614,,aganumpally@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 04:43:17,"","",,"","",Aman,Talreja,atalreja@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Application Automata,https://bitcamp2023.devpost.com/submissions/403322-application-automata,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 10:53:37,"Inspiration

Are you tired of looking over the list of places/companies you've applied to and tired of searching thourugh each and every one every time you get an update? Don't you wish there was a more efficient way to store the information about all the applications you submitted and that you didn't have to log in to a different WorkDay page to check the status of each of your applications every once in a while just waiting for updates?

What it does

I'm trying to automate the process of checking for updates on submitted internship applications. My program asks users for the basic input that it needs (such as the links for the submitted applications) and then it checks for updates for each individual application and updates the dataset entered by the user to reflect changes and updates after parsing the data from the website. 

How we built it

I used HTML/CSS/JavaScript to build the main page of the appplication where all the data is entered and stored. I used Selenium (it's a software that automates browsers) to get to the webpage/webpages entered by the user and I used BeautifulSoup to extract text from the webpage. I integrated Twilio into my code so that the user gets an SMS update each time something (i.e., the status of an application) gets updated. I connected it all to my back-end Python script that runs the Selenium and Twilio code when required. 

Challenges we ran into

There isn't any way for me to change anything on the webpages of my submitted internship applications that I could use for testing or for the demo.
So I came up with a hardcoded solution. I created an HTML webpage that I can change for the purpose of the demo, but this simplifies the scraping/parsing process.

Accomplishments that we're proud of

I'm proud that I was able to integrate different kinds of software into my project.

What we learned

Learnt the basics of Selenium, Twilio and how to host my webpages on an Apache server.

What's next for ApplicationTracker

I want to expand it to parse actual applications becuase this is a software that I would use. I also want to improve efficiency for large datasets since my current project does not really handle that. I want to connect it to a SQL based software to store data. In the user_input_form page that I have, I want to modify it using a different language so that users can modify what information they want to store (just like in excel or google sheets, but there would still be some required fields for the functionality of my code).
",https://github.com/Arushitib/Bitcamp23-project,,"Most Creative Use of Twilio - Major League Hacking, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, html, css, javascript, selenium, twilio, apache",Arushi,Tibrewal,atibrew1@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","Twilio, GitHub","I had a lot of fun trying out different technologies, getting the integration to work was a little challenging since I'd never done it before and I dont have a team to help me out, but it all sort of worked out:)",Yes,University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 11:18:36,"","",,"","",Annie,Perdue,theflagandthearrow@gmail.com,,"","","","","","",Montgomery College,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 11:33:12,"","",,"","",James,Espericueta,espericueta2303@gmail.com,,"","","","","","","",0
Influencer HQ,"",Draft,Pending,Additional info,04/08/2023 11:48:42,"","",,"Most Creative Use of Twilio - Major League Hacking, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp","",Eddy,Koundjou Yem,ekoundjou@gmail.com,,Yes,"Bowie State University, Morgan State University, University of Maryland","","",We used...,Yes,"Bowie State University, University of Maryland - College Park",2,ekeneonoh456,,ekene.onoh123@gmail.com,Maurice,Barksdale,mbarksd3@terpmail.umd.edu
Purspect,https://bitcamp2023.devpost.com/submissions/403363-purspect,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 13:15:13,"Inspiration

When we only consume news and engage with content that aligns with only our existing beliefs, we become less receptive to new ideas and less likely to challenge our own assumptions. Existing social media recommendation algorithms provide you with similar content to increase user engagement. Sadly, this leads to the formation of echo chambers which ultimately leads to a distorted view of reality. 
We were inspired to create this social media news platform after realizing the danger of echo chambers. We wanted to create a platform that would encourage users to explore different viewpoints and engage in civil discourse, while still allowing them to express their own thoughts and opinions. By promoting critical thinking, open-mindedness, and constructive conversations, We hope to help create a better world with lesser hatred and polarization.

What it does

The features available in Purspect are:

Newsfeed: The newsfeed with bias meters helps users understand the political leanings of the news articles which land on their feed. Users are shown news articles equally weighed between different parts of the political spectrum. This helps combat the effects of echo chambers as the users engage with news from all sides of the political spectrum.

Post your Thoughts: Purpsect allows users to create and share their own content, including text posts, images and videos to express their views. They can also engage in meaningful discussions with others.

The Discussion Hub: Purspect offers pseudo-anonymous chatrooms where users can engage in one-to-one and group discussions. This allows two users with differing viewpoints to allow for a constructive conversation which in turn helps fosters an environment where users can explore opposing viewpoints, challenge their own assumptions, and cultivate open-mindedness. A step closer to eradicating echo chambers!

Quizzes: Every few articles, our users are prompted to take a quick quiz on articles they have engaged with. These quizzes are designed to be engaging and fun and it helps the user broaden their perspective and challenge their pre-existing biases. Furthermore, this helps combat misinformation as users are promoted to fact-check and verify the information presented in the articles. 

Surveys/Polls: Users can take surveys on various political, social and economic issues. It again allows users with an opportunity to broaden their perspective and learn about different viewpoints. 

Fundraisers: This allows users to donate to causes and organizations they support. Furthermore, participation is incentivised through karma points! This pushes users to take meaningful action on the issues they care about.

Events: The user can stay engaged and informed within their community. Purpsect helps users find events that match their interests. This helps foster real world engagement turning online conversations into real-world actions.

Hardware: For user testing and UX research needs, we designed hardware that detects micro-movements and respiration rates while the articles in our are being read or discussed by the user. 

How we built it

The front end of the application is built using React and Typescript. The designs for the app were first envisioned on Figma and then styled using CSS. The back end used the Google Cloud Platform for API deployment. 

A NewsAPI was used to gather relevant articles on a set of topics. Then, the recommendation algorithm uses Cosine Similarity to get articles which are relevant to the user's interests as well as from the opposing viewpoint.

The Discussion Hub Chatroom uses a matching algorithm that employs Cosine Similarity to pair users with individuals who hold different viewpoints, enabling them to engage in diverse perspectives.

In addition, the application's hardware features an Arduino, a CCS8811 Air sensor, and a TCS RGB sensor. By analyzing ambient air quality, lighting conditions, and contrast, these sensors detect micro-movements and respiration rates, ultimately allowing the app to gauge the user's mood.

For the Bloomberg Challenge: Our team successfully developed a highly sophisticated Machine Learning model that has been specifically trained on the CUAD dataset. The model is designed to leverage legal-bert enabling it to accurately comprehend legal terminology and jargon.
By utilizing legal-bert in our model, we were able to achieve highly accurate and effective results in understanding and analyzing legal documents and text. It understands legal terminology and provides insights.

Challenges we ran into


Unfortunately, we encountered a CORS error while deploying the API that we were unable to resolve to lead us to lose a lot of precious time 
Integrating the hardware components of the application was a challenge
Uncomfy chairs and inconsistent wifi :(


Accomplishments that we're proud of


Envisioning an idea that solves a concerning issue that the world is facing and actually building it!
We travelled across states, physically met each other for the first time, and built something amazing in less than 36 hours with no sleep + travel exhaustion


What we learned


How social media enforces echo chambers with their recommendation algorithms and ways to battle it. We had to explore strategies to mitigate the issue and promote different perspectives.
 The successful implementation of a recommendation algorithm that suggests relevant articles based on user interests and opposing viewpoints. 
One of our teammates who's primarily a designer learned how to use Front-end frameworks and 
contributed to the project a lot! 


What's next for Purspect


Explore new technologies to improve the app's functionality like additional ML tools
Scaling up the platform to reach a wider audience!

",http://github.com/paulano1/persp,,"Best Hardware Hack - Bitcamp, Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Best Social Good Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","python, google-cloud, cockroachdb, ngrok, newsapi",Inesh,Tickoo,inesh.tickoo@gmail.com,,Yes,"Drexel, OHU, FIT",betternewswith.tech,"","We used CockroachDB in the back-end to store user information, chatroom session information, messages and more.",Yes,"Florida Institute of Technology-Melbourne, Drexel University",3,Muntaser,Syed,jemsbhai@gmail.com,Hasan,Shameer Muhammed,hasanshameer@gmail.com,Anomitro,Paul,anomitropaul@gmail.com
Sorting Simulator,https://bitcamp2023.devpost.com/submissions/403384-sorting-simulator,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 14:09:53,"Sorting-Simulator

A visualizer and simulator for different sorting algorithms.

Inspiration

We all like sorting algorithms right? 

What it does

Sorting Simulator is a visualizer and simulator for different sorting algorithms! It allows you to see different sorting algorithms, such as Bubble Sort, Selection Sort, Insertion Sort, Quick Sort, Merge Sort, Heap Sort, Intro Sort, and (everyone's favorite) Bogo Sort, and how they work! It can also let you compare the efficiency of different sorting algorithms by running multiple simulations of the same algorithm and giving you relevant statistics such as the time it took to sort, the number of comparisons, etc. Feel free to play around with our program!
",https://github.com/Mimsqueeze/Sorting-Simulator,,"People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp","java, swing",Minsi,Hu,mimziwho@gmail.com,,Yes,University of Maryland,"","","We primarily used GitHub, and it was pretty seamless!",Yes,"University of Maryland - University College, University of Maryland - College Park",2,Alison,Wang,allywang4527@gmail.com,Jonathan,Mei,jmei2657@terpmail.umd.edu
KarenAI,https://bitcamp2023.devpost.com/submissions/403389-karenai,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 14:31:13,"Inspiration

After being on hold for over an hour with Verizon, I was determined to build KarenAI, an AI-powered chatbot and voice synthesizer that sounds like a Karen which will fight for you to ensure you receive the best customer service possible. KarenAI can navigate complex phone systems, speak to customer service representatives, and advocate on your behalf with the tenacity and entitlement of a true Karen.

What it does

KarenAI is an AI-powered chatbot and voice synthesizer designed to assist people in dealing with difficult customer service situations. 

How we built it

We built KarenAI by using OpenAi's GPT-4 to generate a script that sounds just like a Karen with the end goal of resolving your customer service issues. We then used clips of Karen complaining on the internet to synthesize a voice that sounds like Karen and had it read out the script. Finally, we deployed it using Gradio to allow it to generate custom scripts. 

Challenges we ran into

We ran into some issues involving the processing of the Karen sounds and making a voice that sounded like a true Karen. 

Accomplishments that we're proud of

We are really proud of how Karen sounded at the end! The voice is very accurate and showcased the inflections that we wanted the voice to highlight. 

What we learned

We learned a lot about how to preprocess audio and which clips worked the best for voice synthetization. 

What's next for KarenAI

We think there are a number of different applicants that KarenAI can be used for. Mainly, KarenAI can be used to cancel and negotiate your bills similar to RocketMoney to ensure you are not being overcharged. 
",https://20f2d5d7f1ac01a880.gradio.live/,,"Best Machine Learning Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack","python, gradio",Fady,Yanni,fady@terpmail.umd.edu,,Yes,"University of Maryland, College Park",HireAKaren.com,"",Bad wifi.,Yes,University of Maryland - College Park,1,Pranav,Shikarpur,pshikarpur@startupshell.org
Untitled,"",Draft,Pending,Manage team,04/08/2023 15:01:30,"","",,"","",lotus5,Xie,zxie4696@gmail.com,,"","","","","","",University of Maryland - College Park,0
CoRide,https://bitcamp2023.devpost.com/submissions/403417-coride,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 15:50:04,"Inspiration

Bryan has to spend $200 just to take the Amtrak every time he wants to head home to Pennsylvania. We realized that Bryan is not the only student who goes home to that area. In fact, Bryan's mom even asked, ""Don't you guys have a bulletin board where you share stuff like this?""

We realized the need for a platform to connect students headed home, enabling them to share rides and save time and money while reducing their carbon footprint, we set out to create an innovative solution that brings people together for a greener, more social commute.

How We Built It

When users put down their info into our signup page, trycoride.com, that triggers our Zapier Zap, which binds our whole process together. The Zap enters that user's data into our Google Sheets database. Then, using Twilio, we text the user that just signed up to confirm their account creation. At the same time, we kickoff our first AWS Lambda, which searches through our Google Sheets database to find the best matching user who is also going to that destination. After that match has been computed, we use Twilio again to text the rider of that pairing and ask them to confirm. If they confirm, we use Twilio to send a text to the driver of that match. While these texts are being sent, we use our second AWS Lambda to monitor that the driver has confirmed. After both parties have confirmed, we reveal their names and phone numbers and send both parties a text over Twilio so that they can connect.

What it does

CoRide let's students sign up as riders or drivers. Riders are looking for a more economic, green, and social way to get home, and drivers are already headed home and are looking to help others get home just for the price of gas. When a user signs up, they are automatically notified whenever a user of the opposite type (rider/driver) is also headed near them, and they are continually notified as better matches come along. If both the rider and the driver agree to the match, we connect them and help them set up a CoRide. The beauty of CoRide is that once you submit where you're going, the app works in the background and you only interact with others over text, seamlessly integrating CoRide into your daily life.

Challenges we ran into

Last year, we overcomplicated our hack and spent too much time on aspects we couldn't even demo. This year, we went for simplicity and used no-code solutions like Zapier as much as we could. Our biggest challenges came from integrating all of our moving pieces together, and this required us to rethink our approach and switch from the Twilio SDK to the REST API, but we still glued our whole app together using just Zapier, Google Sheets, and AWS Lambdas.

What's next for CoRide

From discovery, we have learned that many potential users have safety concerns with regards to riding with people they haven't met before, so we plan on continuing our research in this area as well as adding accountability measures such as reviews.
",https://trycoride.com/,,"Most Creative Use of Twilio - Major League Hacking, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp","python, amazon-web-services, zapier, sheets",Abhinav,Modugula,abhimodugula@gmail.com,,Yes,UMD,ridealong.tech,"We used Twilio to send SMS updates to users and receive confirmations. It worked exceptionally well and was not difficult to set up. In addition, the Twilio Zapier integration was also excellent.","We used Twilio to send SMS updates to users and receive confirmations. It worked exceptionally well and was not difficult to set up. In addition, the Twilio Zapier integration was also excellent.",Yes,University of Maryland - College Park,3,Rohan,Uttamsingh,rohanuttamsingh@gmail.com,Peter,Geertsema,iwannapjg@gmail.com,Bryan,Houlton,brhoulton@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 15:53:14,"","",,"","",Edna,Adissu,ednadissu@gmail.com,,"","","","","","","",0
Explainable AI for Cancer w/ Quantum Transfer Learning? Yes!,https://bitcamp2023.devpost.com/submissions/403419-explainable-ai-for-cancer-w-quantum-transfer-learning-yes,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 15:54:44,"Inspiration

If there's one thing that our team has learned throughout our biology classes, it's that cancer sucks. Dealing with cancer is an arduous task from its diagnosis to actual treatment. Many groups and companies have sought to create machine learning models with the goal of checking if a given sample has a malignant tumor. Given the recent hype of quantum computing, we wanted to know whether quantum computing is better than classical computing for cancer detection!

What it does

What we have is a pretty simple web app, one which allows any user to upload images. Our classification algorithm, which has already been trained on a binary classification cancer data set, will analyze the image and report whether there's a malignant tumor or not. Additionally the user can request the model to point out the areas in the picture which played the biggest parts in the classification.

How we built it

We use the CBIS-DDSM from the TCIA which has labelled breast cancer pathology images. We had to turn it into a comprehensible format for our quantum machine learning algorithm. We used transfer learning with pretrained weights from ResNet18 to speed up learning. We checked our model's performance metrics as well. LIME allowed us to mark points on the picture which the algorithm factored in the most for its decision, which is what allowed us to implement AI explainability. We hosted a web app through Anvil, connecting it to the Jupyter notebook to allow users to upload photos and have them classified. The notebooks were hosted on the UMIACS cluster.

Challenges we ran into

Setting up the server presented a bit of a challenge as we needed to set up a chain of host locations and virtual environments to get the whole thing running.  Pre-processing the data presented a challenge because it was originally in DICOM, which was not supported by the software we used. The dataset had some errors and inconveniences in the filenames which we had to work around. Although we had a temporary API key to run our model on IonQ's quantum hardware, we were unfortunately stuck in the training phase (probably due to the queue).

What we learned

We learned how to use TCIA and PyDicom to download and access the medical data. We learned how to integrate Pytorch and Pennylane together. We also learned how to make web apps with Anvil, and how to connect them to external programs.

What's next for Explainable AI 4 Cancer w/ Quantum Transfer Learning? Yes!

We could use a variety of different models in order to compare different transfer learning models, both classical and quantum. Expanding the number of qubits our quantum model uses could present new results. Expanding our training dataset to include more types of cancer could improve the accessibility and use even further. We also hope to optimize the hyperparameters to improve model performance.
",https://exacqtly.anvil.app/,https://youtu.be/b-heI7CUiUw,"Best Moonshot Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp","pytorch, python, umiacs, pennylane, lime, dicom, tcia, jupyter, pandas",Spencer,Chan,schan12@terpmail.umd.edu,,Yes,University of Maryland,"","",Was great.,Yes,University of Maryland - College Park,3,Adam,ℓ,ithinkiamadam@gmail.com,Shreya,Shete,syshete@gmail.com,Apechs-F,Pechenov,apechs@terpmail.umd.edu
Bitin',https://bitcamp2023.devpost.com/submissions/403420-bitin,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 15:57:07,"Inspiration

We have been fans of clicker idle games, and have often thought that giving it a programming flair could be fun.

What you can do with it

You purchase conditional statements, multipliers, and timers in order to create a ""program"" that counts up to a full 32 bits. Nothing exists passed 32 bits (Or does there...?).

How we built it

Landon used vanilla JavaScript to control the UI which is made up of HTML and CSS. Alan used JavaScript to create his backend code.

Challenges we ran into

Situating the different elements was very annoying and figuring out how to drag and drop blocks took a lot of trial and error before something we were proud of could be achieved. Also, deciding on how quickly the game should scale took some research.

Accomplishments that we're proud of

We think that the UI, although simple, is quite pleasing and does everything that we wanted it to do.

What we learned

Landon learned a lot about JavaScript events and how they interact with the CSS of certain elements. Alan learned a lot about game theory and the implementation of certain scaling functions in JavaScript.

What's next for Bitin'

More stages. Going even more ""beyond"" 32 could be fun!
","https://github.com/nobiduke/Bitin, https://nobiduke.github.io/Bitin/",https://youtu.be/jKK3WySGgG4,"","html, css, javascript",Landon,Jones,lmjones647@gmail.com,,No,UMBC,"","","Although we didn't end up using it in our hack, we enjoyed playing around with CockroachDB",Yes,University of Maryland - Baltimore County,1,Alan,Nguyen,alannguyen514@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 16:15:13,"","",,"","",Danny,Shi,dshi0322@terpmail.umd.edu,,"","","","","","","",0
temphouse,https://bitcamp2023.devpost.com/submissions/403436-temphouse,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 16:31:19,"Inspiration

We wanted to create an easier way to find and evaluate housing near the office. Instead of going in between sites for different pieces of information, temphouse is a one stop solution to find housing options pricing information, and plan commutes.

What it does

Users can select a company and office location and we show them open rental listings in the area. Users can select a listing and find details, as well as commute times.

How we built it

For the front end, we are using nextJS and TypeScript with the mapbox API to present the map.
For the back end, we are using Python Flask and a real estate API to pull open rental listings around a zip code.

Challenges we ran into

Scraping a large list of company locations, combining the front end and back end, and completing all tasks on time. 

Accomplishments that we're proud of

Creating an app that we would want to use.
Clean and simple UI.
Large catalog of company and company locations.

What we learned

How to use mapbox API and real estate APIs.
How to use Python Flask and nextJS.
How to manifest company offers by looking at housing options around the jobs we want.

What's next for temphouse

Create an accounts feature to allow users to make accounts and match with other interns in the area for potential roommates.
","",https://youtu.be/iHLk6jIyFmo,"CoStar Group - Best Use of Real Estate Data, People's Choice Hack - Bitcamp, Capital One - Best Financial Hack, Best UI/UX Hack - Bitcamp","nextjs, typescript, mapbox, python, flask",Kevin,Tang,kevintang738@gmail.com,,Yes,"University of Maryland, College Park","","",No interactions with sponsor technology.,Yes,"University of Maryland - College Park, University of Maryland - University College",3,Karthikeya,Kona,konakarthik12@gmail.com,Tyler,Kempton,tk90005@gmail.com,JackAnd356,,jackand356@gmail.com
StockByte,https://bitcamp2023.devpost.com/submissions/403439-stockbyte,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 16:35:39,"Inspiration

For this hackathon, we wanted to focus on learning and using new tools to solve a problem related to us. We took note of the fact that recently a YouTuber did an experiment to compare how r/WallStreetBets compared to a goldfish when it came to investing and wanted to see how these subreddits and their sentiment towards stocks actually compared to the real thing. We thought it was an interesting way to learn new skills while investigating a topic. 

What it does

Should you trust social media for your investment advice? Specifically, Reddit? This project scrapes investment-related subreddits and uses Natural Language Processing to provide sentiment analysis on popular stocks. The sentiment ratings are compared to the real performance of stocks to help you analyze if your Reddit advice is accurate!

How we built it

We started by harvesting our data by web scraping Reddit using an API library called PRAW in addition to Python Regex. From there we worked to filter this raw data into usable data that contained keywords and stocks interesting to us. This involved using the Python library Pandas to visualize the data we collected as CSV files. Once we found the relevant posts we then ran Natural Language Processing on our data to quantity user sentiment towards a particular stock. Following this, we serialized our data into JSON format for ease of access and flexibility. We also used Flask to help visualize all this data. In the backend, we connected our MongoDB database and handled data generation. In the frontend we created a table view that displays the information we collected about each stock in each column. We combined the post and comment sentiment into an overall sentiment for the stock. Finally, we compared it to the actual stock performance in the last column and visualized the results.  

Challenges we ran into


Quality of Data - while scraping on Reddit we found that we had to filter through junk posts and comments to prevent them from skewing our data sets. 
Data types - early in our project we realized we needed to decide on the best format to store data. 
Scope - we had big ideas and ambitions but we needed to evaluate our capabilities within the allotted time. 


Accomplishments that we're proud of

We were proud of our ability to push our limits by choosing a topic and technologies we were not familiar with. We were also adaptive during this hackathon, choosing to switch between technologies when found necessary. Despite many difficulties, the team maintained a strong vision and mental fortitude throughout the long nights.

What we learned

We came in with limited knowledge about web development and web scraping, but throughout the hackathon, we were able to gain experience and ultimately accomplish the goals we initially set for ourselves by collecting and filtering data alongside a front-end visual representation. We learned a lot about the quality of data and the time constraints associated with processing data sets. 

What's next for StockByte

In the future, we want to make the data a lot more comprehensive and provide a better user interface to allow for customization. We would like to allow the user to choose which subreddit to gather data on, and potentially expand to be a general sentiment tracker for subreddits and topics.
","",,"Best Use of MongoDB Atlas - Major League Hacking, Bloomberg Industry Group - Best Public Sector Hack, Best Bitcamp Hack - Bitcamp, Capital One - Best Financial Hack","python, flask, praw, pandas, nltk, html/css, mongodb",Sachin,Naraparaju,snarap@terpmail.umd.edu,,Yes,"University of Maryland, College Park",N/A,"",They were good. GitHub made collaborating easy and MongoDB was a very useful DB. Python was easy to work with despite a learning curve for Flask.,Yes,University of Maryland - College Park,2,Davayan,Sanyal,davayansa@gmail.com,Brian,Ding,bding08@gmail.com
IncidentExposed,https://bitcamp2023.devpost.com/submissions/403448-incidentexposed,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 16:54:53,"Inspiration

Typically, all University of Maryland students receive countless emails regarding UMPD incidents, such as robberies, suspicious activities, and indecent exposures. However, due to these countless emails, it is hard to keep track as to where every incident occurs. Also, it is impossible for every student to be aware of every incident that takes place because emails aren’t sent for every single event that takes place.

As a result, we wanted to create a web application which displays where these types of incidents happen, so that students can not only be aware but also avoid areas of potential danger.

What it does

It is a web app that webscrapes information from the University of Maryland Police Department’s Daily Crime and Incidents public data and plots it onto an interactive map with color-coded markers. 

Additionally, the app updates in real-time. So when UMPD adds new reports, the map updates in real time and adds those markers. 

How we built it

We built our project through multiple layers of code and documentation needed to make every part of the project work. We web scraped (using BeautifulSoup) through the UMPD listings of all incidents that have occurred over the last two months, and took this information and put this into a pandas dataframe. From there, we took the data frame and put markers by using the location of the incident and finding the longitudinal and latitudinal coordinates through the use of Google’s Geocoding API to plot the points and to clean up address formats. We used the descriptions from the incidents (like their types, addresses, and dispositions) that were inputted into the database to create a description.

Challenges we ran into

One of the main challenges in our project was that we first ran into environmental issues, which made it difficult to import Python libraries that we used, such as Pandas and Folium. As a result, pathetic as it was, we had to use Google Colaboratory in order to program part of our project before switching back to a better, permanent IDE: VScode. We also had issues with transferring a frontend markup from Figma to HTML and CSS. Besides that, there were just a lot of bugs with Folium’s map making, the web scraping, and the geocoding api, which caused some inconvenience at times.

Accomplishments that we're proud of

We are proud that we learned how to use multiple different python libraries like folium, request, csv, pandas, BeautifulSoup, IPython, date-time, and geopy in such a small amount of time. We are also proud of utilizing html pages with css styling in order to make a functional website and webpage, and are proud of making an interactive map.

We are also proud of the idea we chose, because it is a present and immediate concern for students like us at the university. Thinking of the idea is the hardest part, so once that was done, implementation was not too complicated to figure out.

What we learned

Although we learned how to use multiple libraries, the most important thing that we learned was how to delegate backend and frontend tasks between one another and combine projects and code with each other to be more productive and to use our strengths. It was enlightening to see how complex backend material can be added to html pages through just one line of code, after which styling becomes easy.

What's next for IncidentExposed

In the future, we plan to move towards other campuses and generate similar statistics to include the entirety of the nation. We also look forward to increasing speed and automation of updates to create alerts the moment an incident is reported. Lastly, we look to provide more information about the incident using analytical graphs and charts.
","https://github.com/DebarshiDey/IncidentExposed, https://docs.google.com/presentation/d/1jNwyuzS566i14Crf8X7Y56Jr8X8MI4I2Bhk7C-8hIKk/edit?usp=sharing",,"Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, html5, css3, folium, pandas, requests, geocoding, google-maps, beautiful-soup, csv, date-time, ipython, geopy",Yash,Sakharkar,yash.sakharkar0327@gmail.com,,Yes,"University of Maryland, College Park","","","Github Desktop: It was amazing for version control. It made it so easy to collaborate, fork, and merge branches locally in connection with the shared version online. 
Folium: Although the documentation was a bit cryptic, there were enough resources online to figure out how to use this very useful library to customize our embedded maps.",Yes,University of Maryland - College Park,3,Debarshi,Dey,ddey23@terpmail.umd.edu,Soham,C,sohamchaw@gmail.com,Ishan,Khillan,ikhillan@terpmail.umd.edu
eHealth,"",Draft,Pending,Project details,04/08/2023 16:59:34,"eHealth Information

eHealth has 4 main uses. The first one is a health assistant, which is the app's focus. It provides on-the-go medical information which you can access. The second part is a voice assistant, which was mainly added so that you can entirely rely on eHealth, instead of relying on other sources such as Siri or Google Home. The third is a virtual keyboard, where you can type using a window on your computer, by simply putting your index and middle finger together in front of a webcam. The fourth is a virtual mouse, where you can move your cursor using a window on your computer. You can move your mouse using your pointer finger and click by moving your thumb out. Both the virtual keyboard and the virtual mouse work outside of the application. The health assistant uses an intents.json file to read data and then uses the module NLTK to stem the words inputted; then, the application utilizes a neural network and machine learning algorithms to convert your inputted string to a probability of it being a specific tag which is read in the intents.json file. If the probability is high enough, it returns an answer to your question. The voice assistant is almost the same, except it uses deep speech to understand what you are saying, and then converts it to a string. The virtual mouse and keyboard both use media pipe and OpenCV to scan the webcam for the indexes of your fingers (photo provided in the demo video), and, for the mouse, upscales the camera intake and uses the pointer finger's top index as the center of the cursor. To log in to eHealth, there is a facial recognition system using machine learning that is stored in an Encodings.p file which also stores data such as login attempts in Google Firebase. Overall, eHealth uses AI, machine learning, deep speech, and neural networks to function.

eHealth Inspirations

The prevalence of injury amongst disabled children is over four times as likely as that of a child without disabilities. Over half of the injuries dealt to disabled children occur at home, and around half of those injuries are caused by falling. These alarming statistics inspired me to create this app. AI technologies such as Siri don’t have readily available medical information; thus, it becomes incredibly hard to treat damages done at home, especially when the injury happens unexpectedly. 62% of adults with disabilities say that they own a computer, while 81% of adults without disabilities say that they own a computer. This gap comes from the fact that it is incredibly hard to use computers if you are disabled, even with the new technology to help aid this problem. I wanted to create this app so that disabled people can help treat their injuries faster and have an easier time navigating technology.

eHealth Challenges

Package control was by far the largest technical difficulty I faced when programming eHealth. To put it in perspective, specific module versions were incompatible with other modules, which would in turn destroy the code. Many of the modules I used had a plethora of issues in their newest release, and thus, the documentation and the skills I received from working with these modules were useless as I had to relearn another version of that module for the app to work. Modules such as PyAudio were not even possible to install on my system, and thus I had to find the original wheel file to install it. Overall, finding the right package versions, testing out my program and its runtime on these versions, and then implementing new code into these versions was a huge problem. Something would always break along the way until I found the perfect balance of package versions within my app.  
",https://github.com/Rishi-prog731/eHealth,https://www.youtube.com/watch?v=C-r2kR5ahTg,"","python, nltk, tensorflow, opencv, mediapipe",Rishi,Hariharaprasad,marczuccisameme@gmail.com,,"","","","","","",Louis D. Brandeis,0
Untitled,"",Draft,Pending,Manage team,04/08/2023 17:26:22,"","",,"","",Burner,Account,elmalo8213@gmail.com,,"","","","","","",University of Maryland - College Park,0
LocalHealth,https://bitcamp2023.devpost.com/submissions/403475-localhealth,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 17:43:42,"Inspiration

Remembering and accessing medical records is a challenge for both patients and medical professionals in and around nursing home facilities. Despite our medical technology advancing at very rapid rates, some departments, like this one, are lagging behind due to unchanging ways in an ever changing world. Keeping records on paper of every resident is common practice in the nursing home world, which can make organization difficult and more time consuming . Having a simply designed, easily accessed medical file for keeping track of the appropriate times, dates and dosages of the patient's medication is a critical part of this line of work. 

What it does

A general understanding of each resident’s medical history is key to providing the appropriate care. LocalHealth would swiftly take care of this issue by providing easy to access, appropriate information, all of which can be easily pulled from a database with the scan of a chip implanted inside of the LocalHealth wristband. After scanning the wristband with the LocalHealth app, an easy to read, basic medical file for the appropriate resident appears on the caregivers smartphone. On their file we can read about their food allergies, medical conditions and most importantly, their schedule for intaking medication. When tapping on a specific date, the caregiver can see a list of medications that the patient might need to take, as well as having the ability to put a checkmark to indicate that they have administered the appropriate medication at the appropriate time. This makes it easy for the caregivers' coworkers to ensure that their residents are well taken care of.

How we built it

We started off by brainstorming bracelet concepts as well as app logos, using Onshape and Medibang Paint, respectively. The wristband tag CAD was exported as an .stl file and converted to .gcode so it could be 3D printed using Bitcamp’s printers. While the physical side of our project was being conceptualized and discussed, another part of our time started working on the app development, creating our app’s system paths and display using Flutter. We also researched relevant examples of the possible patient files that nurses might encounter while using LocalHealth the application
Wristband design features include a slit in the tag for the microchip, holes for a band to tie the tag to the patient’s wrist, and rounded edges to reduce chafing. The prototype band is made from tape folded over itself to increase durability. Our example patient, John Doe, has his name engraved onto the 3D printed tag. Due to the low volume of filament used to print these tags, production is fast and inexpensive.

Hardware

The app can be used on smartphones to scan the physical wristband that a patient wears. The wristband prototype was created with the CAD software Onshape and craft materials provided by Bitcamp.  

A finalized model of the LocalHealth wristband would include a microchip inside the tag sleeve and a more easily adjustable wrist strap, like that of a watch.

Software

App development was created using flutter. We imbedded the platform view within flutter that integrates a QR scanner that works both with Android and iOS. App development was created using flutter.

What we learned

-Figured out how to navigate Flutter
-Common medical conditions for the elderly and their respective treatments/medications
-How to put text on 3D printed CADs, change letter size and position
-Experimented with Arduino, Python, and sensors and learned some of the ways to connect them
","https://cad.onshape.com/documents/11be03ab94e8043e136d7edd/w/3206edda8a4f00f1af62f10f/e/56335c39fc4ea9cda4a18753, https://github.com/golu099/bitcamp2023.git",,"Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack","flutter;, onshape;, github;, firestore, medibangpaint",Alejandro,Palacio,alpalacio01@gmail.com,,Yes,"University of Maryland, Wheaton High School","","","We were very excited to participate in this Bitcamp 2023 hackathon, we learnt a lot about Github, machine learning, as well as how to apply your coding knowledge into different sectors. Hopefully for next year we will have the experience to integrate more of this knowledge into our submission for the 2024 Bitcamp Hackathon.",Yes,"Montgomery College, University of Maryland - University College",3,sanjana-v19,Vand,sanjuvan03@gmail.com,golu099,Negrete,flavianegrete@gmail.com,Emily,Cleveland,emrcleveland@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 18:17:23,"","",,"","",Brayden,Ngo,braydenngo2@gmail.com,,"","","","","","",University of Maryland - College Park,0
SpotCharts,https://bitcamp2023.devpost.com/submissions/403512-spotcharts,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 18:48:14,"Inspiration

The inspiration for SpotCharts came from my deep passion for music and my fascination with the power of data visualization. I was drawn to the idea of creating an application that could take a user's Spotify data and translate it into a unique and captivating visual experience. While the annual Spotify Wrapped is a great way to reflect on one's listening habits, I wanted to create something even more expressive and personal -- something that could tell a story about someone's tastes in music over time by simply using a visual that could be shared with the world.

What it does

SpotCharts is a web application that allows users to visualize their top 50 Spotify artists in a proportional bubble chart. Users can log in to their Spotify account, authorize the app to access their data, and then see their top artists represented as bubbles, sized based off of listening time (larger bubbles for artists with more listening time and vice-versa).

How I built it

I built SpotCharts using Python Flask for the back-end, D3.js (a javascript package that handles data visualization) and html/css for the front-end, and the Spotify API for data retrieval and user authenication. The python script authenticates the user using tokenization and writes their data into a dictionary, which is fetched by the javascript and used to create the bubble-chart display. There's also a loading screen.

Challenges I ran into


Sizing: I Initially wanted to size the bubbles based off listening time in hours/minutes, but couldn't find a good way to get that data since the Spotify API doesn't allow you to. Instead I sized them based off of their rank in the user's top 50 artists (which was based on the listening time for each artist).
User Login: The authentication process took a long time to figure out as I had never done a project like this before. I learned the whole process of recieving a user code and requesting a token, then using that token for the application to make it specific to a user.
Data Storage / Time: The process of storing the data into a dictionary and recieving it on the front-end side proved to take a while, around 5-10 seconds. I realized that this was not very optimal and tried to find workarounds. In the end, I added a simple loading screen during the processing stage to make it feel less time heavy.
D3.js: D3 is a huge library with tons of support for different visualizations. I found it a little overwhelming at first but was able to narrow my implementation down to the parts I wanted. Find the right animation proved to be a very long process.


Accomplishments that I'm proud of

I'm very proud of the way this project turned out, as it's exactly what I envisioned. I was satisfied with the bubble chart visual, and am glad I could figure out how to size the bubbles using a similar metric. I felt most accomplished after I was able to retrieve the artist images as svg's and actually display them in the chart, as well as when I created the ease-out flower animation. That was really cool.

What I learned

Through building SpotCharts, I learned how to work with the Spotify API, how to create an interactive data visualization using D3.js, and how to optimize data retrieval. I also learned how to implement a python back-end using flask and how it interacted with the javascript html css front-end using routes and requests on the server.  

What's next for SpotCharts

I intend to contact the Spotify Developer Team to obtain a commercial license for my software and extend its impact among Spotify users. In addition, I plan to introduce new features, such as a hover animation to display the bubble's artist name, rank, and top songs on users' playlists. I also aim to integrate a filter by genre feature and randomize the bubble chart sizing for a more personalized experience. Furthermore, I am interested in exploring monetization opportunities for SpotCharts through partnerships with music companies like Spotify, who could leverage the visualizations to engage their user-base.
","",https://youtu.be/BYjQPCmmnws,"Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","d3.js, python, javascript, html, css, flask, spotifyapi, spotipy",Pranav,Bolla,bollapranav05@gmail.com,,Yes,University of Maryland,"","",I had a great time.,Yes,"",0
Rizzulator,https://bitcamp2023.devpost.com/submissions/403523-rizzulator,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 19:22:16,"Inspiration

“Rizz” is one of the popular words and trends of the year. So we figured, why not make a game based around it? And while we’re at it, why don’t we make that game hilariously corny and funny. And thus, the Rizzulator was born. 

What it does and how we built it

This game is a single/local multiplayer game where players try to get the highest “Rizz” score they can. The way the program works is that before the game starts it asks the players a bunch of questions (Their name, who they’re trying to 'rizz up', and the pick-up lines they have to memorize). Then, players take turns going through a facial test and a pick-up line test to earn points. 

Round 1: Facial recognition

The game tracks the user’s facial expressions using MoodMe, a Unity asset. Unfortunately, the free asset of MoodMe only accounts for Shocked, Sad, and Neutral facial expressions. While we didn’t do anything too advanced, we came up with a calculation for what determines a player’s rizz. The less neutral they look, the more rizz points, and the more sad they look, they lose rizz points. From experience when a person smiles, sometimes the Shocked expression rises. We hypothesize that it’s tracking a player’s mouth opening, and since the Happy expression doesn’t exist in this model, it replaces it with Shocked. Because of this, we made it so that Shocked increases a player’s score pretty well.

Round 2: Pick-up line

Beforehand, each player got to pick or create three pick-up-lines to memorize. The original plan was to use voice recognition so that the player repeats back the lines, then we compare what they said to their original pick-up-line and award them points based on how accurate they were. Of course, we’d include a time limit so they wouldn’t take all day. However, since Unity’s Dictation Recognizer wasn’t working properly (despite having the proper syntax for this sort of thing), we decided to improvise and instead of people saying the pick-up line, we’ll have them type it out. Then, the program compares what they typed to the pick-up line they chose, and the more accurate the player is, the more ""rizz points"" they get.

At the end of round 2, a total score of each player’s rizz is shown. 

How we built it

We built this game using Unity software and assets including MoodMe. 

Challenges we ran into

A very big challenge we ran into very early on was getting the voice recognition to work and pick up our voices. We tried using Unity’s DictationRecognizer to pick up the user’s voice and convert it into text, but even though we used Unity’s documentation for it, allowed windows permissions, and tried using the mic through the headset we had and our PC, we couldn’t get it to work. Since the bitcamp mentors also couldn’t figure out why the DictationRecognizer wasn’t working, we resorted to their suggestion about using Google’s speech to text and have that in our Unity game. Unfortunately, there was an issue with that as well. Besides problem solving voice recognition, the other challenges of creating this was  trying to figure out how to calculate “rizz” in a fun way that would make people laugh and also makes a little sense.

Accomplishments that we're proud of

Including facial recognition in a coding project is a first time for this group. It was also an accomplishment making several people laugh with the idea of our game alone before explaining how the project would work.

What we learned

For voice recognition, Unity can be unreliable and next time we will make a back-up plan if we want to do anything involving voice. 

What's next for Rizzulator

There are many  ideas we could do to improve. We could figure out a solution to voice recognition so we can do our original plan. A better with facial recognition and make it so that when a player does something like biting their lip they get bonuses for “rizz”. It also would've helped if we could've tracked whether a player is happy. We also thought about doing a full body recognition so that players can do a lot of body movement and be graded on it in Round 2, but due to a time crunch and voice recognition issues, it was quickly decided that that wasn’t going to make the cut. Rizzulator can add more pictures of people, more pick-up lines, etc.
",https://iwbanf.itch.io/rizzulator,,"People's Choice Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, moodme",Zavier,Howard,zhoward1@umbc.edu,,Yes,"University of Maryland Baltimore County, Montgomery College","","","Unity voice recognition was annoying to deal with, but we managed. It was also fun to see how well the facial recognition was at determining our emotions, (it wasn't the best, but still pretty good).",Yes,Montgomery College,2,Daniel,,44daniel.mz@gmail.com,Umar,Chaudhry,awesomeumar27@gmail.com
Techy Domain names,https://bitcamp2023.devpost.com/submissions/403525-techy-domain-names,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 19:31:22,"Our Domains

toms-totally-terrific.tech


Just Tom's totally terrific tech website :D


sk3.tech


Looks similar to the word ""sketch"", so maybe someone can sketch with some nice tech on this website...


niicomii.tech


N i i c o m i i. Sounds nice doesn't it? :)
Niicomii is currently a personal brand 
Domain will serve as a personal home page (portfolio, resume, etc)
Domain is currently being linked to a Replit website (records are currently propagating)
http://niicomii.tech/ (it might work!)

","",,Best Domain Name from Domain.com - Major League Hacking,"brainpower, domain.com",Tom-Dai,Dai,technopupper@gmail.com,,Yes,"University of Maryland, College Park","toms-totally-terrific.tech, sk3.tech, niicomii.tech","",none,No,University of Maryland - College Park,2,Hannah,Ham,hham1@terpmail.umd.edu,Jimmy,Garcia,netuser5525@gmail.com
Untitled,"",Draft,Pending,Manage team,04/08/2023 20:01:11,"","",,"","",Parth,Bhodia,parthbhodia08@gmail.com,,"","","","","","","",0
G(PT)hosting,https://bitcamp2023.devpost.com/submissions/403532-g-pt-hosting,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 20:22:54,"Inspiration

The inspiration for this project was mainly wanting to use a chatgpt integration into our project.

What it does

The G(PT)hosting service allows you to open a listener on Twilio that takes incoming texts, checks them for spam, then replies to them automatically based on what you've specified your relationship with the sender to be.

How we built it

Javascript, Twilio, Flask serves on front end. Python back end. The back end uses chatgpt api as well as a small text analysis model of its own to return the desired text.

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for G(PT)hosting
",https://github.com/lluo02/bitcamp23,,Most Creative Use of Twilio - Major League Hacking,"python, tensorflow, chatgpt, twilio, flask",Luke,Luo,lluo1@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","",Twilio - Only being able to send and not listen to a specific phone number was an issue but ultimately workable for a demo.,No,University of Maryland - College Park,2,Chris,Antar,cantar@terpmail.umd.edu,Shilin,Huang,shilin40@terpmail.umd.edu
Fannie Mae Loan Solution,https://bitcamp2023.devpost.com/submissions/403543-fannie-mae-loan-solution,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 21:22:11,"What it does

Groups loans that match certain criteria into pools, maximizing the total value of pools and the loans in it (preferring higher valued pools over lower valued ones).

How we built it

We used Python, because it has many powerful data analysis libraries like Pandas/numpy, that could get through the large dataset quickly.

We first group the data by loan_term, maturity_date, and then take a subset of each group that satisfies each class's condition, using it to make groups via a round-robin algorithm (that ensures state distribution's are equal and will eventually satisfy the state max % requirement). 

Every loan that is not matched to a pool is then recycled, so that it might be used by the next pool class of loans.

This process then continues for all the groups.

The library matplotlib was used to plot the loan data, showing us important insights such as the fact that the loan distribution among states was not equal (which is something we are planning on exploring in optimizing our solution).

Challenges we ran into

Coming up with the solution was hard, since our pipeline to process the data had a ton of stages (to filter/group the data), and it was tricky to make everything work together.

Making the round robin algorithm work.

Accomplishments that we're proud of

Being able to process the entire dataset (our first attempts took several minutes to get through the dataset).

Putting together a small test suite that checked that the pool satisfied the criteria, and scored our algorithm, which allowed us to make sure changes were improvements.

What we learned

What knapsack algorithms are.

What's next for Fannie Mae Loan Solution

Further optimizations (optimize the round robin algorithm to output pools with state percentages closer to the maximum, so that we can fit in more loans, since the state distribution is not uniform).

Show me the Code

The code can be found in new_solution.ipynb.

You will need Jupyter, Matplotlib, Pandas, Numpy, and a Python version > 3.6 to run it.

Generated pool files are in the output folder.
",https://drive.google.com/file/d/1aVvnLvRFRK0uQzHhWw-ZqJAq2KVYDgr1/view?usp=sharing,,Fannie Mae - Don’t Put All Your Eggs in One Basket,"python, pandas, numpy, matplotlib",Thomas,Li,thomasli1234567890@gmail.com,,Yes,"University of Maryland, College Park","","","The Numpy and Pandas library for Python were especially useful, as they allowed us to process the large amount of multi-dimensional data, one example being grouping and sorting sublists, without having to deal with implementation details.",Yes,University of Maryland - College Park,1,Andrew,Wang,andrew2014wang@gmail.com
TextAssess,https://bitcamp2023.devpost.com/submissions/403545-textassess,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 21:23:24,"Inspiration

The inspiration behind this project is to address the challenges faced by students and teachers when it comes to writing and grading written responses. By leveraging the power of NLP technology, the project aims to provide a faster and more efficient way to grade responses, while also helping students improve their writing skills.

What it does

This NLP architecture takes in user input of a prompt and a response. Then, using common Language models, the user's response to their prompt is rated on similarity to the context of the question (judging how 'well' the user answers the question). Then, using an alternative (generative) model, a ML-generated response is concocted. At this point, we have two possible outputs to the same prompt. Therefore, using language models, responses can be compared, and better sentences can be chosen at each stage (between the user's sentences and the computer generated sentence).

Models used are Google's BERT model and OpenAI's GPT-2, hosted on HuggingFace and fine-tuned with AWS SageMaker.

How we built it

To demonstrate how this model works, refer to the architectural diagram below. It incorporates our future plans in addition to what is currently implemented. At the moment, our output represents how well a user answered a prompt with the metric being a similarity score between their response and a generated response. We are using cosine similarity to accomplish this by passing embeddings of the responses into the scikit-learn cosine similarity function. Then, we are identifying which parts of the user's response are not good enough.

Challenges we ran into

We used tools and platforms such as AWS Sagemaker and Hugging Face for the first time. There was a lot of debugging and reading documentation involved but we were able to get a prototype working using these new tools as well as our previous expertise. 

Accomplishments that we're proud of

Submitting a working prototype with the ability to be improved and have a real impact. 

What we learned

Working with an end-to-end machine learning pipeline and utilizing cutting-edge technology to solve a prevalent issue.

What's next for TextAssess

Fully implement the ""improvements to response"" feature and create a user-facing product such as a website or app so students and teachers can easily access and benefit from all the features. 
",https://github.com/pranavdulepet/TextAssess/blob/main/README.md,https://youtu.be/t8jtQ6WOwts,"Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best Razzle Dazzle Hack - Bitcamp","python, scikit-learn, hugging-face, amazon-web-services, sagemaker, jupyter-notebook, google-bert, gpt-2",pranavdulepet,Dulepet,ps.dulepet@gmail.com,,No,"University of Maryland, College Park","","The WiFi was dastardly, I had to leave the venue to work since I couldn't do anything there.",I loved interacting with the sponsors and it was very interesting learning about how they're implementing cutting-edge technology into real-world applications to streamline processes and improve the quality of their products for the users.,Yes,University of Maryland - College Park,1,MukundShankar-dev,Shankar,smukund23@gmail.com
PokemonQuiz,https://bitcamp2023.devpost.com/submissions/403547-pokemonquiz,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 21:41:06,"The project is called ""PokeRPS"", a website that tests your knowledge of Pokémon types and their weaknesses in a timed setting. The website is designed to be simple and easy to use, making it accessible to anyone who loves Pokémon.

When you visit the PokeRPS website, you will see a straightforward interface that allows you to start the quiz with just one click. Once you start the quiz, you will be presented with a 3 of multiple-choice questions that test your knowledge of Pokémon types and their respective weaknesses. You get 60 seconds and if you choose one wrong answer the game ends. And if you choose one correct answer you get a point and the round switches to a new pokemon and multiple options.

At the end of the quiz, you will receive a score that reflects your knowledge of Pokémon types and their weaknesses. Overall, PokeRPS is a fun and challenging way to test your knowledge of Pokémon types and their weaknesses. 
",https://github.com/KennyWu/PokemonExam,,"","python, javascript, html5, css, pokeapi",Kenny,Wu,wukenny0@gmail.com,,No,"university of maryland, college park","","","Vert nice, worked with python scrpts, reading,creating json files, javascipt, html, css, and using replit. used github to upload all code.",Yes,University of Maryland - College Park,3,Sai,Sreeramani,saisuhas2004@gmail.com,Nihar,Chegireddy,nihar.chegireddy@gmail.com,Arjun,Suresh,henryphillipsthethird@gmail.com
Speechify,https://bitcamp2023.devpost.com/submissions/403550-speechify,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:04:54,"Snap it, Read it, Live it!

Inspiration

Our team's inspiration for this project comes from our shared passion for accessibility. We believe that technology has the power to level the playing field for individuals with disabilities, and we wanted to use our skills to create something that could make a real difference. We recognized that dyslexic individuals often struggle with reading text from images, which can be a significant barrier to learning and information access. By leveraging the power of Flutter, we aim to design a beautiful and intuitive mobile app that can help dyslexic individuals read text from images more easily. In doing so, we hope to promote greater accessibility and inclusivity for all. This led to the birth of Speechify - an app that can make a real difference in the lives of dyslexic individuals.

What it does

Are you tired of struggling to read text from images? Do you have dyslexia or are visually impaired and find it challenging to access information? If so, we have the perfect solution for you - our revolutionary new app that reads text from images!

Our app is specifically designed to cater to the needs of people with dyslexia and visual impairments. It uses advanced technology to instantly recognize text from images and convert it into an easy-to-read format. 

But that's not all! Our app also has a text-to-speech feature, which reads the text aloud for visually impaired individuals. It's incredibly user-friendly and can be used to read all kinds of text, from books to handwritten notes.

So, whether you're dyslexic, visually impaired, or simply want a more accessible way to read text from images, our app has got you covered. Say goodbye to the frustration of struggling to read and hello to a new world of convenience and accessibility with our app!

How we built it

The development process of Speechify involved a variety of technologies and techniques. To create the frontend of the app, we utilized the Flutter framework, which allowed us to build a visually stunning and responsive UI. We implemented the backend in Python, which handled the processing of the image data through OpenCV and PyTesseract, and returned the extracted text via an HTTP GET request to the frontend.

We used Dart programming to link these two components, enabling smooth communication between the frontend and backend. Additionally, we incorporated Flutter's text-to-speech capabilities, allowing users to have the option of listening to the extracted text instead of reading it.

Each component of the app was styled with deep intricacy, taking into account both functionality and aesthetic appeal. The user interface was designed to be intuitive and easy to navigate, with a focus on accessibility and inclusivity. We also incorporated machine learning models from PyTesseract to improve the accuracy of the text extraction process. Pre-processing techniques using OpenCV were employed to make the image more usable by the machine learning model. The codebase was managed for our team using GitHub. 

Challenges we ran into

As with any project, our team faced a few challenges while developing our app that reads text from images. However, we were determined to overcome these obstacles and create a product that would truly make a difference in the lives of people with dyslexia and visual impairments.

One of the biggest challenges we faced while developing our app that reads text from images was getting the text-to-speech feature to work correctly. It was essential that the app read the text accurately and in a way that was easy for visually impaired individuals to understand. However, this proved to be a difficult task as there are many nuances to language that can be challenging for machines to accurately interpret and vocalize.

To make an accurate text recognition technology, it was essential that the app be able to accurately recognize and convert text from a wide range of sources, including books, signs, and even handwritten notes. We spent countless hours fine-tuning the technology to ensure that it could accurately recognize text under a variety of lighting and background conditions.

Despite these challenges, our team was able to overcome them through hard work, dedication, and collaboration. We are proud to have developed an app that truly makes a difference in the lives of people with dyslexia and visual impairments, and we look forward to continuing to improve and expand its capabilities in the future.

Accomplishments that we're proud of

One of the accomplishments that we are particularly proud of is how well we worked together as a team during the development process of Speechify. Despite the tight deadline of the hackathon, we were able to collaborate effectively, share ideas, and divide tasks efficiently to maximize our productivity.

Another accomplishment that we are proud of is our ability to learn and implement new technologies quickly. In less than two days, we were able to familiarize ourselves with technologies such as Flutter, Dart programming, OpenCV, PyTesseract, and HTTP requests. We were able to integrate these technologies seamlessly into the app and create a fully functional prototype that met our goals and exceeded our expectations.

What we learned

The hackathon provided us with an opportunity to learn Flutter and Flask for web development, work efficiently under pressure, and solve technical difficulties with Xcode. We learned the importance of teamwork, persistence, and creativity when facing challenges. The experience helped us develop our technical skills, particularly in OCR and text-to-speech. Overall, it was a valuable learning experience that we can apply to future projects.

What's next for Speechify

The next steps for Speechify are to focus on increasing accessibility for visually impaired and blind users. This will involve adding more auditory cues and voice commands to improve the user experience. Additionally, the app will use more powerful OCR and text-to-speech algorithms to enhance accuracy and speed. These improvements will enable Speechify to better serve its target market and expand its reach to more users.
",https://github.com/vaidya45/Bitcamp,https://www.youtube.com/shorts/grJKSSN2bPc,"Best Social Good Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack ","python, dart, flutter, flask",hbalickgoodman,Balick Goodman,hbalickgoodman@gmail.com,,Yes,University of Maryland College Park,"","",Our team had a great experience using Flutter to develop Speechify - a dyslexia assistance app at the hackathon. The framework was easy to use and allowed us to build a functional app quickly.,Yes,University of Maryland - College Park,3,Arjun,Vaidya,vaidya@umd.edu,Raghav,Aggarwal,raghav4@terpmail.umd.edu,Rithwik,Bhardwaj,rithwikbhardwaj13@gmail.com
Wisdom Tooth,https://bitcamp2023.devpost.com/submissions/403551-wisdom-tooth,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:08:01,"Inspiration

In an attempt to address an overly common, but far too overlooked issue, we set out to alleviate stress and boost performance for the doctors with the highest suicide rates: dentists. By eliminating the constant stress of tedious note taking and impromptu diagnosis dental workers face on a daily basis, the mother of one of our teammates (a dentist) attested to the value Wisdom Tooth provides.

What it does

Using a convolutional neural network model, our application predicts the type of dental issue a person may have based on x-rays. By collecting and storing user data, we make personalized calls to the OpenAI API, providing in depth analysis and feedback.

How we built it

We began by training our machine learning model to detect dental issues with above a 77% accuracy rate and validated it using publicly available diagnoses we were studying. Next, we implemented a prediction algorithm to apply the learning model to make probable diagnosis on user inputted information. With a generated diagnosis, we created a full stack application using Node.js and stored user data with MongoDB. Finally, we combined user data and our predicted diagnosis to make a personalized call to the OpenAI API to further analyze possible treatments and outcomes.

Challenges we ran into

Having explored different avenues of the project at various times, the main obstacle our team faced was synthesizing several code segments. Integrating the machine learning model with the full stack application developed in parallel, in particular, posed an especially hard challenge. We spent several hours rewriting code to work injunction with each other, which ate many hours that could have gone into developing a more appealing frontend.

Accomplishments that we're proud of

Writing a machine learning model that is trained to predict the diagnosis of a certain dental issue, based on an inputted x-ray scan. 
Utilizing MongoDB, we were able to set up a sign-up and login page for users to enter and store their personal information such as age, medical records, allergies, and medication. This information was then used in a ChatGPT API call, to present the user with a formal dental note.

What we learned

Throughout this project we had different things working in the backend and the frontend, so this was a fullstack project. This experience taught us how to write applications from front to back and showed us how every part works together. The basis of our project, the image classification model, was tough to create and it allowed us to really learn how a machine learning model works and what it takes to create one.

What's next for Wisdom Tooth

Our next goal as a group is to improve upon Wisdom Tooth, focusing on seamless integration and an attractive frontend. Ideally, we would like to publicly release our application under a custom domain name, making it available to dentists worldwide.
",https://github.com/Nanzoo/bitcamp2023,https://youtu.be/baHsKV_xo9g,"Best Use of MongoDB Atlas - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, javascript, html, css, node.js, handlebars.js, pytorch, matplotlib, restapi, generativeai, chatgpt, flask, mongodb, json, pandas, numpy, cnn, linux, gpu, vscode",Saumit,Kale,skale1@terpmail.umd.edu,,Yes,University of Maryland,"","","As inexperienced MongoDB users, the database technology was relatively easy to figure out. However, we frequently reached issues where we could not fetch data from the database between different languages.",Yes,University of Maryland - College Park,3,Ananth,Sankaralingam,ananth.sankaralingam@gmail.com,Nihaal,Bhojwani,nihaal.bhojwani@gmail.com,Amit,Vankadhara,amitvank@terpmail.umd.edu
Mooneh,https://bitcamp2023.devpost.com/submissions/403553-mooneh,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:14:01,"mooneh.tech

Introducing Mooneh, the out-of-this-world personal expenditure tracker that makes expense tracking fun. Earn MoonDust, buy unique Domes, and build your MoonBase while tracking your expenses!

Inspiration

The inspiration for Mooneh comes from the pains of having to track personal expenses. Expense trackers such as SplitWise do a great job in helping you to track your expenses, with an intuitive interface and neat features that do the job. But why not do things better? Why not have fun and get rewarded for your efforts? Taking inspiration from forestapp.cc, we built Mooneh to make the mundane task of expenditure tracking something fun that you'd look forward to!

What it does

Mooneh rewards you for keying in your expenses in the form of MoonDust. Everytime you key in your expenses, you get a certain amount of MoonDust, which you can use to purchase Domes from the store to place in your MoonBase! Mooneh also comes with a dashboard that allows you to see all your expenses from the specified month so that you can keep track of your spending. 

How we built it

Using the React framework, our front-end was built using Tailwind CSS and Javascript. The 3D models you see on our app are made using Three.js and React Three Fiber. Our back-end was built with Ruby on Rails, making use of its MVC patterns and tools such as ActiveRecord and ActiveStorage to handle database entries and file storage. The frontend and backend have been deployed on Google Cloud platform infrastructure, utilizing Cloud Run for serverless computing and incredible scalability, Cloud SQL and Cloud Storage as backing services, and Cloud DNS and load balancers to show off our shiny new domain name!

Challenges we ran into

We encountered some issues with moving files around in Git which resulted in not ideal integration between the front-end and back-end. As a result, we decided to restart the repository and imported our work over to the new repository in a structured manner. It worked!

Accomplishments that we're proud of

This idea itself is something we are very proud of! This is our first hackathon, so we came into it blind, with no ideas and no idea what to expect. But within the first 2 hours of the BitCamp, we were able to identify a mundane task (i.e. tracking expenses, which we personally encounter in our daily lives and find it a complete pain) and came up with a way to make it more fun and rewarding! 

What we learned

We learned quite a few things, and one of them was to work systematically, take note of things and naming things properly which may seem slower, but actually helps tremendously when the project got more complex.

What's next for Mooneh

Our end goal is for Mooneh to be an application on the App Store and the Google Play Store so that it is easily accessible. You can key in your expenses and grow your MoonBase on the go! With this in mind, a few of our next steps would be:


Designing and coding the mobile view for Mooneh
Adding user login and authentication
""Add friends"" utility and allow splitting of bills with friends
Filtering for the dashboard (allow to filter by category, different time periods, etc.)
Designing a larger variety of Domes to purchase with MoonDust!

","http://mooneh.tech, https://github.com/kayweeee/mooneh_reboot",,"Best Domain Name from Domain.com - Major League Hacking, Best Moonshot Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack, Best Gamification Hack - Bitcamp","javascript, ruby, ruby-on-rails, react, google-cloud, google-cloud-run, three.js, tailwindcss, html",Abram,Tan,abramtjh@gmail.com,,Yes,"UC Berkeley, Singapore University of Technology and Design",mooneh.tech,"","The tech tools we used ranged from Postman for API testing, VS Code as our main editors, GitHub+Git for versioning, Chrome for testing out our web app, Figma for graphics, and even Telegram for quick file transfers. All in all, our technology experience was great, with the tools we used being both free to use as well as highly capable.",Yes,SUTD,1,Kay,Wee,tankaywee09@gmail.com
Steering the Hotdog,https://bitcamp2023.devpost.com/submissions/403555-steering-the-hotdog,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:18:16,"Inspiration

Mario Kart Wii's steering functionality inspired this project. Our group wanted to experiment with a hardware project, so we thought it would be fun to include this steering feature into our project.

What it does

It's a game that tests reaction time and coordination in a fun, retro style format.

How we built it

We attached an accelerometer and a button to an Arduino Uno R3. We also 3D printed a base for all of the parts as a remote controller for the player to use to steer. The game was built in Unity, but we use an arduino as a controller to orientate the player in the game.

Challenges we ran into

We needed to figure out how Arduinos worked and how wires worked on breadboards. We also did not know how to connect an Arduino to Unity, so we installed a Unity package as a solution.

Accomplishments that we're proud of

We learned how to use an Arduino and the basics of 3D printing by using software like Tinkercad and PrusaSlicer.

What we learned

We learned intermediate Unity topics through C# scripting and beginner level Arduino topics like using a breadboard.

What's next for Steering a Hotdog

We need to improve the UX and UI of the game so that it can be more engaging for the user. We will focus on finding color palettes online as well as looking for someone to draft new images. We also need to change the dimensions of the controller because it is too bulky by reducing the amount of material used. 
",https://github.com/Michaell14/Arduino-Controller-for-Hotdog-Unity-Game/tree/master,,"Best Hardware Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","arduino, unity",Michael,Li,limichael909@gmail.com,,Yes,Thomas S. Wootton High School,"","","Github: Re-learned the basics of Github through the command line
Unity: Fun to learn how to create a 2D game and how to write code in C#.",Yes,Thomas S Wootton High School,2,Nick,Peng,dupopking@gmail.com,Matthew,Wang,mattwang05@gmail.com
CallTrackr,https://bitcamp2023.devpost.com/submissions/403557-calltrackr,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:24:07,"This application allows you to keep track of all the calls that go to and from your phone. By doing this, you can go back and listen to recordings of your phone logs. We've all been in a situation where you forget an essential detail given in a call or want to reminisce about the moments of the past. This application hones Twilios Programmable Voice API and Tkinters GUI to create a seamless application where one can create a call given an input or start listening for any incoming calls. Since my Twilios API is run locally, I had issues hosting the code on a public domain. Using ngrok, I was able to forward my local host to a temporary link given by the tool. This tool has many expansions. For one, it is currently still in the demo stages, meaning that I can't choose who the call is coming from, since Twilio's API needs the phone number to be a registered to Twilio number. The application can also be implemented so you can manage the recordings in a separate database, for easier function and sharing of mp3 files.
",https://github.com/siddjasti/BitCamp-2023,,"Most Creative Use of Twilio - Major League Hacking, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, twilio, tkinter, ngrok, apis",Sidd,Jasti,siddjasti@gmail.com,,Yes,University of Maryland - College Park,"","","I used Twilio, and the documentation was seamless. Tutorials were very easy-to-follow and I understood how to integrate it with other APIs.",Yes,University of Maryland - College Park,0
Tradeiverse,"",Draft,Pending,Project details,04/08/2023 22:24:30,"Inspiration

Looking at the prizes for this years Bitcamp hackathon, our group wondered: ""whats the best prize we can win?"" 

What it does

Tradeiverse is a fun and engaging virtual marketplace that lets users trade items with one another.  Whether you want to become the ultimate merchant, build a collection of exotic items, or shop and trade at ease, Tradeiverse can satisfy your needs. In the Tradeiverse marketplace you can buy anything from planets to luxury cars to 

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Tradeiverse
","https://github.com/foshesss/Tradeiverse-, https://tradeiverse.azurewebsites.net",,"","python, flask, azure, html5, css, javascript, sql, cockroachdb",Mederick,Grivel,m3grivel@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,1,lotus5,Xie,zxie4696@gmail.com
BitConnect,https://bitcamp2023.devpost.com/submissions/403560-bitconnect,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:34:25,"Inspiration

Our team was inspired to create this platform to address the difficulty that sponsors face when they try to connect with individuals who are interested on their contents but are not able to talk to them in person because of different circumstances. 

What it does

We have built a unique database that allows users and companies to register and create group or private chats, as well as conduct live video calls, whether in a group or 1v1 setting.

How we built it

We utilized Agora, a Real-Time Voice and Video Engagement platform, for the live video calling feature, and Ngrok, a free web hosting URL service, for hosting. Additionally, we used HTML, CSS, and JavaScript for video service. For the messenger feature, we used Firebase as a database and Chat Engine API for live-time messenger. The chat service was implemented using TypeScript, JSON, React, and HTML/CSS.

Challenges we ran into

Our team encountered several challenges in building BitConnect, but the biggest challenge were implementing the live video streaming and messenger features which both are not easy feature to build and arrange them together in one service without prior knowledge. 

Accomplishments that we're proud of

We are proud that we were able to overcome challenges and complete the project as we had intended from the start.

What we learned

We have learned various technologies, including those we had not previously used. We also gained valuable experience in setting goals, forming a team, and working towards a shared objective.

What's next for BitConnect

We plan to make BitConnect even more accessible and user-friendly, and add more features, such as more detailed user profiles. We may also explore the potential of this technology and service, and potentially start a startup related to this field.
",https://github.com/yeokim5/BitConnect,https://youtu.be/mt1h6SylJEU,"Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","html5, css3, javascript, typescript, react, firebase",Yeomyung,Kim,yeokim5@terpmail.umd.edu,,Yes,"Orange Coast College, University of Maryland - College Park (current), Iowa State University, Arizona State University,","","GitHub, Firebase, ChatEngine, Agora.","We had a great time this weekend using different technologies to build our web app for online video chat and conversation. The front-end of our program was built using React TypeScript JavaScript, which allowed us to develop a dynamic and responsive user interface. We managed our version control and coding collaboration using GitHub. We used Firebase to safely and flexibly store our user data and login details. We integrated real-time chat capability using ChatEngine into our app, allowing us to send and receive messages, photos, emoticons, and other content. With the help of Agora, we were able to include video calling capabilities in our app, enabling us to have smooth video chats with other users. We loved investigating these technologies' capabilities and features and learned a lot from utilizing them. We value the chance to take part in this hackathon and are appreciative of the help the sponsors and organizers have given us.",Yes,University of Maryland - College Park,1,Akshit,Sanoria,akshitsanoria1995@gmail.com
Poker Flip App,https://bitcamp2023.devpost.com/submissions/403563-poker-flip-app,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 22:46:52,"Inspiration

We saw some people at the Xfinity Center playing flip poker. So we decided to make that but in a website.

What it does

Lets you play poker without betting.

How we built it

React

Challenges we ran into

Making the UI

Accomplishments that we're proud of

It works!

What we learned

React and CSS animations

What's next for Poker Flip App

Play online
",https://guanglinwei.github.io/Bitcamp2023/,https://youtu.be/BLpyKLn2sTg,Bloomberg Industry Group - Best Public Sector Hack,react,guanglinwei,Wei,guanglinwei@gmail.com,,No,UMD,"",GitHub,suffering,Yes,University of Maryland - College Park,3,IdleSicko,,sonicrules12@gmail.com,DavidLin29,,dlin12@terpmail.umd.edu,Hanish,Vadlamudi,hanishv15@gmail.com
InterviewIO,https://bitcamp2023.devpost.com/submissions/403567-interviewio,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:08:35,"InterviewIO

Saatvik Vadlapatla, Pranav Polasam, Steven Zhang, Adam Yang

Project

https://github.com/SaatvikV/InterviewIO

Inspiration

As four computer science students, we noticed a clear need for interview resources as there wasn't an efficient way to practice the skill of interviewing. Many students only have one shot at the perfect interview and it is vital they get all the experience they can to achieve their goals. Furthermore, many students get fairly nervous with interviews due to a lack of practice. We believe that having a resource like our project to practice talking out interviews and getting real feedback on answers would be immensely helpful to students and give them the interview prep they need.

What it does

Our project simulates a behavioral interview by asking questions that the user can answer. The model then takes the user's response into account and then asks relevant follow-up questions. The questions are voiced so that the user gets an authentic interview experience. Once the user decides to end the interview, they are directed to an interview history page to see logs of all previous interviews. Each log will contain the time the interview ended, each question and answer conducted during the interview, and feedback on the interview based on the user's answers. The user will also get a score for each response.
To run it locally, clone the github repository first. Then, use flask run in main/backend  and npm start in main after installing needed dependencies.

How we built it

The front end of the project was mainly on ReactJS and CSS. In order to simulate the interview, we set up an API endpoint to an instance of a  GPT-3 model. The backend was mainly developed utilizing Flask. We prompt-engineered the GPT-3 model to generate a suitable response which is then sent and parsed on the front end. In order to create the voice for the interview we mainly used ReactJS frameworks.

Challenges we ran into

We struggled quite a bit with configuring the API endpoints to utilize the user input and generate the response. We originally intended to send the audio file directly from the front end to the back end and handle the text transcription over there. However,
this turned out to be a daunting task and we ran into quite a bit of compatibility issues.

Accomplishments that we're proud of

.We are proud of getting a finished product that accomplishes exactly what we intended to do 
and creating a resource for everyone to practice interviews. This was a great learning experience for us, and we are fairly proud of all the amazing technology we were to pick up on during the development of this project which we can carry on to future endeavors.

What we learned

None of us had much experience with web development in general, so developing a full-stack project of this magnitude was a bit daunting but quite rewarding. We learned quite a bit of frontend development and how to utilize ReactJS for developing the webpage, while also honing on the specific libraries to enhance capability. Through the various challenges we faced with the API endpoints and the model, we learned quite a bit about how to transfer information between the front end and back end and how to train a model properly.

What's next for InterviewIO

In the future, we aim to make the interview more immersive and realistic for the user. We plan to introduce a talking face so that the user can get the experience of talking to someone face to face just like a real interview. Furthermore, we plan to allow users to practice technical interviews along with behavioral interviews to widen the scope of what the user can do. Finally, we want to host this website for easy user access.
",https://github.com/SaatvikV/InterviewIO,https://youtu.be/M1Xd0BfEt1I,"Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","react, flask, javascript, python",Steven,Zhang,szhang99@terpmail.umd.edu,,Yes,University of Maryland-College Park,"",All the tech we interacted with was brilliant.,All the tech we interacted with was brilliant and worked perfectly.,Yes,University of Maryland - College Park,3,Saatvik,Vadlapatla,vgsaatvik@gmail.com,Adam,Yang,adamfyang@gmail.com,Pranav,Polasam,ppolasam@terpmail.umd.edu
CurryCoolum,https://bitcamp2023.devpost.com/submissions/403569-currycoolum,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:14:18,"Inspiration

During our team brainstorming session, Sam highlighted a major issue he encountered while learning something new. We realized that it can be frustrating and time-consuming to find the correct and accurate roadmap for a new subject. Additionally, not everyone has access to a mentor, guide, or teacher at all times. In fact, some people may not have any access to them at all. This is where CurryCoolum comes into play. The name is inspired by ""curriculum"" and ""curry,"" with the idea that learning something new should be as easy as making a delicious curry. With CurryCoolum, everyone can access the proper roadmap or guide to learn anything new without facing any issues. We're proud to offer a solution that makes learning accessible and enjoyable for everyone, regardless of their resources or circumstances.

What it does

CurryCoolum is a learning platform that provides clear and accurate roadmaps for learning new topics. It is designed to be user-friendly and accessible to everyone for progressive learning, regardless of their background or prior knowledge. Our platform is focused on providing high-quality content that is easy to understand and follow. Also, based on your evaluation of the assessment, it regenerates a new customized but more efficient roadmap, that helps you to improve on the topics you are bad at in a particular domain.

How we built it

We built CurryCoolum using various technologies, including Next.js, tailwind.css, APIs, and Firebase. We focused on creating a simple and intuitive user interface, as well as developing robust backend functionality. Our team worked collaboratively, with each member contributing their unique skills and expertise.

Challenges we ran into

One of the biggest challenges we faced was creating accurate and detailed roadmaps for a wide range of topics. We wanted to ensure that our platform was comprehensive and covered all the key concepts, but also easy to follow and understand. Another challenge was integrating various APIs and data sources into our platform, as this required significant technical expertise.

Accomplishments that we're proud of

We are proud of the user-friendly interface we created, which makes it easy for anyone to use our platform. We are also proud of the comprehensive and accurate roadmaps we developed for a variety of topics. Additionally, we are proud of the collaborative nature of our team and how we were able to work together effectively and present it here at the bitcamp.

What we learned

Throughout the development of CurryCoolum, we learned the importance of creating a user-centered design that is easy to use and understand. We also learned the importance of collaboration and communication within a team. Additionally, we learned a great deal about various technologies, APIs, and data sources, which will be valuable for future projects.

What's next for CurryCoolum

Moving forward, we plan to continue expanding our platform by adding new functionalities and improving existing ones, things that we weren't able to do because of the time constraint . We also plan to enhance our important feature of interactive quizzes and user-generated content. Additionally, we are excited that we are taking our platform to the next level by building an MVP.  We look forward to continuing to refine and improve our platform based on user feedback and analytics, and we are excited to see where this journey takes us.
",https://github.com/dayumsam/CurryCoolum.git,,"People's Choice Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","next.js, apis, gpt-4, firebase, tailwind.css",Sahil,Jagtap,sahil.jagtap45@gmail.com,,Yes,George Mason University,"","OpenAI's GPT-3 and NLP capabilities are impressive, allowing for powerful language processing and natural language generation. TLDR and its summarization API proved to be a useful tool for extracting key information.","I agree that TLDR is a useful tool for quickly summarizing long pieces of text, and its NLP algorithms are impressive in their ability to extract important information. However, it is important to keep in mind that, as with any NLP tool, the accuracy of the summarization will depend on the quality of the input text and the complexity of the language used. It is also worth noting that TLDR is just one of many NLP summarization tools available, and it may be beneficial to explore other options depending on specific needs and use cases.",Yes,George Mason University,1,Sam,Mathew,dayumsam22@gmail.com
Marshmallow Moonbase,https://bitcamp2023.devpost.com/submissions/403572-marshmallow-moonbase,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:20:03,"Inspiration

After learning about the current state of the housing market in 2023, we were rather intimidated, and felt that if we were intimidated, first time house owners would be too. So we decided to create this project as a one small step for our own financial journey, and one giant leap for Marshie-kind.   

What it does

Users will complete a checklist that breaks down the steps required for home ownership, and prepares them for the purchase of their first home. When all of the checklist items are completed, Marshie can launch to the moon!

How we built it

We used JavaScript, HTML and CSS to build the front end of the website and also developed our own animations and pictures. Additionally, we used a database to help users create accounts and calculate their savings so that they meet a certain goal. 

Challenges we ran into

We had some trouble figuring out the backend, but we were eventually able to get a cohesive website together.

Accomplishments that we're proud of

With rather limited experience, we were able to develop a website that could keep track of user progress, so users can update the site when they've achieved parts of their checklist. Furthermore we also implemented a victory screen for users who successfully complete all of their checklist

What we learned

During the hackathon, our team worked hard to learn and use different technologies to make our project. We became good at using Flask, Bootstrap, CSS, and Python.

What's next for Marshmallow Moonbase

We plan using APIs to get information about the home value estimates and will add features like property search filters and mortgage calculators. 
",https://github.com/Riya-T/bitcamp2023.git,,"Best Domain Name from Domain.com - Major League Hacking, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp","html, css, javascript, bootstrap, flask, python",Riya-T,Thapar,riyathapar06@gmail.com,,Yes,University of Maryland,marshmallowmoonbase.tech,"","GitHub was good for project management.
We got the domain main from Domain.com, but then there was no hosting available, so then one of us had to pay for the hosting, and then the account got suspended until they can ""manually verify the payment"" and that is going to take 24 hours.",Yes,University of Maryland - College Park,3,Dakshita,Pal,dakshitapal902@gmail.com,CSinn,SInha,chayanikasinha007@gmail.com,Erin,Osterman,eosterman042@gmail.com
Squat Rep Counter,https://bitcamp2023.devpost.com/submissions/403578-squat-rep-counter,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:42:05,"Inspiration We are all active individuals at various fitness levels. A problem that we all realized we came across was that we could not tell how well our form was after performing various exercises.

What it does This application counts the number of squats done with proper form

How we built it We used Flask for the backend, OpenCV and media pipe for the pose estimation, and Python for logic. HTML/CSS was used to host the application as a web app.

Challenges we ran into None of us were experienced in any of the technologies used. The biggest challenge besides that was determining what was a ""full squat.""

Accomplishments that we're proud of Learning about OpenCV and media pipe!

What we learned Basic computer vision, API use, and hosting websites using Flask.

What's next for Squat Rep Counter Adding different exercises and determining when a user is struggling/has poor form.
",https://github.com/PShah81/Bitcamp-Project,,"","python, flask, opencv, html, css",Victor,Su,victor.yuchen.su@gmail.com,,Yes,University of Maryland,"","",Poor wifi,Yes,"University of Maryland - University College, University of Maryland - College Park",3,Kaushal,Janga,kjanga@terpmail.umd.edu,Vishwa,Dukkipati,vdukk@terpmail.umd.edu,Pranav,Shah,pshah115@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/08/2023 23:50:01,"","",,"","",Madison,Drummond,m.drummond2006@gmail.com,,"","","","","","",Baltimore Polytechnic Institute,0
Photo Assassin,https://bitcamp2023.devpost.com/submissions/403591-photo-assassin,Submitted (Gallery/Visible),Pending,Submit,04/08/2023 23:54:12,"Our project gives groups of up to 5 people a fun game to play indoors or outdoors that will get them sneaking around. Friends can join an online room and take pictures of each other (w/ consent in public places) to score points.

Inspiration

We were inspired by online games, such as Codenames and Spyfall, which encourage gathering and social interaction, and we wanted to create an app that could help people connect and have fun in the real world. The twist we wanted to add was for our game to encourage movement and exploration, as we felt as though this was a component that was currently missing in many popular online games. We also felt that taking photos can be a lot of fun, especially when we catch our friends in candid moments.

What it does

Photo Assassin is a multiplayer mobile web game where players “assassinate” their friends by stealthily taking photos of them.  During games, players take photos of each other, after which they can choose who their target player was.  The target is then immobilized for a brief period, enforced by cell phone geolocation.  The game ends after a set number of photos are taken and whoever took the most photos of other people wins.

How we built it

We built Photo Assassin using CockroachDB, Flask, Next.JS, React.JS, and a Raspberry Pi.  We used Flask for our backend, which integrated with CockroachDB .

Challenges we ran into

We ran into many challenges when tackling both the frontend and backend aspects of the game. On the frontend, we decided to use Chakra UI because of the mobile compatibility it presented. Nobody on the team was very familiar with this tool, so learning how to use the tool on such short notice proved to be a challenging task. For the backend, a challenge we ran into was using WebSockets. We really struggled with figuring out how to add clients to rooms. We were unable to figure out how to keep clients/users in the rooms that they joined and deliver messages to them. It felt as though every time we tried to join a room, the client joined but disconnected.

Accomplishments that we're proud of

A major accomplishment we are proud of is the UI we were able to develop. We are also proud of how much we were able to learn about CockroachDB and Websockets.

What we learned

Throughout this process, we have learned many new tools, such as WebSockets, CockroachDB, Flask, and Chakra UI. We also learned how to use all of these tools to create a working game hosted on a mobile website, and we learned how to tunnel ssh to run services locally.

What's next for Photo Assassin

Future plans include expanding the game to include more features. We want to eventually include a Machine-learning feature that can verify that the pictures that are taken are indeed human faces (we actually already have a live API that does just that!). We also want to eventually allow users to have more settings to choose from while playing the game.
",https://pa.junion44.rocks/,,"Best Moonshot Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","cockroachdb, flask, react, next, chakra.ui",Patrick,Gough,pgough@terpmail.umd.edu,,Yes,University of Maryland,"","",The setup for CockroachDB was a little tricky and time-consuming. We didn't find a good way to collaborate on a shared Github organization for free. Working with websockets was really really really painful!!!,Yes,University of Maryland - College Park,3,Arav,D,aravdave@gmail.com,Alexander,Tanimoto,alex.m.tanimoto@gmail.com,Amal,Verma,amalverma99@gmail.com
Safe & Secure,https://bitcamp2023.devpost.com/submissions/403602-safe-secure,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:04:00,"Test
","",,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best First Time Hack - Bitcamp","python, tensorflow, opencv",srivishnupiratla,Piratla,srivishnupiratla@gmail.com,,Yes,"university of Maryland, university of Massachusetts","","","Used Tensorflow, opencv, python, and an Azure Cloud VM to train the model.",Yes,Sharon Middle School,0
DivyUp,https://bitcamp2023.devpost.com/submissions/403605-divyup,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:06:05,"Inspiration

Being a group of friends, we order a lot of food collectively and pay back whoever ordered all the food. However, this process requires a lot of math to make sure everyone pays back their fair share. During this process, a lot of mistakes can happen such as paying back the wrong person, the amount calculate ends up being incorrect, and so many more. To avoid all this, we thought we could make an application which makes this process significantly easier by computing all the values for each person in the group order while also factoring in tax

What it does

Our application, DivyUp, makes the process of splitting a group bill significantly easier. We allow users to enter their group members for the order and then scan the receipt they were given. After this, the app displays each persons name and their respective share for the order. 

How we built it

DivyUp was made as a PWA (Progressive Web App) for cross-compatibility with mobile devices while maintaining a native look and feel. PyTesseract was used as the OCR engine for scanning receipts, and Flask was used as middleware to connect the Python OCR with the JS UI.

Challenges we ran into

One challenge was improving the accuracy of the OCR system. After experimentation, we realized that the JS implementation of Tesseract was less accurate compared to PyTesseract, which forced us to redesign our app with Python API compatibility. To further improve OCR, we also used a variety of pre-processing techniques, such as kernel convolution for denoising.

Accomplishments that we're proud of

We are proud of being able to deliver a fully functional application within the deadline. We are also proud of our ability to work together as a cohesive team, as well as our resilience in the face of various technical and practical challenges. Furthermore, we are extremely proud of our use of OCR, and our integration of OCR with our webapp via an API that we created ourselves. 

What we learned

We learned a lot about the cycles of app development, as well as how to divide up work for collaborative projects. We also gained concrete knowledge on OCR and image processing techniques, in addition to Flask, PWA, and Flexbox for UI. Building on this, we learned a number of different tools for preprocessing images with open CV. Given the nature of our data, it was important for us to preprocess our data. However, it was also important that we used the right preprocessing techniques as each reccomended method that we found online was effective, but only worked well in certain situaions and with only few inputs. We learned how to effectively implement different solutions that we found online in order to solve issues that we faced during development. For example, we learned about the differences between using Augmented thresholds, normalization, and kernel sharpening (all of which have the same perform the same task but have varying impacts given different inputs). 

What's next for DivyUp

We plan to scale this application upwards by including integration and compatibility with various money transfer applications such as Venmo, Zelle, and CashApp. This will allow the owner of a bill to send requests to their friends in order to streamline the 'paying back' process. 
",https://github.com/drnxv/DivyUp,https://youtu.be/Htz9ky2HFhY,"Best Blockchain Project Using Hedera - Major League Hacking, Best Use of Microsoft Cloud for Your Community - Major League Hacking, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Cipher Tech - Best Digital Forensics Hack, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack","javascript, python, css, html, api, flask, pytesseract, opencv, regex, image-processing, optical-character-recoginition",Pranav,Chavali,pranavchavali@gmail.com,,No,University of Maryland,None,Github,Using github was essential for the sucess of our project. Github allowed our team to each take on certain responsibilities so that each of us could work independently from eaech other and push our work online so that all of us would be able to access each others work at a moment's notice.,Yes,University of Maryland - College Park,3,Adithya,Pradosh,adi.pradosh@gmail.com,Arnav,Panda,arnavpanda19@gmail.com,Pranav,Peddamalla,pranavped1239@gmail.com
Untitled,"",Draft,Pending,Manage team,04/09/2023 00:09:26,"","",,"","",Shilin,Huang,shilin40@terpmail.umd.edu,,"","","","","","",University of Maryland - College Park,0
Pipe Bot Timer,https://bitcamp2023.devpost.com/submissions/403612-pipe-bot-timer,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:19:34,"Inspiration

While looking through the twitter app, we found a metal pipe sound effect which caught our attention. At the same time, we realized that we were supposed to be doing homework, which became the inspiration for our Pipe Bot Timer.

What it does

First of all, it includes a timer, in which you can set with a number. Once the bot is active, you can use !new to prompt the bot for a number for minutes, which you can use with a decimal. Once you input this number, the timer will wait for this input's minutes, and once the timer is done, it will mention you in the chat that it is done. As a secondary function, if you are in a voice channel, you can use the function !music to have a chance of the bot playing a pipe falling sound effect. Finally, you can use !disconnect to disconnect the bot.

How we built it

Due to the fact that we had no prior knowledge of discord bot API, we were at a loss. However, thanks to tutorials online and our blood, sweat, and pipe sounds, we were able to create a bot that we can call our own.

Challenges we ran into

A huge challenge we ran into was actually getting the bot running in the server. While the actual action of doing it wasn't difficult, the first step in any project, especially one we have no prior knowledge, can be very difficult, which is why we're proud that we were able to create something.

Accomplishments that we're proud of

I think the biggest accomplishment that we had was actually creating the bot, and seeing it work for the first time in our small testing server was something that we can be proud of.

What we learned

With the knowledge that we learned over this weekend, we have learned how many of our favorite discord bots work, along with the time and effort that gets put into them. This can also be translated to being able to actually create bots ourselves for our own use.

What's next for Pipe Bot Timer

In the future, we hope to release the bot to the public with more refined coding. Additionally, being able to sync up the pipe sounds with the timer will make this bot a complete product, which is what we hope to do with this bot.
","",https://youtu.be/OQv6j05t69c,"People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","java, javacord, maven, eclipse, discord",Pouncetail,Yeo,pouncetail@gmail.com,,No,University of Maryland College Park,"","",It was fun.,Yes,University of Maryland - College Park,1,Bryan,Gao,brybryboi215@gmail.com
Audio Poet ,https://bitcamp2023.devpost.com/submissions/403618-audio-poet,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:31:24,"Inspiration

As music lovers, we often find ourselves wondering what genre a particular song belongs to. We also enjoy writing poetry and playing music. Combining our interests, we came up with the idea of Audio Poet, a web app that generates lyrics using ChatGPT, identifies the genre of the lyrics using a machine learning model, and maps it to appropriate music, creating a unique audio experience.

What it does

Audio Poet is a web app that generates lyrics using ChatGPT, identifies the genre of the lyrics using a machine learning model, and maps it to appropriate music. The app then plays the music along with a bot voice that reads the generated lyrics, creating a unique audio experience.

How we built it

We built Audio Poet using a combination of technologies. For generating the lyrics, we used ChatGPT, a large language model trained by OpenAI. Backend is written in Python Flask and JavaScript for buildng a simple interface. We also used a machine learning model to identify the genre of the lyrics. To map the genre to appropriate music, we used a music library and an algorithm that selects the best match based on the genre. To play the music along with the bot voice, we used a text-to-speech engine and a music player. Stored the generated lyrics in NoSql DB (MongoDB)

Challenges we ran into

One of the biggest challenges we faced was training the machine learning model to accurately identify the genre of the lyrics. We also had to find a way to map the genre to appropriate music in real-time, which required a lot of experimentation and fine-tuning.

Accomplishments that we're proud of

We're proud of creating a web app that combines cutting-edge technologies like ChatGPT and machine learning to create a unique audio experience. We're also proud of the algorithm we developed to map the genre to appropriate music in real-time.

What we learned

Through this project, we learned a lot about natural language processing, machine learning, and music theory. We also learned about the challenges of integrating different technologies to create a seamless user experience.

What's next for Audio Poet

In the future, we plan to improve the accuracy of the machine learning model and add more genres and music options to the app. We also plan to add a feature that allows users to upload their own lyrics and map them to appropriate music. Additionally, we plan to improve the bot voice to make it sound more realistic.
",https://github.com/visHUSTLE/audio-poet,,"Most Creative Use of Twilio - Major League Hacking, Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, flask, javascript, openi, mongodb",visHUSTLE,Nandyala,vishnuraju15@gmail.com,,Yes,The University of Texas at Arlington,Audiopoet.tech,"",Twilio sendgrid sms generation is quick enough to set up. Interface was easy to navigate.,Yes,"",0
Blindspot,https://bitcamp2023.devpost.com/submissions/403620-blindspot,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:32:36,"Inspiration

As a team of engineers, we were inspired by the challenges faced by the visually impaired. We recognized the need for a technology that could empower the blind to navigate their surroundings safely and independently. We have also all been fascinated with the recent advancements of machine learning and artificial intelligence and their real-world applications. Thus, we set out to create a machine-learning solution that could make a real difference in the lives of those with visual impairments.

What it does

Blindspot is a prototype of image-recognition glasses designed for the visually impaired. The glasses use OpenCV to scan the user's surroundings, identify objects and people, and announce them aloud along with the distance in centimeters. Familiar faces can be registered for immediate recognition, and an emergency video call function through Twilio allows the user to share their live feed with a contact in case of an emergency.

How we built it

Using OpenCV and Twilio, we built a prototype of image-recognition glasses that featured a webcam and distance sensor. The glasses were able to identify and announce objects and people within the user's vicinity, including the distance in centimeters. We also implemented a feature to register familiar faces, allowing the glasses to announce them by name upon detection. Finally, we added an emergency video call function through the services provided by Twilio Video Room Library to enable the user to share their live feed with a contact in case of an emergency. This emergency feature relies on a Selenium-integrated Python program. The program can automatically navigate to our web conference page and join a room with the proper computer sensors enabled and communicate with emergency guidance.

Challenges we ran into

One of the biggest challenges we faced was optimizing the technology for real-time use. Object detection algorithms in OpenCV often involve a trade-off between accuracy and efficiency. More accurate algorithms usually require more computational resources and are slower, while faster algorithms may sacrifice some accuracy. We needed to carefully select the appropriate object detection algorithm and fine-tune its parameters including the confidence intervals to strike a balance between accuracy and efficiency. Another difficulty we faced was connecting the actual Aurdino to the OpenCV.  We needed to ensure low-latency performance when connecting Arduino to OpenCV. Data transfer and processing delays impact the real-time performance of our system, which led to delayed results. We carefully optimized the data transfer and processing pipeline by testing out a myriad of algorithms to minimize latency and ensure real-time performance

Accomplishments that we're proud of

We're proud to have developed a technology that has the potential to make a real difference in the lives of the visually impaired. Our image-recognition glasses provide a new level of independence and safety for blind individuals, empowering them to navigate their surroundings with confidence. We're particularly proud of the real-time capabilities of our technology, as well as the inclusion of an emergency video call function to provide additional support in case of emergencies. The video call system is a web app that we implemented using the services provided by Twilio Video Rooms. A trigger by the customer automates the entire process of the video call and the emergency ""family member"" will be able to access the view of our customer and guide him/her through any emergency situation. 

What we learned

During our research, we discovered that many of the existing assistive technologies for the visually impaired were limited in their capabilities. We used the pre-trained version of the YOLO(You Only Look ONCE) deep learning model to detect people and objects.  During training, the model learns to detect objects based on the annotated data, and the parameters of the model are updated iteratively to minimize detection errors.  We also learned and improved our video call web application by adding the Selenium integrations into our Python program that can automatically navigate to our web conference page and join the video room. 

What's next for Blindspot

Moving forward, we plan to continue refining the technology and expanding its capabilities. We aim to optimize the accuracy of the distance measurements and the object and face recognition capabilities. We also plan to explore additional features, such as a text-to-speech function for reading signs or written materials aloud, and what we find the most exciting, automating transactions by identifying items as ""buyable"" and even being able to make transactions by just looking at QR codes. We're even planning on making this compatible with the blockchain and cryptocurrencies. Ultimately, we hope to bring our image-recognition glasses to market and make a positive impact on the lives of those with visual impairments.
",https://github.com/Nit682/blindspot,,"Best Use of Microsoft Cloud for Your Community - Major League Hacking, Most Creative Use of Twilio - Major League Hacking, Best Hardware Hack - Bitcamp, Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","python, opencv, twilio, arduino, raspberry-pi, html, react.js, pyttsx3, face-recognition, css, typescript, firebase, css3, javascript",Vaxyz360,Prabhu,varunprabhu.360@gmail.com,,Yes,University of Maryland - College Park,unseenbits.tech,"After working on the product we realized the accuracy of the pre-trained YOLO model depends on the quality and size of the training data, as well as the training settings and hyperparameters used during the training process.","Our team had the opportunity to work with several technologies during the hackathon, including Twilio and OpenCV. Overall, we had a positive experience with both technologies, although we did encounter some challenges along the way.

Twilio was an integral part of our project, particularly with the emergency call video feature. While we found Twilio to be a reliable and powerful platform, we did encounter some difficulties in automating the emergency call video feature. This required us to spend some extra time troubleshooting and fine-tuning our implementation, which impacted our overall project timeline. However, we were ultimately able to overcome these challenges and successfully integrate the emergency call video feature into our product.

On the other hand, we found OpenCV to be an incredibly powerful and versatile tool for image recognition. It allowed us to quickly and accurately identify objects and people through the webcam feed from our glasses. However, we did face some tradeoffs between efficiency and accuracy when tweaking confidence points. This caused some unexpected changes in our image recognition accuracy, which we had to address through careful testing and fine-tuning.

In terms of hardware, we found the webcam and distance sensor to be reliable and effective components for our glasses. They allowed us to accurately detect and identify objects and people in real-time. However, we did face some challenges in integrating these components and ensuring that they worked seamlessly with our software.

Despite these challenges, we were able to build an innovative and impactful product that has the potential to improve the lives of blind individuals. We're proud of what we accomplished and grateful for the opportunity to work with such powerful and innovative technologies.",Yes,University of Maryland - College Park,3,kushal,Kapoor,kushalk173@gmail.com,Nitish,Vobilisetti,nvobilisetti87@gmail.com,Parsh,Goel,pgoel12@terpmail.umd.edu
IntelliDrive Drowsiness Detector,https://bitcamp2023.devpost.com/submissions/403624-intellidrive-drowsiness-detector,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:38:39,"Inspiration

The rising cases of accidents caused by drowsy driving inspired us to create a solution that could prevent these incidents.

What it does

IntelliDrive Drowsiness Detector uses image processing and deep learning to detect signs of drowsiness in drivers. It alerts them by flashing the light for 5 seconds.

How we built it

To build IntelliDrive Drowsiness Detector, we trained a convolutional neural network (CNN) using thousands of images of tired drivers and conscious drivers. We deployed the model in real-time using a camera and microcontroller, and integrated the hardware and software using serial communication. 

Challenges we ran into

We faced several challenges while building IntelliDrive Drowsiness Detector. One of the biggest challenges was finding a suitable dataset. Initially, we trained the model using only images of eyes, but it did not perform well when introduced to images of the whole face. We had to retrain the model using a larger dataset of images that included both eyes and face.

Another challenge we encountered was working with serial communication between the microcontroller and the computer. None of us had worked with serial communication before, and it took some time to get the Python code to communicate with the Arduino board.

Real-time detection also made it harder to send data and build an efficient system. We had to optimize the neural network model to process images quickly, while also ensuring that the system could send alerts to the driver in real-time. Despite these challenges, we were able to overcome them and create a functional system that can potentially save lives.

Accomplishments that we're proud of

We are also proud of achieving a high accuracy rate of up to 90% with the images we have. This makes our system highly reliable in detecting signs of drowsiness and preventing accidents caused by drowsy driving. Additionally, the flashing light functions as we intended, providing a clear and effective alert to the driver.

Throughout the development process, we had the opportunity to learn and apply new skills, including working with serial communication and real-time image processing. Despite initial doubts, we were able to successfully overcome challenges and create a functional system that has the potential to save lives.

What we learned

During the development of IntelliDrive Drowsiness Detector, we learned several valuable lessons. Firstly, we learned how to use Git and GitHub to collaborate as a team effectively. This helped us to manage code changes, resolve conflicts, and keep track of progress. Secondly, we gained valuable experience in working with serial communication between the microcontroller and the computer. This helped us to integrate the hardware and software components of the system seamlessly. We also deepened our knowledge of deep learning and the importance of choosing the right dataset for training the neural network model. This helped us to achieve a high accuracy rate and build a robust and reliable system. Moreover, we learned the importance of working well with other people, including understanding their skillsets and picking out suitable projects that cater to their strengths. We also learned the value of having a leap of faith in the process and being open-minded to new ideas and approaches.

What's next for IntelliDrive Drowsiness Detector

For IntelliDrive Drowsiness Detector, we plan to improve the accuracy of the system by addressing some limitations of the current model. One of these limitations is that the model may not detect drowsiness accurately for people from certain races due to the limited dataset we used for training. We plan to collect a more diverse dataset to make the model more inclusive and accurate.

Another limitation we plan to address is the possibility of false detections. While we have successfully avoided blinking from triggering the alarm, other facial expressions such as smiling may still make the model confused. We plan to improve the model's ability to distinguish between different facial expressions by incorporating additional features and data.

Additionally, we plan to make the system more robust by incorporating other sensors, such as heart rate monitors, to provide additional information on the driver's state. We also plan to explore ways to make the system more accessible and affordable, such as by incorporating it into existing car technology or developing a low-cost stand-alone device. Ultimately, our goal is to make IntelliDrive Drowsiness Detector an effective and accessible solution for preventing accidents caused by drowsy driving.
",https://github.com/ahnngo/bitcamp2023,https://www.youtube.com/watch?v=uXAnVBc2o3I,"Best Hardware Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Bloomberg - Most Philanthropic Hack ","python, c++, tensorflow, opencv, arduino, git, github",Anh,Ngo,ngoa@berea.edu,,Yes,University of Maryland and Berea College,"",Using Git and GitHub allowed us to collaborate and manage code changes effectively. GitHub's issue tracking and pull request features helped us keep track of tasks and review changes before merging them into the main branch.,"Firstly, using Git and GitHub allowed us to collaborate and manage code changes effectively. We were able to create branches for different features and collaborate on different parts of the project without interfering with each other's work.

Using GitHub's issue-tracking feature also helped us to keep track of tasks and monitor progress. Creating issues, assigning them to team members, and tracking their status throughout the development process were easy.

GitHub's pull request feature also allowed us to review and discuss changes before merging them into the main branch. This helped to ensure that all code changes were thoroughly tested and reviewed before being added to the project.

Overall, using Git and GitHub was a great experience, and it helped us to work efficiently and effectively as a team.",Yes,Berea College,1,Anh,Le,anhleo1008@gmail.com
Farm Buddy,https://bitcamp2023.devpost.com/submissions/403626-farm-buddy,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:40:07,"Inspiration

Food shortages will be one of the biggest issues that humanity will face in coming years, so in line with sustainability goals around the world, we decided to try and tackle it by trying to bring urban farming into the limelight. 

Growing your own fruits and vegetables in your own backyard  is a great way to make the world greener, make you and your family/ friends more eco-conscientious, and save money on groceries.  

But running your own farm can be challenging, especially when you aren't sure what seeds you should buy. This is how we came up with Farm Buddy, an AI that tries to encourage people to farm recreationally by providing a list of the best crops for any given location.

What it does

Farm Buddy searches historical weather, seasonal, and soil information and provides accurate location-specific information about what fruits, vegetables, and other crops are best suited for its environment. It also provides a short description of why each plant should be planted in this specific location. 

Buddy, our friendly ferret mascot, also appears on the screen and gives a couple of fun facts about urban farming and the crops he decided to pick. 

How we built it

Farm Buddy is built on the foundation of OpenAI's text-DaVinci-003; when a user gives our Flask backend their location, it calls multiple different APIs to gather all of the location-specific data regarding factors that could affect the growth of the crop, such as the climate and season. All of this information is then sent into text-DaVinci-003, which does a lot of the heavy lifting for us and processes the information into a more digestible format to display. 

We decided to use this backend API with a frontend React.js web app since it would offer the most flexibility when it came to programming and when it came to UI/UX design. While our API is making calls to other 3rd party APIs, Buddy is talking to the user on the website.

Challenges we ran into

One of our main challenges was finding a way to engineer the prompts for text-DaVinci-003 to ensure that it gave us the most relevant information possible. It took a while, but we found the best way to input the data we had found about the user's location and also figured out a way to pass that information back to our front end directly without much external processing.

Another major issue was, of course, time. Being on such a short deadline meant that we had to cut out a lot of functionality from Farm Buddy that we had wanted to achieve.

Overall our biggest challenge was nailing down the UI/UX design for our web app; we had strong design intentions for our project and wanted to create this idea of 'Buddy'. We spent far too long making sure our colours were right and that our transitions were as smooth as possible. Near the end, we did have to cut some corners, which was very disappointing, but we still are very proud of our final product.

Accomplishments that we're proud of

Our design and UI are definitely what we are most proud of especially considering the amount of time we spent working on them. 

What we learned

The main takeaway for us is the importance of proper planning and time management and understanding how best to complete our goals within a given time frame -- how to be realistic. It was also very interesting getting to play with the openAI APIs and learning how best to engineer the prompts to build an actual web app using it.

We also learnt a lot about how best to work together as a team, how to delegate tasks and break down large complex problems into smaller ones that are easier to tackle.

What's next for Farm Buddy

Next, we'd love to add more features: 


A way to track your harvest's based off of what season you're in and how long until the next one
A database of different crops/ seeds and how to take care of them best given your climate
Making buddy have more dialogue options and overall more interactive
The big one is definitely trying to fully deploy our site so that it's available for everyone to use

",https://github.com/n-kly/bitcamp-2023,https://youtu.be/NeLKDZndo7E,"Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack, Best UI/UX Hack - Bitcamp","openai, python, javascript, react, flask, api",Nirav,Koley,niravkoley@gmail.com,,Yes,The University of Maryland at College Park,"","","This weekend was really fun, getting to meet all the sponsors. It was really interesting to work in a team on GitHub!",Yes,University of Maryland - College Park,3,Akshay,Trivedi,aku24.7x3@gmail.com,Anish,Bhupalam,anishbhupalam@gmail.com,Vignesh,Rangarajan,vrangara@terpmail.umd.edu
Email Ahoy!,https://bitcamp2023.devpost.com/submissions/403634-email-ahoy,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 00:56:04,"Inspiration

When brainstorming, our group found that emails were a major stressors in our lives. We had the shared experience of feeling overwhelmed by a constant stream of relevant emails. Therefore, we decided to gamify the email experience. We also like pirates...

What it Does

Our project, italics_Email Ahoy!_italics, is a simple companion project for your email. Email Ahoy! sits in the corner of your screen, or on a second monitor, and whenever you receive an email, a new enemy pirate appears. After you have opened and read that email, your pirate defeats the enemy, and you get a doubloon!

How we Built it

We built Email Ahoy! with Python, the Google API, and the italics_pygame_italics library. We used a de-coupling design structure for the actual game to connect to the Google API, and we built all animations using italics_pygame_italics and assets found online. 

Challenges we Ran Into

Our team, as a whole, had little experience with italics_pygame_italics and the italics_Google API_italics. We spent hours trying to understand the italics_Google API_italics, specifically learning that having too many unread emails causes the API to break, without raising any observable exception. We also were challenged by Github, especially since all of us were working on the same file in the same project at the same time. Lastly, we weren't able to implement the full extent of our idea, because we ran out of time :(

Accomplishments that We're Proud of

We are proud of having a working connection with the Google gmail API, and also having an actual visual project. We are also proud to have submitted something for our first time at Bitcamp.

What We Learned

We learned a lot about teamwork on a small group project. One of our members had never used python before, so they learned a lot of about the language. As a group, we all learned about pygame, the Google API, and Github.

What's Next

We plan to continue working on Email Ahoy!, by adding more features, like cosmetics, and a shop. Eventually, we would love to develop it into a browser extension.
",https://github.com/yuwex/Bitcamp2023.git,https://youtu.be/UdY-iVCEPEw,"Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best Razzle Dazzle Hack - Bitcamp, Best Gamification Hack - Bitcamp","python, pygame, google, email, api",Brandon,Jenkins,bjenkins0829@gmail.com,,No,"University of Maryland, College Park","","",GitHub Desktop was perfect for this.,Yes,University of Maryland - College Park,2,Will,Rabalais,will.spam.emails@gmail.com,Yuji,Wexler,yuji@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/09/2023 01:14:59,"","",,"","",Aaquib,Syed,aaquibahm@gmail.com,,"","","","","","",University of Maryland - College Park,0
LectureGPT,https://bitcamp2023.devpost.com/submissions/403647-lecturegpt,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 01:22:00,"Inspiration

Being students ourselves, we sometimes miss out on vital details during lectures and don't feel confident in what was just taught. This product provides a way to quickly summarize our lectures and test our knowledge with practice problems to boost confidence.

What it does

LectureGPT is a Python application that allows students to upload lectures either via YouTube links or mp3 files and summarize them. It also provides practice problems in concepts they wish to practice. 

How we built it

Our Python program was broken down into 4 main tasks:


Getting an mp3 file from the specified Youtube Link:
We used the Pytube library to download the mp3 file.
Transcribing that mp3 file into text:
We used Whisper through the OpenAI API to transcribe the mp3 into a text file.
Feeding that text into GPT to get a lecture summary and provide notes/practice problems:
We used ChatGPT via the OpenAI API to get a summary of the transcription as well as provide practice problems.
Wrapping the functionality up in an aesthetic GUI:
We used the CustomTKinter library to create a GUI.


Challenges we ran into


Supporting Panopto Recordings:
Originally we wanted to transcribe UMD Panopto recordings but we had trouble scraping the m3u8 request codes programmatically and furthermore converting m3u8s into mp3s. We decided to not include Panopto support for this version.
Whisper's File Size Limit:
Whisper has a file size limit of 25 Mega Bytes so we had to use the FFmpeg library to cut the video into smaller chunks and transcribe each separately before combining their results.
ChatGPT Prompt's Character Limit:
The ChatGPT API has a character limit of 4096 characters while some of our longer lectures could reach up to 50,000+. Furthermore, ChatGPT can't remember individual blocks of text so we had to summarize each block and then get ChatGPT to summarize those summaries.
OpenAI's Credit Limit
For free accounts, OpenAI has a credit limit of $5 which we each quickly burned through. By the end, we had to start paying to keep using their APIs.


Accomplishments that we're proud of


Getting around file size and word limits to summarize hour+ long videos
Properly using version control with Git/GitHub.
Making a clean GUI and webpage for the product.


What we learned

We learned a lot about video streaming and the purpose of m3u8 files and how they differ from regular mp3 or mp4 files. We used many new libraries for the first time including OpenAI, TKinter, Selenium, Pytube, and FFmpeg. Most importantly, we learned how to divide up a programming project among our members and maintain our source code with GIT.

What's next for LectureGPT


Support for Panopto Recordings
Converting the app into a web app
Upgrade GPT to 4
Add support for more systems
Use our own ML algorithms to fine-tune the transcriptions

","https://lecture-gpt.vercel.app/, https://github.com/RodzAmor/Bitcamp2023",,"People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp","python, openai, pytube, ffmpeg, pydub, json, dotenv, re, tkinter",Thomas,Edwards,tedward6@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","","We used GitHub to host all of our code which worked really nicely and allowed our team to work on separate aspects of the project.

OpenAI has really intuitive APIs that let you use their impressive services programmatically. However, the limited amount of uses per free account is a shame and we had to make several new accounts throughout the hackathon.",Yes,University of Maryland - College Park,3,Ayhan,Mehdiyev,mehdiyev.ayyhan@gmail.com,Rodz,Amor,ramorstem2022@gmail.com,Eknoor,Kaur,ekykaur@gmail.com
Frontier Fugue Fighters,https://bitcamp2023.devpost.com/submissions/403650-frontier-fugue-fighters,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 01:30:55,"Inspiration

Rhythm games and fighting games... both amazing game categories.
But what if there was a game that combined both? 
From that idea, Frontier Fugue Fighters came forth!

How we built it

The wild-west aesthetics of this game are all composed of hand-drawn illustrations, carefully composed to match both existing fighting game visuals, while including the general theme within this year's bitcamp. These assets were then taken and given a nostalgic effect using a pixelization shader in Godot.

For the rhythm game aspect, we took inspiration from games like Rhythm Heaven by requiring the inputs to line up with the music beat for maximum effect. We did this by counting the frames between beats and tweaking several parameters in order to make the game feel smooth. The end result is a flexible system which can be adjusted on the fly to improve user experience.

For the fighting game aspect, we simplified traditional fighting games while still keeping the core mechanic of attacks beating grabs, grabs beating blocks, and blocks beating attacks. However, the rhythm mechanic adds a unique twist: depending on the timing of your input, your attacks, blocks, and grabs will be more or less effective! Will you stay on tempo to be the most efficient, or will you try catching your opponent off-guard by going off-beat?

A lot of thought and care has been put into our UI and UX design as well. The opening screen is flashy and responsive with several visual and audio cues, allowing players to become immersed in the game with a smooth character selection UI. This continues into the fighting screen, where after the simple tutorial, you jump right into the action. The characters bob to the beat, and the marshmallow in the top center provides a visual indicator for the tempo. The inputs are responsive and the animations are clear and fast, contributing to that fighting game feel!

Lastly, with a rhythm game comes its audio and sound design! We had to find the right audio to match the aesthetic and 8-bit like design. A lot of the fighter-like visuals and audio components of this game were inspired by other popular fighter games you may know! 

What we learned

None of us had worked with Godot before, although we were all interested in game design. After many hours of trial and error, and lots of video tutorials, we all learned the basics of the engine and were able to implement complex concepts.
Some of us had not used GitHub before either! We had traditionally collaborated on code using only one computer, but tighter deadlines demand more efficiency. Through files lost through pushing to main and frustrated discussions on how to fix an error never before seen, we were able to set up a repository, have it automatically sync to Godot, and keep our code organized and up to date!

What's next for Frontier Fugue Fighters


More beats to beat em' up to!
Different kits for the different marshies!
Combos! Special attacks! There's so much more we can pull from fighting games!

",https://github.com/wolr210/Frontier-Fugue-Fighters,https://youtu.be/3VPZXTUj2qc,"Best First Time Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp","godot, github, gdscript, git",Kazu,Tan,pikaminecraftlover@gmail.com,,Yes,University of Maryland College Park,"","","Some of us went to the hardware workshops, which we found very insightful! 

Overall, we all used GitHub, which worked well for collaboration, but was difficult to learn for the members who were brand new to using it. We wish we went to the Git workshop...",Yes,University of Maryland - College Park,3,Jay,Rana,jay.rana1@gmail.com,Alex,Van,alextvann@gmail.com,Liam,McConnell,liammcconnell5@gmail.com
Cookie Jar,https://bitcamp2023.devpost.com/submissions/403656-cookie-jar,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 01:40:32,"Inspiration

Our inspiration for Cookie Jar was to create an online cookbook that helps reduce daily food waste in households. Traditionally, when searching for recipes, users look for recipes and then check if they have the required ingredients. At Cookie Jar, we eliminate this middle step by allowing users to search directly by ingredients.
In addition, we wanted to create a social media platform for foodies, where users can share their own recipes and their favorite recipes they would like to try. This feature enables a collaborative community where users can exchange cooking tips and inspire one another to try new recipes. Overall, our goal is to create a platform that promotes sustainable cooking practices and encourages users to reduce their environmental impact by making the most of the ingredients they have on hand.

What it does

Once a user creates an account on Cookie Jar, the landing page will feature a search functionality where they can input the ingredients they have on hand and discover various recipes. Users can also ""favorite"" recipes to save them for later viewing. These features enable users to find and save recipes easily, allowing them to make the most of their ingredients and reduce food waste. 

How we built it

The mockups were built in Figma.
The backend is built using Python-Flask.
The front end is built using CSS/HTML.
The database uses cockroach-db.

Challenges we ran into

Setting up and managing the CockroachDB database.
Getting started with sessions in Python-Flask.

Accomplishments that we're proud of

Exploring new languages (Python)
Learning new platforms (CockroachDB, CSS/HTML)
Managing a server (Python-Flask)

What we learned

Designing and managing a database using CockroachDB.
How to create websites with a python backend and html frontend.

What's next for Cookie Jar


Creating a dropdown menu from the profile icon that features Login, Register, and Sign out options
Create pop-ups for errors such as entering a taken username when creating an account, entering an incorrect username or password when logging in, invalid inputs when creating a recipe
Tagging recipes for filtering based on cuisine
Better UI

",https://github.com/yitingzh0913/CookieJar_Bitcamp2023,,"Best Domain Name from Domain.com - Major League Hacking, Cockroach Labs - Best Use of CockroachDB Serverless, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","python, flask, html, css, figma",Collin,Chiang,collin.chiang1@gmail.com,,Yes,"University of Maryland, College Park","Dontcountyourcookiesbeforetheycache.tech, Ifyougiveabyteacookie.tech","CockroachDB: It was incredibly easy to set up and get started running and managing the database, however, I believe there needs to be more documentation and support material for more advanced cockroachdb-specific tools.","Internet inconsistent, had to use mobile hotspots",Yes,University of Maryland - College Park,2,Yiting,Zheng,sapphire32123@gmail.com,Christina,Xu,christinaxu10@gmail.com
Generalized Grover's Algorithm Color Graph Solver,https://bitcamp2023.devpost.com/submissions/403664-generalized-grover-s-algorithm-color-graph-solver,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 01:54:12,"What it does

Given a graph (nodes, edges, colors) and a number of repetitions n, graph_colorings() outputs the circuit used and the frequencies observed by the simulator. The number of qubits used will equal len(nodes) * ceil(log2(len(colors)) + len(edges) + 1, so to ensure reasonable runtime keep this number below 10.

Important Use Information

Due to the limited time available, there are limits on what functionality has been implemented for nodes and colors. Each must be a tuple/list of consecutive integers starting at 0 (i.e (0, 1, 2, ...)). edges is a tuple of pairs of elements from nodes.

The output

When graph_colorings(nodes, edges, colors, n) is run, the frequencies that the simulator returns for each coloring are displayed in decreasing order. The bars that are colored red are the correct answers, while blue bars are incorrect. The label of the graph shows the percent of simulated runs that returned a correct answer. As mentioned, the function also returns the quantum circuit used and the frequency distribution. The quantum circuit can be viewed using qc.draw().

Plans to take it further

There are a few things I would have liked to implement if I had had more time.

Grover repetition estimator

Each repetition of Grover's Algorithm rotates you through the superposition of all possible answers and each problem has an optimal number of repetitions to approach the superposition of only correct answers which is determined by arcsin(num_solutions / num_possibilities). The current version relies on the user to input the number of repetitions, but by estimating the likely number of solutions for a given graph, I should be able to determine the best number of repetitions to maximize the likelihood of finding a correct answer.

Graph interface

I would like to implement an interface through which the user can create a graph with nodes and colors named however they like, and to display the most frequently observed graph coloring using networkX. I could also make an interface that emulates a Sudoku board.

Gate simplification

It would constitute a significant reduction in calculation time if the circuit builder recognized when a simplification is possible, such as when a gate is followed immediately by its inverse. Currently, there are many instances where an X gate is performed twice on a node in immediate succession, which is a null operation.

Variable color subsets

I would also like to implement the ability to give each node its own subset of colors from which to choose from. One possible application for this is in solving a sudoku puzzle, where specific nodes are already filled in with a single value. In a 9x9 sudoku board, each prefilled node would reduce the number of qubits required by 3. My existing implementation already includes some of the backbone for this but I didn't have time to put it all together.

Multi-sided edges

In order to reduce the number of qubits required, it may be useful to implement edges that connect more than two nodes. These edges would indicate that every node connected in this way has to be colored differently. This again could be useful in sudoku, where instead of creating 36 edges for each row, column, and 3x3 square of the board to indicate that no pair of two nodes in each group can be the same, a single 9-sided edge can be made that indicates that all 9 must be different. This obviously constitutes a significant reduction in qubits required to represent certain graphs. For example, the number of qubits needed to represent an empty 9x9 sudoku board would decrease from 1297 to 352.

Opposite edges

Another possibility is edges that indicate that their nodes must have the same value instead of different values, which would extend the capabilities of the solver to a whole new range of problems.

Resources

Mukherjee, Sayan. “A Grover Search-based Algorithm for the List Coloring Problem.” arxiv:2108.09061v2, 8 Feb. 2022, IEEE, arxiv.org/pdf/2108.09061.pdf
",https://github.com/TheMLevin/GroverGraph/blob/main/GroverGraph.ipynb,,"Best Moonshot Hack - Bitcamp, Advanced Quantum Track - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp","ibm-cloud, python",Mark,Levin,marklevin.co@gmail.com,,Yes,University of Maryland,"","","This time at Bitcamp I spent most of time helping other hackers as a mentor, which was an interesting experience and I like being able to help people.",No,University of Maryland - College Park,0
BASM,https://bitcamp2023.devpost.com/submissions/403743-basm,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:07:30,"Inspiration

I was inspired by the Pico-8 project. The idea of a lightweight virtual console that users could plug-and-play code into under creative restraints has always been interesting to me, and I wanted to see how I could extend it. I also wanted practice in writing simple interpreters/assemblers, and brushing up on my C and 8080 assembly seemed like a great way to do that.

What it does

The Program Known As BASM consists of two parts; the previewer, which features custom syntax highlighting, checking for code correctness, and error linting, and the BASM engine, which parses, compiles, and interprets user code.

Under the hood, the BASM virtual processor has an architecture similar to the NES, albeit heavily simplified. Users are given a few kilobytes of memory to work with, and a lightweight graphics engine lets them create and animate simple sprites. The language itself is closely modeled after 8080 assembly, with the advantage of being able to abstract in software the more frustrating parts of working with decades-old processors.

How we built it

The Program Known As BASM is a hodgepodge of an entirely bespoke UI and text rendering framework written with SDL2 and an equally customized interpreter, principally powered by pointer mayhem and pretending the memory leaks aren't real.

Challenges we ran into

It turns out writing an assembler in less than two days is very hard for someone with little experience, particularly when I spent half that time writing GUI code! I'm much more used to Python and TypeScript, so the shift to C, a language I'm less familiar with, and embracing the archaisms and quirks that come with it was a welcome challenge, but a challenge nonetheless. Memory management was a consistent issue, as was passing data to and from the multifarious parts of the application.

Accomplishments that we're proud of

I've learned more about writing GUI projects from scratch in the past 36 hours than I ever have in my years of various projects before. I feel a lot more comfortable working closer to memory in C and with writing simple parsers, and I'd love to explore programming language development even further in the future.

I'm personally very proud of the syntax highlighting -- that's all custom, and it wasn't easy! There's a lot of strange hacks under the hood to make it all come together.

What we learned

C is a difficult language! The actual assembly was the least complicated part of this project, contrary to expectation.

What's next for BASM

I didn't implement as many of the features as I wanted to (the assembler remains maybe 70% finished), but this project really interests me, and I want to work on it even further! The most obvious next step is getting some nicer graphics in there, and maybe even allowing for live editing from within the application.
",https://github.com/Spirati/basm,,"Best Moonshot Hack - Bitcamp, Best UI/UX Hack - Bitcamp","asm, c, sdl2",Lynne,Cure,pjh.cure@gmail.com,,Yes,Baltimore Polytechnic Institute,"","",I'm afraid I stayed relatively low-tech at this hackathon (barely any web to speak of),No,Baltimore Polytechnic Institute,0
Grover's Quantum Algorithm and its relation to graph theory,https://bitcamp2023.devpost.com/submissions/403769-grover-s-quantum-algorithm-and-its-relation-to-graph-theory,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:21:53,"Inspiration

I completed this project because of a deep interest in quantum computing and quantum machine learning, and a desire to learn more about it. 

What it does

My program uses Grover's Quantum Algorithm to color regions on a graph so that no two regions of the same color are touching. to do this it places all possible states into a quantum superposition and uses a matrix called an oracle to isolate the possible solutions to the problem and uses a diffusion matrix to increase the chance of the desired outcomes. repetition of the last two steps completed enough times makes the desired outcomes the only ones likely to occur. 

How I built it

I initially started trying to solve this problem for any graph which consisted of 2 or more square regions each bordering between one to four other regions. I eventually discovered an encoding method and oracle algorithm which would successfully solve this problem, but needed at least 5 qubits per region to encode this. I decided that this was a prohibitively large number of resources and added more constraints to the input.

I changed my base constraints to the assumption that the square regions fit into a rectangle which was X regions across and Y regions down. this allows me to only need one qubit per region to encode the starting state, with the total number of qubits needed being equal to two times the number of regions. 

the oracle uses XOR gates (consisting of two CNOT gates each) to verify that 2 regions aren't the same color in a possible solution. Each XOR gate output must be stored on a different qubit, and the minimum number of possible XOR comparisons that could prove a solution is one less than the number of regions. A multi input gate is needed to verify that all XOR gates outputted correctly for a possible solution, bringing the number of qubits needed for solutions up to be equal to the number needed to store the possible states. 

the output is a binary number where each number determines the color of the corresponding region. To change the input, simply enter the number of regions across the new area is as X and the number of regions down it is as Y.

Challenges I ran into

I had difficulties conceptualizing how to minimize the number of qubits because I didn't want to constrain the possible inputs. I eventually constrained my inputs enough that each region could be represented with one bit, at which point I started making progress quickly.

What I learned/What's next

I'm proud to say that the program I created is capable of accepting variably sized input graphs. I learned about Grover's algorithm in far more detail than I ever knew before, and gained a better understanding of both Qiskit and quantum computing in general. I also learned more about myself. I started this project uncertain of myself and my abilities, and not knowing if I would be able to accomplish my goals. In the process of completing my project I proved to myself that I am more than capable of achieving difficult goals when I commit myself to my goals. My next goal with this project is to implement a way to reduce the number of qubits needed to process the oracle, which would increase the speed and scope of this project. 
",https://github.com/noahkanter/Grovers-Algorithm-Bitcamp-2023,,Advanced Quantum Track - Bitcamp,"python, qiskit, jupyterlab",Noah,Kanter,nkanter@umd.edu,,Yes,University of Maryland College Park,"","","I found Qiskit easy to understand and use, and enjoyed working with it a great deal.",Yes,University of Maryland - College Park,0
Playright,https://bitcamp2023.devpost.com/submissions/403770-playright,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:24:04,"GitHub Repo: https://github.com/TigerHacks-Competition-Team/Bitcamp-2023

Inspiration

As musicians, we were frustrated with the lack of high-quality tablature and sheet music available online for the songs we wanted to learn. We wanted to create a platform that would automatically generate accurate MIDI files for piano songs and make it easy for musicians to learn new songs and improve their playing.

What it does

That's why we created Playright, a platform that leverages AI and audio engineering to transcribe audio files into MIDI files and create virtual play-along environments. Playright makes it easy for musicians to learn new songs and practice their playing skills by providing accurate and engaging play-along experiences.

How we built it

To build Playright, we utilized a combination of AI and audio engineering techniques. We created custom algorithms that analyze audio files and convert them into MIDI files with high accuracy. We then built a virtual environment using ThreeJS, allowing users to play along with the MIDI files in real-time.

Challenges we ran into

Throughout the development process, we encountered several challenges. One of the biggest challenges was fine-tuning the AI algorithms to ensure accurate and high-quality transcription of audio files into MIDI files. Additionally, deploying the platform to Google Cloud was a complex process that required a lot of troubleshooting.

Accomplishments that we're proud of

Despite the challenges we faced, we're proud of the fact that we were able to create a functional and user-friendly platform that makes it easy for musicians to learn new songs. We're also proud of the fact that we were able to leverage AI and audio engineering techniques to automate the process of transcribing songs into MIDI files.

What we learned

Throughout the development process, we learned a lot about AI, audio engineering, game design, and ThreeJS. We also learned about the challenges of deploying a complex platform to the cloud and the importance of collaboration and communication when working in a team.

What's next for Playright

Moving forward, we plan to expand the platform to support additional instruments and genres of music. We also plan to integrate more advanced AI and machine learning algorithms to further improve the accuracy and quality of our transcriptions. Finally, we plan to continue to iterate on the game design and user experience to provide the best possible learning environment for our users.
","http://playright.tech, https://github.com/TigerHacks-Competition-Team/Bitcamp-2023, https://github.com/TigerHacks-Competition-Team/bitcamp-2023-fbcloud, https://github.com/TigerHacks-Competition-Team/Bitcamp-2023-Kub, https://bitcamp-2023-git-main-tigerhacks.vercel.app/login",https://youtu.be/G1Si4gRsliw,"Best Domain Name from Domain.com - Major League Hacking, Best Machine Learning Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","sveltekit, google-cloud, firebase, three.js, google-kubernetes-engine, google-cloud-run, google-cloud-compute-engine, scss, bulma, sass, spleeter, basic-pitch, pytube, python, node.js, typescript, javascript",Gus,Ruben,gusruben@protonmail.com,,Yes,Jackson-Reed High School,playright.tech,"",For the most part everything worked really well. We had a great experience with the NFC tags and many of the services we used like GitHub and Google Cloud. We did have some difficulties with the WiFi which were frustrating at times.,Yes,"Woodrow Wilson High School, Wilson HS",3,Maxwell,S.,maxwell.s.school@gmail.com,Ruadhan,KM,ruadhan.kellermcleer@gmail.com,Anh,Pham,demonxranger8@gmail.com
Ripoff Bop-It,https://bitcamp2023.devpost.com/submissions/403778-ripoff-bop-it,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:28:29,"Inspiration

We made this project in hopes to improve other people's reaction time.

What it does

In a limited amount of time, the user has to match the text color to the answer on the screen.

How we built it

We built it using python and built in python modules including pygame, sys, and random

Challenges we ran into

Challenges we ran into was getting the specific order randomized and always generating a different order.

Accomplishments that we're proud of

We are proud of completing our project early.

What we learned

We learned how to create a timer using pygame.

What's next for Ripoff Bop-It

We are going to attempt to win this hackathon.
",https://replit.com/@YosephGetachew1/Bitcamp-Project#main.py,https://youtu.be/k614rdibNFw,"Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best Razzle Dazzle Hack - Bitcamp","python, pygame, random, sys",Yoseph,Getachew,ytgetachew.cs@gmail.com,,Yes,Baltimore Polytechnic Institute,None,No,Wifi was not the best and could not work proficiently on project when needed in the Xfinity center.,Yes,"Baltimore Polytechnic Institute, Batimore Polytechnic Institute",2,Isaiah,Jones,teamzay06@gmail.com,Diego,E,diegoef555@gmail.com
Quantum Map Coloring Problem,https://bitcamp2023.devpost.com/submissions/403790-quantum-map-coloring-problem,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:41:12,"Inspiration

We believe that Quantum Computing represents the future of computer science - We wanted to challenge ourselves to create a project that would help us break into the field.

What it does

The program takes an input of a textfile that contains a graph in the form of an adjacency list, and ""colors"" the graph such that no adjacent nodes have the same color.

How we built it

We used the Qiskit library in Python to encode the qubits, and Grover's algorithm to find the solution.

Challenges we ran into

We had to deal with schedule conflicts in the team, and the wifi configuration was more akin to a jammer.

Accomplishments that we're proud of

We made a cool project! We also convinced a team member to major in Computer Science with the rest of us.

What we learned

Basics of quantum computing and Python

What's next for Quantum Map Coloring Problem

We can optimize the algorithm and also generalize for more colors and different types of graphs
",https://github.com/Aurynium/quantumcoloring.git,,"Advanced Quantum Track - Bitcamp, Best Bitcamp Hack - Bitcamp","python, qiskit",Aurynium,Yu,matthew.yu904@gmail.com,,Yes,"University of Maryland, College Park","","","The bitcamp track organizers were friendly and helpful, and created great presentations for their respective audiences.
Qiskit was definitely the right choice for getting started with Quantum, and has amazing resources for beginners and advanced quantum users alike.",Yes,University of Maryland - College Park,3,Wilson,Smith,01wsmith+devpost@gmail.com,Serena,Huang,serenaqhuang@gmail.com,Nikolai,Smith,nikolai@terpmail.umd.edu
So You Want to be a Realtor,https://bitcamp2023.devpost.com/submissions/403795-so-you-want-to-be-a-realtor,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:47:22,"Inspiration

Our love for creating games made us want to try to make something fitting the theme of a game show.

What it does

The game has five mini-games presented in a The Price is Right-style game show, hosted by an animated character named Bestudo (who resembles a certain well-known terrapin). The five mini-games each present the player with information about a particular house, and the player must attempt to guess a numerical value for another data point. The mini-games include guessing the house price (both directly and in a ""One Off""-style mini-game), the property taxes, the year it was constructed, and the number of bedrooms and bathrooms.

How we built it

We used the Unity game engine for the 3D environment with the C# language for scripting. We obtained the real estate data from Zillow. We rigged and animated the character Bestudo using Mixamo.

Challenges we ran into

We had initially wanted to be able to obtain all the information about houses on-the-fly via APIs to allow for a more unique experience each time the game is played. Unfortunately, we discovered that there are few of such APIs, and none of the ones we did find would provide the information we were looking for. After discussing this with representatives from the CoStar Group, we settled on obtaining the data ahead of time manually to keep this project within scope.

Accomplishments that we're proud of

We are proud that were were able to create a polished, easy-to-use game in a very short amount of time.

What we learned

We learned how to create a dynamic dialogue system for characters to speak through

What's next for So You Want to be a Realtor

Future improvements for So You Want to be a Realtor can include dynamic fetching of real estate data from the internet (if an appropriate API can be found), the addition of multiplayer, voice acting for Bestudo, as well as a variety of additional mini-games.
","https://github.com/grabermtw/Real-Estate-Gameshow, https://github.com/grabermtw/Real-Estate-Gameshow/releases/tag/v0.1-alpha",https://youtu.be/AJwuk0JrCu4,"CoStar Group - Best Use of Real Estate Data, Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, c#, mixamo",Matt,Graber,mgraber1@terpmail.umd.edu,,Yes,"Syracuse University, Johns Hopkins","","",We have found that Unity is a great engine for rapid prototyping. It equipped us with everything we needed to create what we wanted.,Yes,University of Maryland - College Park,1,Matthew,Vorsteg,mvorsteg7@gmail.com
SpiralScope-Parkinson's Spiral Disease Detection App ,https://bitcamp2023.devpost.com/submissions/403800-spiralscope-parkinson-s-spiral-disease-detection-app,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:55:16,"Welcome to a BitCamp 2023 Hackathon project

*SpiralScope - Parkinson's Spiral Disease Detection App *

This is a web application for detecting Parkinson's disease using spiral drawings. Parkinson's disease is a neurodegenerative disorder that affects movement, and one of the symptoms is tremors in the hands. Spiral drawing tests are commonly used to diagnose Parkinson's disease.

Quick Tour

CustomCamera Folder- Main App where IOS app is built Inside CustomCamera, the Shared folder is where all the code was built. The rest of the files are meant for configurations for different devices.

Custom_CameraApp.Swift runs the main App ContentView.Swift holds all the SwiftUI components ParkinsonDetector.mlmodel is the machine learning model built using Python Tensorflow keras approach. It was built using a convolutional neural network.

After many trials and errors, the app has a 96% accuracy to detect Parkinsons from a spiral drawing.

*How it works? *

Draw a spiral on a white paper, take a picture of it and get your results!!

If the result indicates that you may have Parkinson's disease, please consult a doctor for further evaluation.

Usage

Clone the repository Open the repo on XCode Just Run the App

DATASETS USED FOR ML: 
https://www.kaggle.com/datasets/anoushkasud/parkinson-spiral-test 
https://www.kaggle.com/datasets/kmader/parkinsons-drawingshttps://www.kaggle.com/datasets/banilkumar20phd7071/handwritten-parkinsons-disease-augmented-data

******Quick Note on Demo: The drawing classified as parkinsons was traced from a spiral test online from
a patient diagnosed with the disease
",https://github.com/zaalgocrazy/ParkinsonsAppIOS,https://youtube.com/shorts/ygK8LCbXW2Y?feature=share,"Best Machine Learning Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Fannie Mae - Don’t Put All Your Eggs in One Basket, Best First Time Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Best Razzle Dazzle Hack - Bitcamp","swift, firebase, python, tensorflow, web, amazon-web-services, s3",Abhinav,Garlapati,abhinavbg03@gmail.com,,No,University of Maryland,"","","Tech Stack: SwiftUI, Python Tensorflow Keras, Firebase, AWS S3

It was our first times with SwiftUI, Firebase, and AWS S3",Yes,University of Maryland - College Park,2,Taha,Al Nufaili,talnufai@terpmail.umd.edu,zaalgocrazy,,zbelihomji@gmail.com
tL;Dr,https://bitcamp2023.devpost.com/submissions/403802-tl-dr,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:57:34,"About

I got the idea for Tl;dr after talking to my friend at this hackathon. We were at first trying to hack away at audio Discretization, something we learned would take a lot more than a few days to accomplish. We needed something that was both doable, but also impactful to some extent by its innovativeness. She pointed me toward making a bot of some kind, some automatic, but when I was given that suggestion I started considering the potential in automation, and automatic summarization ended up being the best idea I could get out of that train of thought.

The project

Simply put, it's a summarizer.  Perferbly taking chunks of text consisting of 2 or more sentences, will shorten the text and get the important parts, and turn them into a semi-functional sentence.  There are two modes. One mode is the Teal Deer mode. (tL;Dr) Ths mode will give you a fairly easy-to-understand summarization that is roughly similar to the original text, but usually half in length. The other mode is the Black Deer mode. (bD;Dr) This mode is hardcore and will convert entire essays into singular sentences. Sentences tend to be only a line long for these and are usually very dense in meaning.

Challenges

Maintaining the meaning of people's words, and trying to say less while keeping at least 60% of the meaning intact was difficult. I had to analyze linguistic patterns and recognize correlations between the subject, verb, and object of a sentence to know when and where it'd be best to extract critical information.  

Learned

What this project has shown me, and what the few other projects I attempted to start on that same day had shown me, is that software engineering is only 25% coding and debugging. The part that really takes up that larger portion of time is considering the best way to approach the situation, and trying to construct a nearly perfect system of logic that will achieve the goal you set out for. Spending hours studying grammar, and looking at passages myself has really shown me that programming isn't really just programming since the logic of what makes up every fields in the world has to be maintained and grow upon by us.
",https://github.com/frozennuts/tL-Dr/tree/main,https://youtu.be/qfI2HIjiUkc,"Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp",python,Daniel,Awoke,dawoke@terpmail.umd.edu,,Yes,Unviersity of Maryland,n/a?,i dont have any,"I used alot of software and online resources since the research was the key to success here. Having bad wifi at times was a struggle, but I luckily had good data so I cold make up for it.",Yes,"",0
Group2Meet,https://bitcamp2023.devpost.com/submissions/403803-group2meet,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 02:58:27,"Inspiration

We recognized the need for temporary spaces to plan group projects in an academic setting, but found that GroupMe and When2meet, while both popular, did not do a sufficient job in fulfilling this need.

What it does

Allows users to join groups via a link (using Google sign-in) and send chat messages, create deadlines, and set up meetings.

How we built it

We stored our data in Postgres and used Phoenix LiveView to get a live updating web app connected to the database.

Challenges we ran into

CSS continues to be terrible and the database interfacing framework for Elixir was very challenging to learn.

Accomplishments that we're proud of

Despite CSS being an unmitigated disaster to work with, the GUI is very well designed and nice to use.

What we learned

We learned how to use Phoenix, Elixir, and Ecto.

What's next for Group2Meet

We need to actually finish the When2meet part of our web app and connect it to meeting creation. We also need to show the user a list of the groups that they are in.
",https://github.com/JMS55/group2meet,,"","phoenix, elixir, ecto, tailwind",Justin,Hudis,justin.hudis@gmail.com,,Yes,"University of Maryland, College Park","","","GitHub continues to be useful. Despite not using it whatsoever, we had a great experience with MongoDB.",No,University of Maryland - College Park,1,Jasmine,Schweitzer,jsch@terpmail.umd.edu
Domicilium,https://bitcamp2023.devpost.com/submissions/403814-domicilium,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:08:15,"Inspiration

Immigration is already an incredibly tough and challenging process, it doesn't have to be made harder by the complexity of immigration policies and the difficulty of finding the right place to make your new home.
As a first generation immigrant, I've always heard stories about the difficulty of dropping everything you know and have to go to a country you know nothing about. Leveraging the power of web technologies I wanted to make an accessible interface for immigrants to figure out which country is the best fit for their new home.

What it does

Our web-app aggregates data from various humanitarian and government sources to present a comprehensive map of common destination countries for migration. It provides those in the process of migrating with information about the quality of life in the country they're moving to, the cost of living, cost of rent, and additional information about who ends up moving there. We also have future plans to add information about country specific immigration policy.

How we built it

Built on top of Deck.gl it uses an Open Source fork of MapBox to help visually render the quality of life scores for countries across the globe. The data itself is sourced from UN sources, the International Organization for Migration, and Numbeo for cost of living estimates.

The data itself had to be processed independently using Pandas and Python in order to get all the information into a consistent format.

Challenges we ran into

The original plan for the project was to have immigration policies for each country available, however that ended up increasing the complexity of the project to the point where we would have been unable to complete it. Each country has its own immigration policy, which sometime may depend on the country that the person is originating from. While we do have plans to add this functionality in the future, it was too complex to add in the time we had available.

Accomplishments that we're proud of

I like how it looks! I was able to get most of the information I wanted to show displaying in a way that was both accessible and easy to read.

What we learned

Deck.GL is an extremely powerful visualization tool, we could definitely leverage it to make even more complex and thorough visualizations in the future. I also learned that there is a lot more public datasets available than I had originally thought

What's next for Domicilium

We want to leverage GPT-4 to help process the immigration policy from countries around the world to make that information simple and accessible for all migrants as well.
","",,"Bloomberg Industry Group - Best Public Sector Hack, Best Social Good Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best UI/UX Hack - Bitcamp","react, typescript, python, pandas, deck.gl, mapbox",Victor,N,victorvnovichkov@gmail.com,,No,"University of Maryland, College Park","","",I was able to learn a lot about Deck.GL which is a map visualization library in typescript/javascript.,Yes,University of Maryland - College Park,0
My-Fitterp-Pal,"",Draft,Pending,Project overview,04/09/2023 03:11:43,"","",,"","",Justin,Pratama,jcwpratama@gmail.com,,"","","","","","",University of Maryland - College Park,1,Vikas,Reddy,vikasreddy2313@gmail.com
TerpStrong,https://bitcamp2023.devpost.com/submissions/403837-terpstrong,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:44:43,"Inspiration

TerpStrong was born out of a simple yet powerful idea - to help students prioritize their health and fitness, without compromising on their academic commitments. As students ourselves, we understand the challenges of juggling school assignments and maintaining a workout routine. Our team recognized the need for a centralized app that would offer easy access to a wide range of workout instructions and tips, all in one place. With TerpStrong, we aim to empower students to build a healthy lifestyle that will sustain them beyond their academic years. So whether you're a seasoned gym-goer or a beginner, join us in our journey towards a stronger, healthier Terp community.

What it does

TerpStrong is an all-in-one gym app that provides users with workout information and guides, as well as a logging feature to track progress. It delivers a seamless experience, guiding users through exercises step-by-step and logging their progress so they can see their improvements over time.

How we built it

TerpStrong was built using the latest web development technologies, including the highly popular React framework for front-end, the efficient Express.js for back-end, and the reliable CockroachDB for database management. The use of these cutting-edge tools allowed us to create a robust and scalable application that can seamlessly handle a large amount of data and traffic.

Challenges we ran into

During the initial stages of the project, our team possessed a basic understanding of React for the front-end development. However, we sought to push ourselves further by taking on new challenges that we could overcome during Bitcamp2023. As a result, we decided to implement CockroachDB for managing our database, which posed a significant challenge given that it was our first experience integrating a database into an application. With guidance and assistance from Adryan at CockroachDB, we were able to overcome this challenge and develop an efficient database management system. Our team also effectively tackled minor challenges through strong teamwork, clear communication, and utilizing various resources available on the internet.

Accomplishments that we're proud of

We are proud to have created an app that has the potential to positively impact the lives of University of Maryland students. We are also proud of the user feedback we received, which helped us to continuously improve and enhance the app.

What we learned

Throughout the development process, we learned the importance of collaboration, user feedback, and iteration. We also learned valuable technical skills in React and CockroachDB, which will be useful in future projects.

What's next for TerpStrong

We highly value feedback from both the Bitcamp community and the public, as it helps us to continually improve our app. Going forward, we plan to implement additional features to further enhance the user experience. Our ultimate goal is to create an app that provides a positive and impactful experience for all users, and we are committed to achieving this through ongoing development and refinement.
",https://github.com/Andrewl1417/TerpStrongV2,https://youtu.be/AIS-jZ0F3Hs,"Cockroach Labs - Best Use of CockroachDB Serverless, Best Social Good Hack - Bitcamp, People's Choice Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","react, javascript, cockroachdb, express.js, bootstrap, html5, css3, node.js, npm",Quan,Ha,haminhquan3001@gmail.com,,No,University of Maryland - College Park,"","Github, VSCode, CockroachDB, React","As a team, we wanted to integrate our application with one of the sponsors. We knew our app would be good with a DB, therefore we decided to explore how to use CockroachDB, which comes with learning SQL and also client-server management. It was a challenge at first but Adryan from Cockroach DB was a great help in helping us overcome roadblocks.",Yes,University of Maryland - College Park,3,Matthew Ray,Lee,matthewraylee@gmail.com,Samuel,Kosasih,samadrianko@gmail.com,Andrew,Liu,aliu1213@terpmail.umd.edu
Grover’s Algorithm for Graph Coloring Challenge,https://bitcamp2023.devpost.com/submissions/403840-grover-s-algorithm-for-graph-coloring-challenge,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:46:14,"Inspiration

https://docs.google.com/document/d/1l1Vv3XQybGYYo7UTSTt_4HbMVdQIIoB3KlpEgSSnlG4/edit#

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Grover’s Algorithm for Graph Coloring Challenge
",https://github.com/tianchuxie/bitcamp2023,,Advanced Quantum Track - Bitcamp,"python, qiskit",Qingqing,Song,qs2097@nyu.edu,,Yes,New York University,"","","Wonderful, great learning experience in New Technology",Yes,New York University,1,Tianchu,Xie,tx675@nyu.edu
WakeMe App,https://bitcamp2023.devpost.com/submissions/403842-wakeme-app,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:48:34,"Inspiration

As college students, not having a sleep schedule is not unheard of. Needing to tough out through some working days due from studying until late for exams, completing projects and balancing with extracurriculars for 3-4 hours of sleep is unfortunately quite an acceptable norm, and sometimes our sheer willpower is not enough to hop out of the bed. By gamifying and socializing the process of waking up through our app, we hope to make it an exciting part of the day, rather than just a dreadful chore. Adding a little spice to the process along with your friends will hopefully help set a more energetic tone and give them the extra push of motivation to conquer the day ahead.

What it does

This app allows each person to join friend circles using codes. These friend circles are the basis of what allows people to choose songs for each other to wake up to.
Each day before midnight everyone in a particular circle would be assigned a random friend in the same circle to choose a song for the next day that they will wake up to and a challenge that they would have to complete in order to stop the song when they do wake up.
The next morning, based on the time of the person’s alarm, the song that was chosen by another friend would play until the person completes the challenge that was set by them. This would enforce that the person is woken up by the time they do complete the challenge. They would also have an opportunity to post a picture of their morning activity within 3 hours of waking up, which will give them bonus points. Ranking of friends will be based on their scores, which is determined by how fast they complete their morning challenge and whether they do perform other optional challenges.

How we built it

We used Figma to create a vision for how we’d want our app to look like, and the features we’d want to include to help gamify the process of waking up. Choosing a bright color scheme was key to set the tone for motivating someone to get out of their bed.

Challenges we ran into

A huge challenge for us was in the beginning where we had to come up with a feasible system  for “gamifying” and “socializing” a task that is rather personal. Coming up with a process that was stimulating without becoming a hindrance/burden to a person required careful consideration and planning.
This task, although something all of us do, is hard to make fun and effective at the same time. While we did have some roadblocks in that aspect, we were able to overcome them by doing research on what goes in to waking up, brainstormed multiple ideas to make it fun, and shortlisted some of them to incorporate into our app.

Accomplishments that we're proud of

We were able to come up with a unique idea for our app and build a full-fledged prototype that provides a detailed understanding of how our app works in the real world. This prototype, created in Figma, will give us a great wireframe to begin with, making it much easier to implement our app.

What we learned

We learned the process of creating an app, which starts with brainstorming and wireframing. During this hackathon, we explored deeply on designing and prototyping a mobile app. From the color theme of the app to the functionality of how our app should work, we were able to put in enough research to understand what choices would best fit our app.

What's next for WakeMe App

Our next step would be implementing the front end and back end of our mobile application. We would hope to do this in Swift, since the language is compatible with iOs. As we implement our app, we expect the app to have minor visual and functional changes, but the overall picture would stay the same.
",https://www.figma.com/proto/R7f5oltbp3nueiu4yuQBgs/Bitcamp-proj?page-id=0%3A1&node-id=3-21&viewport=211%2C464%2C0.85&scaling=scale-down&starting-point-node-id=3%3A21&show-proto-sidebar=1,,"Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp",figma,Nandini,Venkatesh,nvenkate@terpmail.umd.edu,,Yes,University of Maryland,"","",We interacted with Miro and Figma this weekend primarily. Miro greatly helped us in brainstorming ideas for our app while Figma really enhanced our ability to create our prototype while also focusing on its UI/UX.,Yes,University of Maryland - University College,1,Radhika,Patel,rpatel07@terpmail.umd.edu
Egg,https://bitcamp2023.devpost.com/submissions/403843-egg,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:49:25,"Inspiration

We weren’t too sure what we wanted to do this year, so we considered doing nothing at all. However, once we saw Fannie Mae’s task of creating an algorithm to generate optimal pools that have the most value, we became interested in exploring this territory. Grabbing on to this year’s theme of “Find Your Frontier”, we recognized the potential of utilizing an algorithm to optimize the selection of loans. We saw this as a new frontier for us to push the boundaries of what is possible in the world of finance.

What it does

The algorithm separates the loans into categories consisting of their class, maturity date, and loan term. Then, we traverse each category and generate a dictionary of states with their corresponding loans in the category. Here comes the hurdle (hard part!)

So, we implemented a slightly better greedy algorithm by strategically adding and removing loans while also considering their state percentage.

In the end, we generated high value pools of loans that meet the criteria of the best class possible.

How we built it

We used Python and related Python libraries like pandas. First, we preprocessed the data by scanning through and labeling which class each loan would qualify for. This step dropped more than half of the loans out of consideration. Then, we implemented our algorithm to create the pools.

Challenges we ran into

We faced 2 biggest challenges.


The first of which was our misunderstanding of the dataset where we read the property type instead of the state, causing a 6 hour setback. I know, we really messed up.
Secondly, we ran into the same problem that others had: figuring out the algorithm. While this challenge was proposed as a Knapsack algorithm, we couldn’t think of a way to modify a Knapsack algorithm to fit this problem because of the uniqueness of the state percentages. So, we ended up choosing a modified greedy approach.


Accomplishments that we're proud of

Even though we were setback and very tempted to quit. We persevered and implemented our own modified greedy algorithm! Moreover, our time at Bitcamp has allowed us to meet two amazing mentors at Fannie Mae, Pavan Josyula and Peter Thaggard. 

What we learned

First off, we learned what the Knapsack algorithm was and practiced a bit of dynamic programming, also learning about the power of Python. Lastly, and most importantly we learned how to apply an algorithmic approach to tackle practical challenges with real-world datasets.

What's next for Egg

While we’ve currently implemented a modified greedy algorithm, we’d like to continue exploring and researching how we can continue to improve our solution. In addition, we’d like to look into how and what other algorithms could be modified and used to create potentially more effective and efficient solutions. In particular, we’d like to look further into the knapsack algorithm and its many variations.
",https://github.com/pillious/Bitcamp2023,,Fannie Mae - Don’t Put All Your Eggs in One Basket,"python, pandas",Tim-Vuong,Vuong,timvuong13@gmail.com,,Yes,"University of Maryland, College Park","","",GitHub was great for collaboration!,Yes,University of Maryland - College Park,3,Andrew,Lee,andrewzhlee@gmail.com,Sophie,Tsai,sophietsai31@gmail.com,Tyson,Cheung,cheungtyson@gmail.com
StudyBrew,https://bitcamp2023.devpost.com/submissions/403846-studybrew,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:56:11,"Inspiration

We started off with the goal to make something we could really use. As college students, we identified a common problem between all of us. While using a normal timer, we often found ourselves counting the seconds as we approached the end of a session. The daunting numbers made us lose motivation, ending our studying earlier than we originally intended to. To combat this, we tried to find an alternative way to display progress that reminds of how far we have come while reducing potential anxiety. Our solution was tea: replacing the timer with the pouring of tea. 

What it does

StudyBrew is a pomodoro timer that replaces the traditional countdown with a visualization of tea gradually pouring. StudyBrew has variable timer and break length. It also features a user system that stores previous studying habits.

How we built it

We used React as our main framework, Firebase for the backend, and Bulma for CSS styling. 

Challenges we ran into

As our team was made up of mostly React beginners, learning frontend in 36 hours definitely a challenge.  The hardest part of the process was creating a convincing water simulation, as our timer is the bread and budder of our app. We ran into a whole bunch of random issues like the cup leaking, or the handle of the cup of itself would fill up with water. 

Accomplishments that we're proud of

We are definitely most proud of our UI. Although it might be a little wonky sometimes, it felt wonderful to have an idea in our head and see our ideas come to fruition. We poured our heart and soul into each and every page and we think that shows.

What we learned

Above all, we learned how to persevere. Whether it was rogue back end completely shutting down our website, or trying to wrap our head around CSS (we still don't understand it), somehow we managed to continue chugging through. 

What's next for StudyBrew

Hopefully we could add a social component to encourage users to study more, like a user leaderboard. 
",https://studybrew.netlify.app,,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp","react, firebase, bulma",Matthew,Liu,mliu218@terpmail.umd.edu,,Yes,University of Maryland,"","","Using GitHub, we were able to ensure that the team could sync files and coordinate the project well.",Yes,University of Maryland - College Park,3,Adam,Soomro,redrybacon@gmail.com,Eric,Xie,exie@terpmail.umd.edu,Kieran,K,kierank.pc@gmail.com
Malware Mayhem!,https://bitcamp2023.devpost.com/submissions/403847-malware-mayhem,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 03:56:34,"Inspiration

We were inspired by the malware analysis class at our school.  Because we liked the class so much, we would sometimes try talking to others about the class, but it was sometimes difficult to explain the concepts. To reduce this struggle, we wanted to create a hands-on way for people to engage with malware analysis. We had a lot of fun studying malware analysis and hope to make this field more accessible for others.

What it does

This is a web application designed to challenge people on their static analysis skills. Users are able to upload potentially malicious files and review key features of the file to determine whether it is malicious or benign. After making their choice users can review some malware analysis knowledge to make a better decision next time.

How we built it

This application is built with a Flutter front end and a Flask back end. We used the vt-py package to access the VirusTotal API for the malware sample summaries. We also used the MOTIF dataset to find samples of malware to use to test the software. These files are defanged, so they will not cause harm to the user. However, we still run the program and host the dataset on a Kali virtual machine since that its best practice.

Challenges we ran into

We ran into challenges with formatting the data obtained from the VirusTotal API in a way that works well with how we wanted to display the information in Flutter.

Accomplishments that we're proud of

We are proud of our prototype. We were able to include most of the features we originally planned, and a few additional bonus features.

What we learned

We learned a lot about REST APIs and creating HTTP requests, as well as how to combine a front end with a back end.

What's next for Malware Mayhem!

These are the features we would like to add:


Point system for correct answers
 Host the web app online
Include a database to reduce API calls
Add tailored feedback for malware samples
Include more malware information

",https://github.com/briturgott/Bitcamp2023,,"Cipher Tech - Best Digital Forensics Hack, Best Bitcamp Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","flask, python, dart, flutter, virustotal, vt-py",Paisley,Code,paisleyvc@gmail.com,,Yes,University of Maryland Baltimore County,"","","While we did not use any sponsored tech (besides GitHub), we appreciate that the sponsors could come out and support this event!",Yes,University of Maryland - Baltimore County,1,Brianna,Turgott,briturgott@gmail.com
College Food Finance,https://bitcamp2023.devpost.com/submissions/403852-college-food-finance,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:06:17,"Inspiration

I tended to get into arguments with friends about the most cost effective way to eat as a college student

What it does

It gives a quick estimate on your consumption spending and compares it to numerous statistics.

How we built it

Unity

Challenges we ran into

Coming up with the comparisons

Accomplishments that we're proud of

Getting it done by myself

What we learned

Do not start late

What's next for College Food Finance

Probably nothing
","",,"Bloomberg - Most Philanthropic Hack , Capital One - Best Financial Hack, Best Razzle Dazzle Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, c#",Amanuel,Seifu,aseifu@terpmail.umd.edu,,Yes,University of Maryland college park,"","",The wifi at the Xfinity center was slow,Yes,University of Maryland - College Park,0
Gridlock,https://bitcamp2023.devpost.com/submissions/403854-gridlock,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:08:34,"Inspiration

One of our members had a project on graphs was due soon, which led our minds to pathfinding. So we decided to try and make a game based on it. 

We had previously decided on making a web app, and we agreed that it would fit the game, making it accessible anywhere.

We wanted to emulate those web games which you would mindlessly play for hours, recreating their high-score-centric gameplay and their replayable nature

What it does

The game takes place on a grid, where you must navigate different paths to gain extra time before the timer runs out. Taking different paths takes different amounts of your precious seconds

The muddy paths are the slowest, paved roads take a average amount of time and the icy blue paths let you glide by with ease.

You must use these paths to navigate to squares that give you extra time. A few more seconds to slow your eventual demise. And when you reach these squares, the entire board gets randomized once again and the race against time begins once again.

How we built it

We used HTML, CSS and Javascript. 

Challenges we ran into

The biggest hurdle we had to overcome was our inexperience in Javascript. We decided the best way to  learn was having to actually put it into practice.

Now did come with a few downsides, like truckload of errors and having to come to terms with how little we knew, but thanks to bit of perseverance and a whole lot help from tutorials and mentors, we managed to actually complete it

Accomplishments that we're proud of

The making of the grid, the structuring of the different elements, and honestly we're just glad it works

What we learned

The journey of this project was an amazing opportunity to learn about the languages we used and to know our current limits. It also taught us a whole lot about things to not do during project development, 
such as:

Starting late : We had a lot of trouble coming up with ideas, and that could have been remedied by starting in advance, meeting up before the hackathon and making a plan

Not having a clear idea : to add on the previous point, we didn't take the proper time to clearly define what we were going to do. And yes, projects always go though a significant amount changes before completion, but we should have made sure that everyone was on the same page at the start. We discovered down the line that we had conflicting ideas on what we imagined the project to be, which was caused by our...

Bad communication : Without proper communication, it's easy for people to just do their own thing, with no idea that the things they're working on might overlap with someone else. It's easier on you to just focus on what you're doing, but that just leads to wasted effort. 

We'll definitely make efforts to avoid this in the future

What's next for Gridclock

As you can see, it's a little rough around the edges, but I believe that inside the jank, there's a good game waiting to bloom

First we'll try to align everything better, and also replace the abstract shapes with images people recognize, that'll make the gameplay more intuitive and easy to understand.

Then we'll have to work on the balancing to provide the right amount of tension to the game.

Then we can work on adding more features, like the paths you take having effects outside of reducing time. And also maybe make the grid larger to add more choices.

We'd love to see what we spent these past hours creating become something beyond what we imagined it to be. 
",https://skottchen.github.io/personal-website/BitcampProject/game.html,https://youtu.be/9wVNRm142tk,Best Gamification Hack - Bitcamp,"html, css, javascript",Scott,Chen,chen7772016@outlook.com,,No,University of Maryalnd - College Park,"",Github was good for source control,We all used GitHub to collaborate on the project,Yes,University of Maryland - College Park,2,Advait,Vartak,advait.vartak14@gmail.com,Rahul,Ramasubramanian,rahulram2204@gmail.com
Credit First,"",Draft,Pending,Project details,04/09/2023 04:16:50,"Inspiration

6 million people in the US do not use banks and an additional 18 million are underbanked, meaning they do not rely on bank-based transactions (FDIC 2021). In this day and age, nearly every significant financial commitment requires good credit; unfortunately, many people do not have access to resources that promote financial literacy, so navigating the process can be extremely difficult. 

Even as students, we've struggled to find easy-to-understand financial knowledge. To address this issue, we created Credit First: a web application that matches the user to a credit card suited for their needs, with a focus on a user's financial goals.

What it does

Credit First collects information on a user's financial information through a questionnaire which it uses in combination with a collection of credit card information to perform personalized recommendations for a credit card. Our project also gives specific financial tips based on each user's profile and has an AI powered chatbot for any further questions.

How we built it

We used web scraping to collect our information about major credit cards with a focus on credit cards that were beginner friendly and more easily accessible. To build the website we used React and we created a form to gather user information. We then created an algorithm that utilizes user data to predict credit scores, calculates whether the cash back to annual fee would be a net positive, and recommends the best credit card for each user. We also integrated openAI's API to suggest financial literacy advice and provide a chatbot. 

Challenges we ran into

Implementing the search algorithm involved understanding many different variables and financial concepts in order to optimize for a user's best credit card overall. It was challenging to handle various relationships and cases and it required lots of debugging to ensure it ran correctly. We also faced difficulties getting openAI's API to work with our website.

Accomplishments that we're proud of

Creating an accurate algorithm that analyzes many inputs and compares them to different metrics. 

What we learned

How to use AI to support and provide features to our project. 

What's next for Credit First

We want to work on gamifying the process of building financial literacy and rewarding users who reach milestones towards their financial goals. This would help the application become more engaging and will be useful as we want to translate it into mobile applications in the future.
","",,"","react, openai, javascript, python",Emily,Li,liemily.md@gmail.com,,"","","","","","",University of Maryland - College Park,0
TouchToneAI,https://bitcamp2023.devpost.com/submissions/403862-touchtoneai,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:17:44,"Inspiration

Wanted to work with machine learning and object recognition but wanted to make our project meaningful. We thought that creating a project to benefit an underrepresented community in our world will be very useful.

What it does

Our model uses machine learning to create a random word and converting it from Braille to speech, allowing the user to hear each word if they are visually impaired. 

How we built it

We built our model by using Python, Tensorflow, Keras, and NumPy. We applied the knowledge we learning in the ML workshops at Bitcamp and received a lot of help from a few mentors and workshop volunteers, Sagar and Mark. 

Challenges we ran into


Finding a dataset that had pictures that are representative of Braille one would see in real life. We did not find such a dataset so we decided on one that as somewhat similar to real life.
We were overfitting our model with data that only looks a certain way and not like Braille would look in real life
After we realized we were overfitting, we were underfitting our model by running only 20 epochs, which gave us the wrong results


Accomplishments that we're proud of


Created our first machine learning model using new softwares and libraries
Overcame several challenges to get the model to actually work with 91% accuracy


What we learned

We all learned a great deal about machine learning and implementing models to solve real life problems. At first, we did not even know how to approach the solution but we took gradual step to achieve our goal.

What's next for TouchToneAI

We plan to implement the model into a mobile app that can take pictures of the Braille and then the app will say it back to the user. We will create this using Swift for IOS and Kotlin for Android. We believe that when this app is released is can help a lot of people who struggle with this disability.
",https://github.com/vahinpalle/TouchToneAI,,"Best Razzle Dazzle Hack - Bitcamp, Best Domain Name from Domain.com - Major League Hacking, Best Social Good Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, pandas, numpy, tensorflow, keras, jupyter",Vahin,Palle,vahin.palle@gmail.com,,Yes,"Univeristy of Maryland, College Park",TouchToneAI,"","GitHub, TensorFlow, Pandas, JupyterNoteBook, NumPy, Keras",Yes,"",2,Arjav,Jain,jainarjavs@gmail.com,Asrith,Biradavolu,asrithb@terpmail.umd.edu
Expend Together,https://bitcamp2023.devpost.com/submissions/403867-expend-together,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:23:15,"Inspiration

Banking apps have a feature where you can only keep track of your income and spending. You can only see another person's income or spending if you have someone under your name for your account. If you wanted to see how your family or friends are doing financially it would be difficult to do so since chances are almost everyone will have different banks from each other. This is where our app comes in so that your group of close friends and families can keep track of how everyone is doing financially.

What it does

User's are able to view, in realtime, income and expenditures of themselves and their close group of friends and/or families. See who is saving the most or spending the most with our app to keep track of your close ones' financial situations.

How we built it

SwiftUI was used to build our IOS application. SwiftUI brings a pleasing to the eye view of their group's spending habits and income. Firebase was used to store a user's data including expenses and income to provide the user with a realtime view of their data. Plaid API was used to connect a user's bank account so that our app can securely retrieve their bank information to display to a user.  

Challenges we ran into

Plaid gave us a lot of trouble as we were not sure on how to fully connect a user's bank account to our app. It required us to have some kind of server to be a middle man in securely connecting our app to a user's bank. We got the initial connection working, but retrieving data was proven difficult.

SwiftUI with Firebase proved difficult to implement together for realtime data viewing. One thing that was very troubling was how to have our users be able to see live changes in their expenditures and incomes when there was a changed. Despite these challenges we were able to implement most of our realtime data viewing goals.

Accomplishments that we're proud of


having users be able to view their expenditures and income in realtime
a clean UI for the user's experience
a data base to keep all of the user's data
some implementation of Plaid API that allows us to connect a user's bank to our app
## What we learned
Securely connecting to a user's bank account to get their information is tough but is doable with more time
Building an IOS in SwiftUI that has a clean UI and has a good user experience
Using Firebase to present users with realtime data viewing
## What's next for Expend Together
Fully implement realtime data viewing for all parts of our app
Implementing more charts and graphs for our users
Be able to join more groups and add group members
Fully connect a user's bank account to our app for better data transactions

",https://github.com/gerdinv/Bitcamp2023,,"Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp","swift, firebase, plaid, github, git",Dalton,Pang,dspangp@gmail.com,,Yes,University of Maryland,"","GitHub, SwiftUI, Plaid, Firebase","We tried using GitHub for version control and for everyone being able to work on a different feature with branching, but it was proven difficult to merge all of works together because of conflicts and other errors. We know the importance of git as it is a very powerful and important tool to know and use, so this brought us more experiences working with it.

SwiftUI was used to build all of our project. Along with Xcode, it is very seamless to go from code to a working app that can be put right on your phone. The simulator Xcode provides and its model view viewmodel (MVVM) model of building applications helped us immensely in the building of our app.

Plaid was an API that we used to connect a user's data from any bank to our application. We weren't able to get this fully working, but we were able to establish a connection between our app and a bank with the user's data. This was very troubling because we had no clue how to obtain some of the resources to run this API correctly. One thing we needed as some type of server and we had no idea where to go from there. 

Lastly we used firebase to store all our user's data. This was very helpful in using the concept realtime data to present our user's with the data about their banking information. Using firebase's API and SDK was not too difficult to use. One problem we had was with asynchronous calls to the database which forced us to do some workarounds to present our user's with realtime data.",Yes,University of Maryland - College Park,2,Sathwik,Yanamaddi,sathwik45@gmail.com,Timothy,Lee,timothy.aram.lee@gmail.com
WumPay,https://bitcamp2023.devpost.com/submissions/403880-wumpay,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:50:26,"Inspiration

One problem that we sometimes run into as students is splitting the bill, or taking turns paying the bill for each other, whether for things like eating out or going for groceries. Because of this, we often take to using financial service platforms such as Venmo, Apple Pay, Zelle, PayPal, or CashApp to pay each other back. This requires students to have multiple apps to pay different people back. This led us to think: What if payment systems could be integrated into Discord servers? As one of the most common and widely used social media platforms, Discord has quickly become one of the staples of modern digital communication, especially for college students. Consolidating a payment service in Discord would provide a centralized location where all students can easily pay each other back.

What it does

Discord server members can issue commands to the bot to pay other members who are in the same Discord server, request payment from others, and compute and split costs for group transactions in a simple way. 

How we built it

Bringing the next generation of payments into Discord for gamers and students alike, we used Capital One's Hackathon API(http://api.nessieisreal.com/) to bring a reimagined online payment integration using a Discord bot. We used CockroachDB for scalability, enabling usability for servers of all sizes, to survive the harshest conditions and thrive everywhere.

Challenges we ran into


Understanding the Capital One API requirements for request payloads and avoiding 404 response codes when sending payloads to create new customers, accounts, and transactions
Understanding how to insert records in CockroachDB and how to perform queries with SQLAlchemy
Setting up a CockroachDB database
Understanding how the Discord.py library has updated since the team last used the library
Delegating work in an efficient manner


Accomplishments that we're proud of


Learning on the fly
Understanding how to set up a CockroachDB database 
Implementing Discord interaction commands in Python
Successfully integrating both the Capital One API and CockroachDB into our app solution


What we learned


How to use Cogs and Interactions in Discord.py
SQLAlchemy & CockroachDB
How to use the Capital One Hackathon API
How to use Postman for debugging requests


What's next for WumPay


Including other payment methodology including cryptocurrency and handling different currency transaction
We want to expand payments to more than just a transaction, but also a way to gift people (i.e. red envelopes)
Storing and remember transaction history for tracking purposes

",https://github.com/licykk/Bitcamp2023,,"Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack","python, cockroachdb, discord.py, capitalonehackathonapi, discord",Jessica,Lee,jlee1290@terpmail.umd.edu,,Yes,University of Maryland,"",Capital One API could use more documentation :),"We learned some about how to use CockroachDB Serverless, the Discord.py Python library, and the Capital One Payment System API.",Yes,University of Maryland - College Park,2,Sherry,Liang,sliang01@terpmail.umd.edu,Eric,Yi,ericyi2001@gmail.com
Sidewalk Optimizer,https://bitcamp2023.devpost.com/submissions/403886-sidewalk-optimizer,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 04:59:41,"Inspiration

When I walk on campus, especially early in the morning, I always have to take a long route to get from Point A to B because the fields are wet and muddy from rain and dew.  This ends up eating away from the time I get to get ready, eat breakfast, or study.  Recently, when MIT and NYU launched Tile2Net, a program that aims to identify sidewalks in urban environments, I realized how little we know about sidewalks.

What it does

This project takes in a standard .kml file from Google Maps that holds Points of Interest (POI's).  These POI's are then used to create edges between them, with the cost being distance between the points.  Using graph algorithms like Dijkstra's, an efficient graph is created that touches all nodes, but still optimizes travel times.  The final graph is then exported back into a .kml file to be displayed on Google.

How we built it

Using Jupyter Notebooks and packages like networkx, pandas, and matplotlib, the data was processed, transformed and mapped.

Challenges we ran into


One challenge was time complexity, as there were so many nodes and edges to keep track of
Another challenge was exporting the data back as kml, because of file requirements
Another challenge involved determining adequate walking paths, to save distance but decrease travel time


Accomplishments that we're proud of


Finishing the project and the kml files actually being displayed on Google Maps


What we learned

From this experience I have learned about


Packages such as Pandas, NetworkX, Beautiful Soup, and argparse
Tools such as GitHub and Jupyter Notebooks (and Google Maps)
Applications of Graphs and Dijkstra’s Algorithm
How much I can get done in 1 weekend!


What's next for Sidewalk Optimizer


Incorporate elevation into the distance weight and make a 2-costed path to account for traveling uphill vs. downhill
Use Tile2Net to access current sidewalk place and evaluate how much sidewalk aligns with the optimized graph
Obstacle avoidance, such as buildings and cliffs that should not be traversed
Use polygons instead of points for POI's to increase accuracy
Use ML to find the right balance between total length and travel times between any 2 nodes
Factor in foot traffic at different times of the day and popular spots to be

","https://github.com/Metrix745/exploreMaps, https://www.google.com/maps/d/edit?mid=1dM0kZ6s7ZrdH-AC-Kn_WWqgw7zfBVi4&usp=sharing, https://docs.google.com/presentation/d/1gK8lOOYsL1MAYgKhytkSBDz1avVojTIW5abkc8XGWgM/edit?usp=sharing",,"Best Social Good Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Bitcamp Hack - Bitcamp","python, github, pandas, networkx, matplotlib, google-maps, beautiful-soup, xml",Nicholas,Harrell,metrix745@gmail.com,,Yes,"University of Maryland, Baltimore County","","","Wi-fi was pretty bad and made it impossible to use my GitHub codespace, which my laptop needs due to a lack of computing power.",Yes,University of Maryland - Baltimore County,0
Heart Disease Prediction Using Logistic Regression,https://bitcamp2023.devpost.com/submissions/403887-heart-disease-prediction-using-logistic-regression,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 05:02:58,"Inspiration

The inspiration behind the project ""Heart Disease Prediction Using Logistic Regression"" comes from the fact that heart disease is a leading cause of death worldwide, and early detection and intervention can help prevent adverse health outcomes. Logistic regression is a statistical method commonly used in medical research to analyze the relationship between various risk factors and the likelihood of developing a disease. By applying this method to a dataset of patient information, the project aims to develop a model that can accurately predict the risk of heart disease and help patients and healthcare providers make informed decisions about their health.

What it does

This project has been built with the aim to aid patients in making decisions on lifestyle changes in turn reduce the complications. This research intends to pinpoint the most relevant/risk factors of heart disease as well as predict the overall risk using logistic regression.

How we built it

Our project is built using Python and popular libraries like pandas, numpy, and Seaborn. The project involved several key steps, including data collection, data preprocessing and exploratory data analysis.
Data collection was the first step in building the heart disease prediction model. We gathered data on patients with and without heart disease from various sources, such as public health databases, research studies, or surveys. Once the data was collected, it was preprocessed to ensure that it is suitable for analysis. 
Exploratory data analysis was an important step that involved visualizing and exploring the relationships between different variables in the dataset. This can be done using libraries like Seaborn to create scatterplots, histograms, and bar charts.
Model building was the core step in building a heart disease prediction model. This involves using a library like scikit-learn to build a logistic regression model that can predict the likelihood of a patient having heart disease. The data was split into training and testing sets, and cross-validation was used to evaluate the model's performance.
Finally, once the heart disease prediction model had been built and evaluated, it was deployed in a web application. 

Challenges we ran into

One of the biggest challenges was obtaining high-quality data that is both comprehensive and accurate. Data preprocessing was also a challenging task, as it required careful handling of missing values, outliers, and other data quality issues. Another challenge we faced was integrating the model with the web application.

Accomplishments that we're proud of

We are extremely proud of the accomplishments we have achieved with our project. We were successfully able to develop a user-friendly web application that allows healthcare professionals or patients to easily input data and obtain predictions about their heart disease risk.

What we learned

Working on this project helped us get a deeper understanding of machine learning techniques, including logistic regression, feature engineering, and model evaluation. It also helped us build a strong foundation in programming with Python and data analysis using libraries like pandas, numpy, and seaborn.

What's next for Heart Disease Prediction Using Logistic Regression

One potential next step is to improve the accuracy of the model by incorporating more features and using more advanced machine learning techniques. For example, other models like Random Forest, XGBoost, or Neural Networks could be used and compared to the current logistic regression model to identify the best performing one.

We are also exploring possibilities of integrating the model into a real-world healthcare setting. This could involve working with healthcare providers to develop a user-friendly interface that allows them to input patient data and obtain predictions about heart disease risk.
Further data collection and analysis could be performed to refine the model and improve its accuracy. This could involve collecting data from a larger and more diverse patient population or collecting data on additional risk factors or health conditions.
","https://bobaljai.wixsite.com/cardiologic/results, https://github.com/kushagra-mehta-png/final",,"Best Social Good Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","numpy, pandas, seaborn, python",Vibhu,Singh,vibhu307@terpmail.umd.edu,,Yes,University of Maryland,"","","This past weekend at the hackathon, our team had an incredible experience leveraging the capabilities of an AI language model. We started by defining our project goals and requirements, and then turned to the AI model for brainstorming ideas. With its help, we came up with a range of exciting possibilities, including a health disease detection model.",No,University of Maryland - College Park,3,KUSHAGRA,MEHTA,kushagra.mehta@gmail.com,Jai,Bobal,bobaljai@gmail.com,Shashank Pratap,Singh,shashanksp04@gmail.com
Terra-PIN,https://bitcamp2023.devpost.com/submissions/403890-terra-pin,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 05:08:49,"Inspiration

We were inspired to help solve a problem that plagues 1 in 4 Terps: not knowing where locations are on campus.  Our project allows freshmen and others who are new to the University to easily familiarize themselves with locations on campus in a fun and interactive way.

What it does

The user is dropped into a Google Street View in a random location on campus and they are given a select amount of time (based on easy, medium, or hard difficulty) to guess where they are and pinpoint that location in a map. They can then see how accurate their guess was by seeing the distance between their guess and the actual location they were given. 

How we built it

We utilized the Google Cloud platform, specifically the Google Maps API. We displayed all of the elements we worked with using HTML. To initialize the randomized Street View, we used JavaScript to create API calls that retrieved the street view of coordinates that we randomly generated that are somewhere on the UMD campus. Then we leveraged the customizability offered by the API to allow the users to create markers that indicate the location that they are guessing. We also used JavaScript to make changes to the HTML when needed in different scenarios. Then we developed a distance algorithm that calculated the difference between the actual location and the location that the user guessed and displayed how far away the user guessed on the end screen. Thus, we were able to use HTML and JavaScript to leverage to power of the Google Maps API to create this educational game.

Challenges we ran into

We ran into several challenges when trying to set up the Google Maps API because we were unable to make the maps and street view appear on our screen but we fixed this by reading through extensive documentation. Then we ran into issues when it came to storing data in one JavaScript file and accessing it in another but we came up with the idea of using cookies to store this data.

Accomplishments that we're proud of

We are proud of the fact that we could leverage an API and incorporate its functions into our code. We think we can use this process to use even more APIs in the future and create even better projects. Being able to create a fully functional game through full-stack programming was a project that we all wanted to do for this hackathon and we were able to achieve that.

What we learned

Through this project, we learned how to use the Google Maps API and how to combine JavaScript and HTML to create a project that exceeds the capabilities of just using HTML. We also learned how to extend the capabilities of front-end programming in order to make a visually appealing yet functional game.

What's next for Terra-PIN

Our plan is to add the ability for multiplayer so that different people can play each other in this game. We also want to add the ability to play multiple rounds in a single game and create a point system for multiplayer in order to make the game more competitive and thus more engaging for its users.
",https://github.com/Rhizling/UMDGEO,https://youtu.be/oZO_SBZjBhk,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","javascript, html, google-maps",Sahit,Kadthala,kadthala16@gmail.com,,Yes,University of Maryland College Park,"",GitHub was useful.,We used GitHub for version control and it was helpful trying to maintain a set of files among 4 teammates.,Yes,University of Maryland - College Park,3,Saimadhav,Sakhamuri,ssakhamu@terpmail.umd.edu,adithyako,,adithya.ko@gmail.com,Aaron,Chen,achen4928@gmail.com
RecommendMe,https://bitcamp2023.devpost.com/submissions/403903-recommendme,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 05:41:50,"Inspiration

We were inspired to create this project using machine learning after hearing about popular language models like ChatGPT. However, due to the cost of using OpenAI API, we decided to build the machine learning aspect ourselves. We wanted to address the issue of not knowing what classes to take for the following and future semesters, as Testudo's Schedule of Classes is not customizable enough to provide personalized recommendations. Thus, we decided to build an app that can provide customized course recommendations.

What it does

RecommendMe is an app that asks users for their academic information such as their major(s) and courses taken. After that, users can use a text input field to ask for course recommendations based on their own criteria. For example, they can ask the app ""Recommend me a course that teaches me artificial intelligence"", and it will provide recommended courses based on this prompt.

How we built it

There were two main components to building this app: the frontend using React and the backend using Fast API to run the machine learning model. We used many Material-UI components to build the UI and primarily focused on the backend. We used Python and Tensorflow to process a search passed from our API, and trained a Deep Neural Network to classify a search request to the best department that fits the search. We then filtered the courses provided by Testudo and UMD.io based on the best-fit departments. After filtration, we calculated the similarity of the search and each course to determine which courses best represent the user's search.

Challenges we ran into

The most challenging aspect of this project was training the model to give reasonable course recommendations based on a given prompt. Another technical issue that we faced was connecting the frontend and backend together so that we could do a POST request to the backend and run our prompt through the machine learning model to get back recommended courses. We found that the data we wanted to send was not properly formatted, which caused a cascade of issues.

Accomplishments that we're proud of

We're proud of debugging all the tiny bugs we had connecting the frontend to the backend, as well as minimizing our scope while still leaving the possibility to expand in the future. Additionally, we were conscious of the user workflow throughout the whole process and implemented small details such as disabling the next button and autocomplete based on whether data was provided or not.

What we learned

We learned a lot about how APIs work, transfer learning, and sentence embedding within machine learning. We also gained knowledge about various design cues for websites and how to make the UX more intuitive.

What's next for RecommendMe

What next for RecommendMe is possibly connecting it to some database for authentication and to store what searches a particular user has made in the past. Additionally, it would be more robust and support things like recommending professors for a particular recommended class or recommending a class given the input specified by a specific professor. Beyond that, it can hopefully generate a 4-year plan given all the text constraints provided. 
",https://github.com/codingdn/bitcamp2023,,"Best Machine Learning Hack - Bitcamp, People's Choice Hack - Bitcamp","react, javascript, html5, css3, fastapi, python, pandas, numpy, sklearn, tensorflow",Dan,Nguyen,danthedevnguyen@gmail.com,,Yes,UMD,"","Github, React, FastAPI, Sklearn, Tensorflow","We ran into some issues getting set up due to wifi connectivity, so it was hard to download the necessary packages for our application initially.",Yes,University of Maryland - College Park,2,Arnav,Mittal,arnav.mittal09@gmail.com,Hanock,Tsegaye,hanocktsegaye23@gmail.com
PrepMe,https://bitcamp2023.devpost.com/submissions/403906-prepme,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 05:46:49,"Inspiration:

As college students who have actively been on the job search, we figured we need something like this in our life that is different from the existing platforms that can help us prepare for interviews.

What it does

Our app trains you to be prepared for both technical and behavioral interviews. We found typically asked questions and instead of just checking to see if the students have correctly answered the questions, we take time to ensure they understand the process regardless of their skill level.

How we built it

Using Figma, we prototyped the app. In addition to that, we used the data we found when researching commonly asked behavioral interview questions to extract the keywords that are found in the proper responses to these frequently asked questions. By training a Random Forest Classifier with these keywords, we could score potential interview responses.

Challenges we ran into

We struggled with getting the emulator, ExpoGo, to work. It held us up a lot in terms of converting our prototype to a working app. Even after speaking with mentors and the online community, we did not resolve the issue despite our efforts. We also struggled to use CockroachDB to deploy the app. Our edits in the Replit workspace from the CockroachDB workshop would not appear when running the code. 

Accomplishments that we're proud of

We are proud of thinking of the idea and gathering the necessary resources and knowledge from the workshops available to be able to turn our ideas into reality. We are also proud of how well the Figma wireframes turned out. The visuals make it easy to picture the full user experience.

What we learned

How to utilize machine learning to analyze natural language and grade/score interview responses to help people learn better phrasing for tough questions and how to highlight their skills for potential employers.

What's next for PrepMe

This could actually be converted into an actual startup with time and guidance. We believe the app has the potential to help students succeed in landing a job in tech through our engaging platform. PrepMe is a no-stress way to prepare for interviews with fun game elements to keep users motivated to win.
","https://github.com/AshP3/BitCamp_PrepMe_ML.git, https://www.figma.com/file/x7XJAFlKP8Kko7bR4f750H/PrepMe-App?node-id=1-2&t=GCqny8vVEbypUE82-0",,"Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Capital One - Best Financial Hack, Best Machine Learning Hack - Bitcamp","python, figma, natural-language-processing, nltk, numpy, pandas",chami1,Amihere,chami1@morgan.edu,,Yes,Morgan State University,"","The versatility of React and Figma was impressive. GitHub also made it easier to collaborate with up to 4 people writing code at once. However, React Native gave us some troubles when running and testing the app on a phone.","Our team visited several workshops, including Intro to app development, developing a full stack app with CockroachDB, the Figma workshop, and the Intro to GitHub workshop. We learned more about these different technologies and services in the workshops. The Figma workshop, in particular, was useful as none of us had much experience using it, and it made our app UI more organized and visually appealing. The workshops elevated the hackathon experience by offering new techniques we could immediately apply to our projects and play around with.",Yes,Morgan State University,2,Jaunel,Panton,pantonjaunel@gmail.com,Ashley,Pryor,ashley.pryor03@gmail.com
Hot Packets,https://bitcamp2023.devpost.com/submissions/403909-hot-packets,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:03:52,"Inspiration

After our cybersecurity class averaged a 69% on the first midterm, we realized that we needed a better way to learn about the most challenging section of the midterm: iptables. So, we decided to create a simulation that would visualize the intricacies of packet flow throughout a network system in an easy-to-understand manner. 

What it does

Our program provides a visualization for packet travel between devices on a network. The user can add NAT routing rules, filter rules, and connections between devices through the command line in our program’s GUI in order to configure the simulated network and test different network structures and scenarios, such as data traffic congestion and man-in-the-middle attacks. Our program’s GUI also has sliders on the right side of the screen to enable fine-tuning - the user can adjust the rate at which packets are sent and how often the program updates, as well as allowing the user to zoom in and out to better examine the network. 

How we built it

Our simulation was built using the Java programming language and the Slick2D graphics library with the Eclipse IDE. We chose Java over other languages due to its many program paradigms which can be used to easily build and scale complex systems. Part of these considerations included object oriented abstractions which enable many design patterns, as well as the many native libraries Java provides which provides a basis for more sophisticated algorithms.

Coming into Bitcamp, we knew we wanted to make something big. In order to do so, we needed a workflow that would best utilize everyone’s skills. This was done by using GitHub source control, alongside program modularization to streamline our collaboration on a single codebase. Additionally, we emphasized close cooperation to obtain everyone’s input before implementing new ideas or major changes. 

Challenges we ran into

Networks are complex, and are far too comprehensive to completely simulate. As a result, we needed to decide which network components to highlight in the simulation, requiring tons of forehand research and planning. Due to the intricacies and interdependencies between every component, we found it tricky to select and seamlessly integrate individual parts from the larger network ecosystem, to create an accurate network system.

Accomplishments that we're proud of

We’re proud of creating a deliverable that does everything that we mentioned above, all in a day and a half! Our program exceeded our expectations both visually and functionally, and we were all happy to work on something we’re passionate about.

What we learned

Our team members had little to no experience with the Slick2D library, so we learned how to use it in order to develop the program’s GUI. Our team members also did not have much experience with Github, so we gained a deeper understanding of it as well.

What's next for Hot Packets

After Bitcamp, we will add more functionalities to Hot Packets. One feature we plan to add is the ability to import real metadata into our simulation via a NetFlow log, which can be used to run network diagnostics and perform digital forensics.
",https://github.com/shuyelin06/Hot-Packets,,"Cipher Tech - Best Digital Forensics Hack, Best Moonshot Hack - Bitcamp, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp","java, eclipse",Wendy,Tu,wendytu2022@gmail.com,,Yes,"University of Maryland, College Park","","",We are satisfied with the technology we used :D,Yes,University of Maryland - College Park,3,Anna,Dai,anna.dai916@gmail.com,Shu-Ye,Lin,shuyelin06@gmail.com,Brian,Xie,bxie12@terpmail.umd.edu
I Owe U,https://bitcamp2023.devpost.com/submissions/403910-i-owe-u,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:06:04,"Inspiration

We have been in situations where we are in small amounts of debt to other friends from group expenses. We wanted to create something to help manage this problem.

What it does

Our app allows you to create a group for a given transaction, invite others to join your group via QR code or access code, and lets you organize each share of the total cost for each group member.

How we built it

We used React and axios front-end to interact with Express. Express used postgreSQL to interact with our cockroachDB.  

Challenges we ran into

Learning postgres, Express, and all the different frameworks required to build a minimum viable product within a very short amount of time.

Accomplishments that we're proud of

We are proud of the fact that we were able to quickly familiarize ourselves with these technologies in order to make our product. 

What we learned

We learned how different levels of the stack work with each other. We learned git for project management.

What's next for I Owe U

Next, we will implement a receipt scanning feature with open_csv libraries, that way expenses don't have to be tracked manually.
","",https://youtu.be/79f598h7F4E,"Cockroach Labs - Best Use of CockroachDB Serverless, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack","axios, cockroachdb, express.js, react, postgresql, javascript, git, sql, json, css",J. Oliver,Villegas,olivervillegas77@icloud.com,,Yes,"University of Maryland, College Park","","",We mainly interacted with cockroachDB. We had a good experience working with it.,Yes,University of Maryland - College Park,2,James,Espericueta,espericueta2303@gmail.com,Javi-L03,,javier.lopez.062003@gmail.com
Detouree,https://bitcamp2023.devpost.com/submissions/403911-detouree,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:06:43,"Inspiration

Our app was born out of the frustration we've experience due to UMD's never ending construction. We wanted to make a tool that empowered students to navigate the campus quickly despite constant changes to routes.

What it does

With Detouree, you can easily reach your classes on time with optimized routes, while contributing to our crowd sourced data on current construction zones and obstacles. You can mark areas that are blocked off and detouree will provide you and other users new paths that avoid the slowdowns. Routes are tailor made for your class schedule and the buildings you want to visit.

How we built it

The program is built in two key parts. The back-end comprises of a comprehensive database schema holding up-to-date route metadata, currently blocked zones on the map, and cached user data. The front-end of the app displays the map along with the custom-made routes accounting for all avoidance zones together. The front end enables you to draw out new avoidance zones that update the database and user routes. Connecting the two is a special route finding algorithm that finds the optimal route avoiding all slowdowns.

Challenges we ran into

It was the first time some of our teammates programmed in JavaScript and made use of CockroachDB. Twilio provided unique challenges, proving an unreliable source of notifications. As well, implementing the route finding algorithm for multiple avoidance zones provided a unique set of challenges, forcing us through multiple development cycles before finding a satisfactory implementation.

Accomplishments that we're proud of

We were able to produce rich, eyecatching visuals for our optimized routes. Despite the unreliability of the algorithm's path techniques and the non-deterministic data outputs, our approach mitigated these hinderances and produced crystal-clear directions on the map. We  were able to effectively create useful avenues of contribution even for team members working with the tech-stack for the first time. 

What we learned

We were able to pick up fundamental Geospatial Computing concepts and routing algorithic techniques, guarentees, and difficulties. We gained a further understanding and appreciation for the nuances of CockroachDB and building integrated JS application. 

What's next for Detouree

Detouree should be expanded to more universities, more commonplace road scenarios, and more varieties of barricades. We want to be able to tackle issues like crowded footpaths, traffic patterns, protests, and  other unexpected or emergency stoppages.
",https://github.com/AkashBhave/detouree,https://www.youtube.com/watch?v=_4NDYBR6mZs,"Best Razzle Dazzle Hack - Bitcamp, Best Social Good Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Best UI/UX Hack - Bitcamp, People's Choice Hack - Bitcamp, Most Creative Use of Twilio - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Bitcamp Hack - Bitcamp","javascript, react.js, next.js, here-api, google-maps, turf, geojson, cockroach-db, twilio",Suhas,Julapalli,suhasjulapalli@gmail.com,,Yes,"University of Maryland - College Park, George Mason University","","","CockroachDb was difficult to configure. It seemed the key module tying it into the sequelize module, the sequelize-cockroachdb module, didn't work for anyone other than one of our team members. As a result, we could only test code on one computer. As well, the Here API had very poor documentation. Though documented, information was limited and non-exhaustive. Often, we had to resort to using the Google Maps API to understand the datasets we were being provided by the Here API. On the positive end, combining GeoJson with Turf in ReactJS provided fantastic interactive visuals for our maps. As well, Javascript did a good job maintaining compatibility across the various elements of the project. We were able to use it to create functions that reduced the time for production cycles significantly despite some of our team members' unfamiliarity with the language.",Yes,"University of Maryland - College Park, George Mason University",3,Akash,Bhave,akashbbhave@gmail.com,Tarun,Murali,tarunmurali02@gmail.com,Arjun,Sundaram,arjun.sundaram99@gmail.com
Project SafeSight,https://bitcamp2023.devpost.com/submissions/403922-project-safesight,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:29:36,"Inspiration

The recent upward trend of gun violence plaguing America and our local community should come to an end. We've noticed many news outlets have CCTV sources that capture such events however first responders are only contacted about threats after or while the damage is being done. What if innocent lives and police are notified before such events take place?

What it does

We analyze footage real time to alert of such threats as soon as they are seen in frame. (For the purpose of this hackathon we tested upon frames of CCTV footage from news and other sources). We've expanded upon this core feature to introduce heat map visuals, and notification distribution (between private groups [ex. businesses], and general geographic regions), frame/snippet previews, and more.

How we built it

Tech Stack


NodeJS
ExpressJS
ReactJS (in Typescript)
Azure
MongoDB
JWTs
Google Maps API
OpenCV
Python
Twilio


Using Azure Machine Learning, we managed to train several iterations of our weapon detection model with a dataset of approximately 900 labels. The Azure platform includes the ability to use these models in real time through an API. Using Python and OpenCV we tunnel every Nth (configurable [for the sake of saving bandwidth]) frame from a VideoCapture source to the Azure API which scans for weapons.  In the case a weapon is detected, a bounding box and confidence score is illustrated upon the raw frame and uploaded to a cloud service. This new image will be included in alerts sent to a database of phone numbers with Twilio.

Data including phone numbers, logins (hashed), previous events, and more are all stored within our MongoDB Atlas database. Using an ExpressJS app, we serve read/write requests called from the ReactJS web app.

Challenges we ran into


We wanted to create a makeshift surveillance camera with a raspberry pi and Google Coral USB Accelerator. This would run a TFLite model. However, the exported models from Azure are ""condensed"" and did not perform up our standards.
Spotty Wi-Fi here and there
Internal issues (different visions of the end product)
Issues training the model during some iterations
Picking a project name 😭


Accomplishments that we're proud of


Using the Azure Machine Learning platform (first for all of us)
Completing the project (had doubts at the start of Bit Camp)


What we learned

We all contributed to this project in accordance to our strengths so we all shared knowledge with each other, curating an environment for growth for one another.

What's next for Project SafeSight


Camera's can only see so much. Introducing an audio aspect to recognize fire is something of interest.
Stress testing the project infrastructure (beyond hackathon conditions)

",https://github.com/matthewnanas/bitcamp2023,https://youtu.be/J5Ago-CsJIQ,"Best Use of MongoDB Atlas - Major League Hacking, Best Use of Microsoft Cloud for Your Community - Major League Hacking, Best Social Good Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Most Creative Use of Twilio - Major League Hacking","azure, python, opencv, figma, typescript, react, express.js, mongodb, twilio, node.js",Matthew,Nanas,matt0.bananas4@gmail.com,,Yes,"University of Maryland, Montgomery College","","Github, very smooth!","We had trouble using a range of technologies, but many of our issues could be attributed to spotty wifi. Pushing & pulling from GitHub experienced issues, making API calls, etc.",Yes,"Stanford University, University of Maryland - College Park",3,Rohit,Sharma,kprsharma21@gmail.com,Adam,L,ghostlyvisuals@gmail.com,Sadou,Sow,sadousow100@gmail.com
SafetyNet,https://bitcamp2023.devpost.com/submissions/403927-safetynet,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:41:35,"Inspiration

Unexpected layoffs or financial emergencies can have a significant impact on people's lives, and having a safety net in place can help provide some peace of mind during difficult times.

The inspiration for the safety net app is to provide users with a tool to help them calculate their financial safety net and prepare for potential financial hardships. By empowering users with the information they need to make informed financial decisions, the app aims to help individuals and families protect their financial future and achieve greater financial security.

What it does

This hack aims to develop a tool that helps people calculate their financial safety net in case of unexpected events such as layoffs, illness, or natural disasters. The tool will use income information to provide personalized recommendations for how to build and maintain a safety net.

Purpose

Encouraging people to take proactive steps to build their safety net and prepare for the possibility of financial hardship
Helping people feel more financially secure in the face of unexpected events
Increasing financial literacy and understanding of how income and expenses affect the overall financial health
Potentially reducing reliance on government assistance programs by empowering people to better manage their finances

How we built it

We developed the front-end using React/Javascript and developed the end points using Flask and python. We were able to host end points using Heroku to allow the front end to access necessary data calculations. 

Challenges we ran into

Integrating with existing financial planning software or apps
Ensuring the tool accurately calculates the safety net based on user inputs

Accomplishments that we're proud of

Completed basic functionality of our application.
Learned new languages/frameworks and learned more about development. 

What we learned

What's next for SafetyNet

Overall, the Financial SafetyNet could have a significant impact on people's financial well-being by helping them prepare for a range of unexpected events. It could be developed as a standalone tool or integrated into existing financial planning software or apps.
","",,"Best Social Good Hack - Bitcamp, Capital One - Best Financial Hack, Bloomberg - Most Philanthropic Hack ","react, flask, python, javascript, heroku, capital-one-api",Nathan,Bezualem,nahuk9@gmail.com,,Yes,University of Maryland,"","","Generally, had a good experience with ample support available.",Yes,University of Maryland - College Park,2,Omar,Omar,oomar@terpmail.umd.edu,Rohin,Nana,hydrovortex2@gmail.com
Credit First,https://bitcamp2023.devpost.com/submissions/403936-credit-first,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:55:38,"Inspiration

6 million people in the US do not use banks and an additional 18 million are underbanked, meaning they do not rely on bank-based transactions (FDIC 2021). In this day and age, nearly every significant financial commitment requires good credit; unfortunately, many people do not have access to resources that promote financial literacy, so navigating the process can be extremely difficult. 

Even as students, we've struggled to find easy-to-understand financial knowledge. To address this issue, we created Credit First: a web application that matches the user to a credit card suited for their needs, with a focus on a user's financial goals.

What it does

Credit First collects information on a user's financial information through a questionnaire which it uses in combination with a collection of credit card information to perform personalized recommendations for a credit card. Our project also gives specific financial tips tailored to each user's profile.

How we built it

We used web scraping to collect our information about major credit cards with a focus on credit cards that were beginner friendly and more easily accessible. To build the website we used React and we created a form to gather user information. We then created an algorithm that utilizes user data to predict credit scores, calculates whether the cash back to annual fee would be a net positive, and recommends the best credit card for each user. We also integrated openAI's API to suggest financial literacy advice.

Challenges we ran into

Implementing the search algorithm involved understanding many different variables and financial concepts in order to optimize for a user's best credit card overall. It was challenging to handle various relationships and cases and it required lots of debugging to ensure it ran correctly. We also faced difficulties getting openAI's API to work with our website.

Accomplishments that we're proud of

Creating an accurate algorithm that analyzes many inputs and compares them to different metrics. 

What we learned

How to use AI to support and provide features to our project. 

What's next for Credit First

We want to work on gamifying the process of building financial literacy and rewarding users who reach milestones towards their financial goals. This would help the application become more engaging and will be useful as we want to translate it into mobile applications in the future. We also want to add a chat bot to increase the interactivity of our application.
",https://github.com/tonywu315/credit-first,,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp","react, javascript, python, openai",Jason,Liu,shadowbox826@gmail.com,,Yes,University of Maryland - College Park,"","",GitHub enabled us to collaborate across multiple computers and sync code,Yes,"University of Maryland - University College, University of Maryland - College Park",3,Tony,Wu,tonywu315@gmail.com,Danesh,Sivakumar,danesh.siva12@gmail.com,Emily,Li,liemily.md@gmail.com
Testudo's Choice,https://bitcamp2023.devpost.com/submissions/403937-testudo-s-choice,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:56:15,"Inspiration

We were all interested in working with AI frameworks, and we saw a need for a site that quickly compares class reviews. 

What it does

Users can input the desired course name then the program will display information on the course (average GPA, professors, and course description) and give the user the pros and cons of the class. The user will be shown the professors of the course and give a final analysis recommending a professor given the factors. 

How we built it

We made the database itself through Python in cockroach DB, then used javascript and node.js to connect our database to the webpage through express.js. We also used HTML and CSS to style the web pages (introduction page and course analysis page). AI was used to interpret data from the database and gave an evaluation based on that data.

Challenges we ran into

The biggest challenges we faced were learning how to create and connect to a database, using things that we haven't used before, and working with AI frameworks.

Accomplishments that we're proud of

Considering that this was our first time working with a lot of these programs, we are proud of getting out a usable product that can help our community. 

What we learned

We were able to take a close look at the differences between front-end and back-end programming and how to connect the two. made a server using express.js

What's next for Testudo's Choice

For the future of this project, we plan on taking more time to improve the website UI, compare courses, decrease loading speed, update the AI framework, and have an analysis of student schedules to determine how difficult the semester will be and the efficiency of the overall schedule. 
",https://github.com/FreeTechSupport/Bitcamp2023,,"Best Social Good Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Best Machine Learning Hack - Bitcamp, People's Choice Hack - Bitcamp","node.js, cockroachdb, express.js, python, javascript, html, css, openai, sql",Arkan,Shaheen,arkanshaheen30@gmail.com,,Yes,University of Maryland - College Park,"",cockroachdb made it very accessible to create a database and had the tools to make that process go smoothly but the documentation on getting data from that database through JavaScript was a bit unclear or sometimes not present.,"The major relevant technologies we used this weekend were Github and CockroachDB. Github was relatively simple for us to use and helped us all split up the work and test different things on all of our computers at once. Overall, I would recommend everyone get familiar with the basic commands such as git pull, git push, git commit, and git add. 

CockroachDB was also very useful for our project. We needed a database, and having a database on the cloud was very helpful. We can run our program from any computer without having to worry about compatibility. We were also able to have some computers be used to populate the database while another computer was simultaneously using the same data in the database. This was very helpful and allowed us to move forward in developing our program instead of having to wait for the database to be fully populated. Furthermore, the people at the help desk for cockroachDB were open to helping us and were able to successfully lead us on the right track to developing the website and application.",Yes,University of Maryland - College Park,3,backedman,Bogineni,backedman@gmail.com,Bbluefire,Cruz,carmenbeth16@gmail.com,Joseph,Yang,razorrotom@gmail.com
Contract Solution,https://bitcamp2023.devpost.com/submissions/403939-contract-solution,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 06:58:22,"Inspiration

At work we found that the company had a whole team searching for government contracts mutually. We want to automate this task.  

What it does

It makes it easier to search for Government contracts.

How we built it

We used government api to get all the contract, categories them and added them into a database. We used the data base to make easier to displayed all the contracts. 

Challenges we ran into

The most challenging part was reading through all the data and categorizing all the contracts. 

Accomplishments that we're proud of

We are proud that we got some of the parts working. 

What we learned

We learned how to used serverless database. 

What's next for Contract Solution

We plan on extensively testing and improving our UI moving forward
","https://github.com/He7300/BitCamp2023, https://github.com/crosbymc28/fanniemae, https://github.com/He7300/stego-Fiji",,"Fannie Mae - Don’t Put All Your Eggs in One Basket, Cipher Tech - Best Digital Forensics Hack, Cockroach Labs - Best Use of CockroachDB Serverless, Bloomberg Industry Group - Best Public Sector Hack, Bloomberg - Most Philanthropic Hack ","python, sql, cochroachdb",Ronald Santos,Garcia,rsantsg@gmail.com,,Yes,George Mason University,"",CockroachDB,CockroachDB was an interesting tool to used it was nice and simple. We are glad that we used as it made things much simpler to do.,Yes,George Mason University,2,Maya,Crosby,crosbymc28@gmail.com,khorvath7,,katherine.horvath@outlook.com
Polar Low Identification,https://bitcamp2023.devpost.com/submissions/403940-polar-low-identification,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 07:00:15,"Inspiration

This project is based on a research project I did with my team - Ryan, Riya, and Katie - in one of my classes here at UMD. Riya mentioned to me that the dataset we had used had some invalid entry points, so I thought it would be a good idea to clean up the dataset and try to improve our previous model.

What it does

This model uses a pre-trained CNN called AlexNet combined with a decision tree to identify whether an image contains a polar low or not.

How we built it

After removing the invalid data points from the original dataset, I added some new data because I was suspicious that our original model was overfitting our small dataset. After this, I tried to manipulate the hyperparameters of our model (such as the number of epochs and learning rate) to find an optimal combination that led to improved accuracy.
","https://github.com/shrads-4/PolarLowIdentifier, https://drive.google.com/drive/folders/1L-yxUVKnaQYqoldtnwlqqsZ4rVuDJXVY?usp=share_link",,"Best Social Good Hack - Bitcamp, Best Machine Learning Hack - Bitcamp","python, pytorch, tensorflow, keras",Shraddha,Patre,spatre@terpmail.umd.edu,,Yes,University of Maryland,"","","I mostly used Google Colab and GitHub, which I am already pretty familiar with",Yes,University of Maryland - College Park,0
REFerence Sheet (Real Estate Financial),https://bitcamp2023.devpost.com/submissions/403947-reference-sheet-real-estate-financial,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 07:23:27,"Inspiration

We were inspired by the popularity of real estate resources like Zillow, so we decided to explore data from their listings and provide potential renters with the information they need while deciding on a property. 

What it does

REFerence Sheet provides a price estimate based on details of a certain property, such as the number of beds, number of baths, and total area (in square feet). A machine learning algorithm was applied to local real estate data to help predict housing prices. The dashboard also implements multiple data visualization strategies to communicate details of a property that have an effect on the listing price, as well as comparisons between these details to inform the user before they make a financial decision. 

How we built it

We built this project using Python and JupyterDash, as well as Google Colab. 

Challenges we ran into

We initially wanted to scrape Zillow data using Java, store it using MongoDB, and access that database using Python. However, we found Zillow listings cannot be easily web-scraped with Java, but can be using Python and a special API Key from Scrapeak's Zillow Scraper API. We also initially wanted to create a functioning web app but found that the connection failed for the port and server, so we decided to keep it as a dashboard that can be run within Jupyter Notebooks/Google Colab.

Accomplishments that we're proud of

We are proudest of the finished dashboard and UI of REFerence Sheet, as well as the utilization of JupyterDash, something we've never used before, to create it. We are also proud of our ability to scrape Zillow data after all when that was proving to be difficult at first.

What we learned

The biggest thing we learned was how to look at real estate data and derive meaning from what is already there. The second biggest thing we learned was how to apply machine learning to something like this, whether it's testing models or integrating it within the interactive dashboard. 

What's next for REFerence Sheet

With more time, we would have wanted to take more data, run it through machine learning models, and use it to predict the efficacy of a financial investment in the real estate sector.
",https://colab.research.google.com/drive/1DDCXyQY4Vpsh7WYao7QfhghtbVr-1K2O?usp=sharing,,"CoStar Group - Best Use of Real Estate Data, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Capital One - Best Financial Hack, Best Machine Learning Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","python, scrapeak, jupyterdash, colab, jupyternotebooks",Trinity,Newsome,tnewsome2019@gmail.com,,Yes,"University of Maryland, Montgomery College, Bowie State","","",I think the technology was awesome!,Yes,"University of Maryland - College Park, Montgomery College",3,Christopher,Perez Lebron,chrisperezlebron@gmail.com,Kat,Vasquez,katleenvasquez5@gmail.com,kamiyah,Mitchell,kaiyah45@gmail.com
Petsily,https://bitcamp2023.devpost.com/submissions/403959-petsily,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 07:43:55,"Petsily Short for Pets I Love You is a Social Media/Shopping Website for all our lovable Pets.
We Have Instagram, Facebook, Twitter, Etc.. to show off our fashion and Lifestyle. So why not let our cuddly furry friends have a platform inclusive for themselves. Petsily gives you exactly that, A social media and Shopping Website for all animals.

You can come in here, create account and browse through all your fur friends and see what they are up to. This website acts as both a social media App and a Online pet store where you can buy all your pet needs from medication to food and clothing supplies from trusted companies around the world.

The Website also provides features like Online Chat where you can talk with fellow pet lovers and News & Facts where you can come to learn new things about your furry friends

Development - I Used Next.js framework to build this website with JavaScript, HTML and Tailwind CSS. I came with this Original Idea by myself. 

One of my Inspirations was my girlfriend who is a hardcore. I faced many obstacles coding on my own but in the end I am satisfied on what I have created.
",https://petsily.vercel.app/,,"Best Social Good Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","javascript, html, tailwind, css",Ramareigns,Wijesinghe,ramithwijesinghe@gmail.com,,Yes,University of Maryland,honeywhereismysupersuit.tech,GitHub,It was a great and fun Adventure. I learned a lot,Yes,University of Maryland - College Park,0
bit.mortgage ,https://bitcamp2023.devpost.com/submissions/403969-bit-mortgage,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 07:49:48,"Inspiration

We were inspired by the 28/36 rule in finance. Which states that you should not spend more than 28% of your income on total housing expenses and no more than 36% on other debt. So we sought to make an app that does mortgage planning based on this rule.

What it does

The app takes in a few basic parameters like income, credit score range, and zip code to provide personalized guidelines and statistics for prospective home owners. We provide users up to date information on current mortgage interest rates based on credit score, and how that affects their budget in adherence to the 28/36 rule. In addition, we have a database of typical home value data for each zip code in the US, allowing us to compare the user’s budget to typical houses in the area they live in.

How we built it

The majority of the app is built using swift. The UI is all in SwiftUI for a native iOS experience. We utilized some python scripts to clean up the Zillow dataset of typical home value based on zip code and convert it to an html file. Our app acquires this data by using a web scraper to search for the data we need for a certain zip code. 

Challenges we ran into

The main challenge we ran into was time. For a more efficient and versatile solution, we could’ve set up a server backend that returns the necessary home value data when we called to it. However, we went with a web scraping solution as it was faster to implement. 

Finding proper data was also a great challenge for us. For example, interest rates are quite complex and varied greatly due to factors like loan size, credit score, and location. We were eventually able to find the data of national averages, but it is not as personalized as we would like. 

Accomplishments that we're proud of

We are proud of the overall product we made. The UI design and experience was aesthetically pleasing and also easy to use. The experience is also very quick to use and streamlined. We are also proud of the various formulas we researched and implemented to provide recommended budgets and guidelines.

What we learned

We have learned a great deal from this experience. We have certainly learned to become better UI designers and became more familiar with Swift. We also learned for the first time how to web scrape using Swift. We also learned a little more about python’s pandas library while cleaning up and extracting the data we needed from Zillow’s dataset. 

What's next for bit.mortgage

We plan on implementing more features to the project like accounting for property tax in our expenses and perhaps even insurance. We also plan eventually ditching web scraping and utilizing a server for our mobile app. 
",https://github.com/Justinzh0905/bit.mortgage,https://youtu.be/5AdFgzyDgQY,"CoStar Group - Best Use of Real Estate Data, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp","swift, swiftui, python, pandas, zillow",Justin,Z,justinzh0905@gmail.com,,No,"University of Maryland, Salisbury University","","",The WiFi was slow and often times nonexistent.,Yes,"University of Maryland - College Park, Salisbury University",3,Brandon,Newman,bnewman6@terpmail.umd.edu,Andy,Granovski,agranovs@terpmail.umd.edu,Daniel,Lugasi,dlugasi1@gulls.salisbury.edu
PE headers parser,https://bitcamp2023.devpost.com/submissions/403979-pe-headers-parser,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 07:59:53,"Inspiration

The original idea was to build a parser and then disassembler for x86. This would allow me to run my python script on some arbitrary 32 bit PE file have a sense of the code it will execute. While there are already disassemblers (ghidra, ida, etc) and PE parsers (see PEbear), I felt that making my own would help me learn more about what these tools are doing under the hood. The other goal was to get familiar with the PE file format.

What it does

The script opens a binary file and starts reading it. It looks for magic bytes to validate that the target file is a PE file and extracts information from the PE headers if so.

How we built it

I followed a blogpost that describes the PE file format and wrote a python script to parse those objects:
https://0xrick.github.io/win-internals/pe4/

Challenges we ran into

The biggest challenge was timing

What's next for PE headers parser

What's next is to write my own x86 disassembler and add that to this project.
","",,"Cipher Tech - Best Digital Forensics Hack, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp",python,Frederick,Sell,fsell1@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","",I only used python. Python is great!,No,University of Maryland - College Park,0
MoneyMe,https://bitcamp2023.devpost.com/submissions/403981-moneyme,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:02:09,"Inspiration

Nobody likes spending those extra 10 minutes on the way back home splitting a bill after a delicious meal with friends. Every time it happens, you lose 10 minutes of your life that you'll never get back! I've experienced this all too well, and during BitCamp, I created MoneyMe to help all the faithful bill-fronters who are also tired of doing more work after handing over their card.

What it does

MoneyMe uses computer vision and OCR technology to automagically scan your paper receipts, and generates a virtual bill that can be opened via a QR Code by other members of your party. After each person selects which items they ate, MoneyMe will calculate each person's individual cost, as well as the general split between subexpenses like taxes & fees. MoneyMe then displays the preferred payment method of the host, and fills in the details, making it easy for party members to pay back the host.

How we built it

I developed the web app using a popular react framework called Next.js. The party integration and realtime cost updates rely on Socket.io, a poweful websocket library. Receipt scanning was implemented in python with opencv and tesseract OCR. The backend is powered by express and Next.js' own api framework.

Challenges we ran into

Computer vision is hard! I spent a bulk of my time debugging opencv.js and polishing the user interface to be as accessible and friendly as possible. 

Accomplishments that we're proud of


MoneyMe is privacy focused. It doesn't store any kind of telemetry / tracking info, and generates randomized identities for every new session created. Bill details are never stored permanently!
MoneyMe was designed to be as frictionless as possible. Users can pull out their phone, scan the QR code, and pay for their meal in less than 30 seconds!


What's next for MoneyMe


Integration with payment vendors (i.e. Menusifu & Square)
Mobile apps for iOS and Android
Personalized accounts & bill history
Venmo / Paypal integration

","",,"Best UI/UX Hack - Bitcamp, Capital One - Best Financial Hack, People's Choice Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","nextjs, react, express.js, node.js, socket.io, websockets, opencv, tesseract, python, javascript, html5, css3, sass",Brian,X,brianx0011@gmail.com,,Yes,University of Maryland: College Park,"","","There were some issues with the speakers and microphones towards the beginning of the event, but otherwise it was all great!",No,"",0
SportConnect,https://bitcamp2023.devpost.com/submissions/403983-sportconnect,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:03:11,"Inspiration

Our team was inspired to create a platform for sports enthusiasts to easily organize and participate in pick-up matches in their local area. We recognized that there was a need for a more efficient and inclusive platform for people to find and join such events in real-time.

What it does

Our mobile app allows users to post sports events to other users in their location to facilitate pick-up matches. The app includes features that cater to people of all abilities, making it a more inclusive platform for sports enthusiasts.

How we built it

To build the app, we used React Native for the frontend. We also planned to integrate Google Maps API to display event locations and use either CockroachDB or MongoDB Atlas to handle user authentication and storage.

Challenges we ran into

We faced several challenges throughout the development process, including integrating the location-based feature with the app, implementing a secure login system, and ensuring that the app functions properly and securely.

Accomplishments that we're proud of

We are proud of the fact that we were able to build a functional and visually appealing mobile app that caters to people of all abilities. Despite the challenges we faced, we were able to create a platform that enables sports enthusiasts to connect with each other and participate in pick-up matches in their local area.

What we learned

We learned a lot about building mobile apps and the challenges that come with it. We also learned about the importance of thorough testing to ensure that the app functions properly and securely. In addition, we gained valuable experience working with React Native, MongoDB, and other technologies.

What's next

In the future, we plan to continue working on this project and adding more features to make it an even more comprehensive platform for sports enthusiasts. We also hope to partner with local sports organizations and teams to promote the app and increase its reach.
","",https://youtu.be/kYm5q4a-91Q,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp",react-native,Ojas,Jagtap,ojagtap@terpmail.umd.edu,,Yes,University of Maryland,"","","We worked on developing a mobile app this weekend using React Native for the frontend. React Native and Expo provided us with a wide range of pre-built components, which we were able to customize and extend as per our requirements. The hot reloading and debugging features of these technologies made the development process faster and more efficient.

Although we intended to create databases with both MongoDB and CockroachDB for the backend, we were unable to complete this task in time for submission. Nevertheless, our team learned a lot from this experience and we plan to continue exploring these technologies in the future. Overall, our experience with React Native, Expo, and Node.js was positive and we were able to build a functional and visually appealing mobile app.",Yes,University of Maryland - College Park,2,Ojas,Malghan,ojas.malghan7@gmail.com,Arush,Kumar,akarushkumar7@gmail.com
Tic Tac Toe Game,https://bitcamp2023.devpost.com/submissions/403984-tic-tac-toe-game,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:04:30,"Inspiration

My inspiration to create this Tic Tac Toe game was to recreate the game I used to play with my sister as a kid. It brings back fond memories of the times we spent together and the fun we had playing. The game is simple and straightforward, but it can be incredibly entertaining and challenging at the same time. With this modern version of the game, I can play it anywhere, anytime. Whether I'm waiting for the bus, taking a break from studying, or just relaxing at home, I can pull out my phone and start playing. It's a great way to pass the time, and it's also a fun way to exercise my brain and challenge myself. Creating this game has been a labor of love, and I'm thrilled to be able to share it with others. I hope that it can bring the same joy and entertainment to others that it has brought to me.

What it does

Tic-tac-toe is a game that challenges players to mark X's and O's on a 3x3 grid. The game is usually played with two players taking turns marking X's and O's, with the goal of getting three marks in a row before the opponent does. However, in this version of the game, the player can play solo, trying to find a way to mark X or O in a way that results in a row of three.

How we built it

To build this Tic Tac Toe game, I used my basic knowledge of JavaScript. I started by creating a simple HTML layout for the game board, with a 3x3 grid where players could place their marks. Then, I used JavaScript to add interactivity to the game. I wrote code to handle the placement of X's and O's on the board, as well as code to check for a winning pattern. Throughout the development process, I relied on my understanding of JavaScript to write code that was efficient, readable, and easy to maintain. I made use of common programming constructs like loops, functions, and conditionals to build the game's logic.

Challenges we ran into

One of the biggest challenges I ran into while building my game was not having a lot of prior experience with JavaScript. While I had a basic understanding of the language, I found that building a more complex game required me to learn new concepts and techniques that I wasn't familiar with.

Accomplishments that we're proud of

I'm proud of the fact that the game works as intended. I am also proud that the mechanics are simple but effective, and that it offers a fun and engaging experience.

What we learned

Through building my game, I learned that there is always room for improvement. Even though I'm proud of the game I created, I'm already thinking about ways to make it even better.

What's next for Tic Tac Toe Game

I'm planning to keep improving it to make it even better. One thing I'm considering is adding new game modes. I'm also thinking about adding multiplayer functionality so that players can challenge each other online.
","",,Best First Time Hack - Bitcamp,"javascript, html, css, visual-studio",andy,cruz,andywcruz3005@gmail.com,,Yes,Baltimore Polytechnic Institute,"","",I technology experience was good.,Yes,Baltimore Polytechnic High School,0
Roomie Swipe,https://bitcamp2023.devpost.com/submissions/403990-roomie-swipe,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:10:54,"Housing for Off campus housing 

it matches you with other people to find a place to live together

using python

hard time finding maps api and public real estate database

we need better time management

scale
",https://github.com/hle61/pending-rommie-swipe-bitcamp,,"CoStar Group - Best Use of Real Estate Data, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","python, figma",Ha,Le,hle37@gmu.edu,,Yes,"UMD, GMU",none,"",have a hard time with the wifi and finding right resources,Yes,"George Mason University, University of Maryland - College Park",2,Roshni,Kainthan,rkaintha@terpmail.umd.edu,Victoria,Lee,vlee12@terpmail.umd.edu
Audivision,https://bitcamp2023.devpost.com/submissions/404003-audivision,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:22:32,"Inspiration

In the creation of this project, we were driven by the desire to assist people with disabilities. To establish a clear goal of the project, we decided to design and create a project aimed towards helping blind people. The main reason for this decision is because we wanted to include a LiDar sensor into our design, and considering how LiDar is used for obstacle avoidance, it seemed intuitive to design a unique and fun creation aimed at helping blind people towards spatial awareness.

What it does

This project helps provide spatial awareness to the blind using a modified white cane and a belt with buzzers. When the user wears the belt, the buzzer on the belt at the angle of the object nearest to them will buzz at a frequency corresponding to its distance from the user. The higher the frequency, the closer the object is to the user, the lower the frequency the farther it is from the user.

How we built it

We used the RPLiDar A1M8 as our lidar sensor that provided us the angle and distance of all the objects within a certain range of the user, and a raspberry pi to interface between the buzzers on the belt and the lidar sensor data. For the code we used python and the RPLiDar and RPi.GPIO library for the logic of how the buzzer’s will map to the angle and distance data.  

Challenges we ran into

We learned that this hack might not be very useful to blind people the way that they usually use a white cane given the feedback we received, but decided to complete it anyways as our first iteration. We also ran into issues with input overflow due to our code being slow. We had to optimize our code in order to overcome this issue. Other challenges included the limited hardware that is provided to us, for example broken raspberry pi’s and wires. 

Accomplishments that we're proud of

We are proud of being able to put together this project in the span of this hackathon. 

What we learned

We learned the importance of teamwork and could not have accomplished as much if we did not utilize everyone’s strengths. 

What's next for Audivision

We initially wanted to use haptic sensors to alert the user of the objects near them but did not have access to them. The next step would be to develop an algorithm that alerts the user of multiple objects within a certain radius at different distances at the same time and use haptic sensors to make the product more user friendly.
",https://github.com/eileenyq/Bitcamp2023,,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best Hardware Hack - Bitcamp","python, raspberry-pi, 3dprinting, cad, rplidar, gpio",Eileen,Yuan,eileenyuantw@gmail.com,,Yes,University of Maryland,"","",Great!,Yes,University of Maryland - College Park,3,Mathew,Erickson,merickso@terpmail.umd.edu,Arya,Ghorpade,aghorpad@terpmail.umd.edu,Muallim,Cekic,muallim718@gmail.com
Password Manager,https://bitcamp2023.devpost.com/submissions/404004-password-manager,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:23:21,"Inspiration
I started my programming journey messing around with passwords, so it seemed like the good idea to see how far my skills have developed since then by going back to my roots and developing a password related application.

What it does
Allows the user to quickly access (and save) passwords via facial recognition. Reduces security risks and helps forgetful folk use the one password they always have with them - their face.

How we built it
Python and a variety of Python libraries, including Numpy, OpenCV, customtkinter, and keyring. It also took a lot of research into facial recognition technology, encryption, and GUI in python in order to get it to (somewhat) working condition.

Challenges we ran into
Every part was challenging, since I knew almost nothing about the libraries beforehand. Getting the facial recognition to work took a lot of experimenting and familiarizing with OpenCV, and getting finding the right encryption methods to use was also difficult. In the end, not all desired features (even some fundamental features) were implemented due to time restraints, but a lot was learned from taking on these challenges.

Accomplishments that we're proud of
The final product, being as unfinished as it is, is still something I am proud of. I did not think I would get this far on a project of this scale, especially since they relate to things I have never tried to do before. Most importantly, though, I am proud of the things that I learned developing this project, since I definitely see a use for the in the near future.

What we learned
I learned more than I expected about the syntax of the libraries I used and some of the inner workings of encryption and hashing, as well as getting a better idea of what these things are applicable to.

What's next for Password Manager
It was certainly a neat project, so I plan to fully flush it out with all the features I originally intended for it to have and more. Adding new users, faster recognition, and a master password are some of the features I aim to implement in the near future. Hopefully, it will one day be a proper (and secure) password management application that I will trust with my own passwords.
","",,Best First Time Hack - Bitcamp,python,Anh,Cao,anhc14@outlook.com,,Yes,"University of Maryland, College Park","","",None.,Yes,University of Maryland - College Park,0
Cagnus Marlsen (Chessbot AI),https://bitcamp2023.devpost.com/submissions/404006-cagnus-marlsen-chessbot-ai,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:27:37,"Inspiration

We were inspired to make a chess AI after learning about the relevant concepts in an intro to AI class. We also really like chess, so making a chess AI seemed pretty fun.

What it does

It allows the user to play against a chess bot, which looks ahead a few moves and calculates the most optimal move given what the player moves. 

How we built it

The front end is made with HTML/CSS and Javascript. The backend, or the AI part, is made through Node.js, and the server is hosted on an EC2 instance on AWS. The core algorithm of the AI is a minmax search, and it uses alpha beta pruning and an optimal evaluation function to reduce the number of nodes searched. 

Challenges we ran into

Figuring out what needed to be communicated between the front end and back end. Finding a good library for chess move generation and validation. Creating an efficient AI that searches deep enough in a feasible amount of time (this was solved with alpha beta pruning, tweaking the evaluation function, and keeping track of past board states). Facilitating the user input in the front end to keep track of which pieces are moved. Hosting the backend on an EC2 instance and utilizing an SSL certified .tech domain to be able to make requests to it. 

Accomplishments that we're proud of

Just getting the AI to work and be able to play a full game with the player is something we are very proud of. Not only that, but this AI works fairly well, as I have a negative record against it. We are also proud of figuring out the hosting part of it, as we learned how to deploy a full stack app through hosting the backend on a AWS EC2 instance, which we've never done before. This means that anyone can play against our bot as long as they have the website url. 

What we learned

As aforementioned, we learned how to deploy a full stack app through AWS. We also learned how to improve the efficiency of a minmax search, where we learned to take into consideration of many factors to increase the speed of the algorithm. 

What's next for Cagnus Marlsen (Chessbot AI)

Improving the AI by allowing it to search deeper moves and in a short amount of time. Add multiplayer functionality. Make it so that the backend doesn't slow down when multiple people are playing the bot at the same time. 
",https://kaidriver.github.io/ChessAI/,,"Best Razzle Dazzle Hack - Bitcamp, Best Domain Name from Domain.com - Major League Hacking, Best Bitcamp Hack - Bitcamp","html, css, javascript, node.js, amazon-web-services, amazon-ec2",Kaiwen,Song,jirachiji@gmail.com,,Yes,University of Maryland,http://cagnusmarlsenbot.tech/,"",Everything worked fine,Yes,University of Maryland - College Park,1,Davis,Xu,davistxu@gmail.com
AnonPlay,https://bitcamp2023.devpost.com/submissions/404011-anonplay,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:31:36,"AnonPlay

Inspiration

AnonPlay was inspired by the need for a seamless and personalized streaming experience. We wanted to create an app that allows users to create private rooms and stream a cloud computer, while also incorporating a built-in chat feature for real-time collaboration. 

What it does

AnonPlay allows users to watch movies, TV shows, sports events, play games, and use software applications in a secure and private environment. Users can create custom rooms and customize their cloud computer to their preferences, making it a versatile and user-friendly streaming platform.

How we built it

AnonPlay was built using a modern tech stack including Next.js 13, Tailwind, and TypeScript for the front-end, and [Your Backend Tech Stack] for the back-end. We followed best practices for software development, including modular and reusable code, proper code documentation, and version control using Git and GitHub.

Challenges we ran into

Throughout the development process, we faced challenges in implementing the chat feature, ensuring secure encryption of data, and optimizing performance for different devices and platforms. We also had to address user feedback and make improvements based on their needs and preferences.

Accomplishments that we're proud of

We are proud of creating a feature-rich app that provides a seamless and personalized streaming experience. We successfully implemented the chat feature, ensured secure encryption of data, and optimized performance for a wide range of devices and platforms. 

What we learned

During the development of AnonPlay, we learned valuable lessons in front-end and back-end technologies, collaborative software development, and user-centric design. We gained experience in building a full-stack app and overcoming technical challenges along the way.

What's next for AnonPlay

In the future, we plan to further enhance AnonPlay by incorporating additional features based on user feedback, expanding compatibility with more devices and platforms, and continuing to improve performance and security. We are committed to providing a top-notch streaming experience for our users and are excited about the future of AnonPlay.
",https://anonplay.vercel.app/,https://vimeo.com/816001384,"","nextjs, typescript, tailwindcss",Trannosaurus,Tran,ant.tran2003@gmail.com,,Yes,University of Maryland,"","",nextjs 13 and its recent developments. they released a new api routing system this week which i implemented,Yes,University of Maryland - College Park,0
Lively,https://bitcamp2023.devpost.com/submissions/404016-lively,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:36:13,"Inspiration

we think it's important to our mental health to maintain close contact with friends and check in on them often, but it can be hard to remember and bring yourself to do so. we think an app can help with that by reminding you randomly, once a day, to check in with a group chat on lively.

What it does

it has groups and each day users get a notification that goes off once a day, per group to check in with that group.

How we built it

we used firebase and flutter.

Challenges we ran into

we had changed our minds about what the end product was going to be a lot. we wanted to initially 

Accomplishments that we're proud of

this was esteban's first time using flutter, firebase and dart and we still both contributed equally to the project. we also managed to submit a project even with last minute idea changes.

What we learned

we change our minds too much

What's next for Lively

maybe we'll build it the way we intended from the start, where each group would have one person livestream each day.
",https://github.com/dannyhyatt/lively/,,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp",flutter,Dan,Hyatt,daf281@aol.com,,Yes,UMD,"","",lots of configuration with xcode and trouble with certificates made tonight quite fun,No,University of Maryland - College Park,1,Esteban,Peredo,eperedo4@gmail.com
Untitled,"",Draft,Pending,Manage team,04/09/2023 08:38:10,"","",,"","",Kai,Grigsby,kaigrigsby62@gmail.com,,"","","","","","",Baltimore Polytechnic Institute,0
BitTales,https://bitcamp2023.devpost.com/submissions/404020-bittales,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:39:09,"Inspiration

Our tool is driven by the belief that every individual's life story is valuable and deserves to be shared. With a focus on connecting younger generations with the experiences and wisdom of the elderly, we have developed a video chat and sentiment analysis platform for the sharing and preservation of these stories. By transforming the most impactful parts of these conversations into personalized bedtime stories, we hope to inspire and educate the next generation while also honoring the contributions of those who have lived long and rich lives. Join us in this meaningful initiative to promote human connection and celebrate the sharing of knowledge across generations.

What it does

BitTales is a cutting-edge web application designed to bridge the generational gap by harnessing the wisdom and expertise of elderly individuals to provide engaging and educational bedtime stories for young children. The platform utilizes sophisticated natural language processing and sentiment analysis algorithms to extract the most impactful elements of the conversation between elderly individuals and children, which are then transformed into compelling stories.

BitTales features a mental health support function that leverages machine learning models and a range of mental health resources to provide a safe and supportive space for seniors to share their experiences and feelings. The app serves as a community hub, helping to alleviate feelings of loneliness, isolation, and depression, and promoting social connections among the elderly.

The platform also enables parents to participate in their child's bedtime routine, offering a guilt-free way to upload their own stories and create a personalized storytelling experience. Additionally, BitTales allows parents to upload PDFs or links to books, providing a vast library of options to choose from.
Overall, BitTales is a powerful platform that uses advanced technology to promote intergenerational learning, support senior well-being, and enhance children's mental development through the power of storytelling.

We have also incorporated gamification as a key feature of our app, we provide a silent mode that allows children to engage with the stories in a fun and interactive way. With the use of game elements such as points, rewards, and challenges, children can explore the stories and learn in an entertaining and engaging manner. This feature not only enhances the user experience for children but also encourages them to actively participate in the storytelling process, making the learning experience more enjoyable and memorable.

How we built it

We used Java, Spring Boot, and Docker for the backend and Cockroach DB, Azure Cloud, and Google Cloud database for storing data. We used HTML CSS, JS, CanvaJS, Bootstrap and JQuery for the front end. We developed Speech to text, Voice Cloning, Emotion Detection, and Text to Speech Models. We used PyTorch, Flask, Hugging Face, Transformer, and Open AI for making the ML model. 

Challenges we ran into

Challenge 1: Our team faced difficulty in selecting a technology stack for our project as we did not have a common language or framework in which we were proficient. This led to lengthy discussions and debates to reach a decision that everyone agreed upon.
Challenge 2: Our team did not have enough time to train a machine-learning model for voice cloning. 
Challenge 3: Domain name takes up to 24 hours to propagate A and CNAME changes. So, have to demo on docker.
Challenge 3: Our team experienced unstable Wi-Fi connectivity during the project, causing delays in communication, slowing down the project's progress, and making it difficult to access resources or collaborate effectively with team members. 

Accomplishments that we're proud of

The following are some of the salient features of BitTales:
Voice setup: Parents can set up their voice and provide a sample recording to be used in the storytelling. We are generating more natural and fluent speech by cloning the sample provided.
Story library: Browse a library of classic and original stories that are perfect for kids of all ages. These stories are curated from various books and knowledge learned from seniors and old age people (after obtaining consent from all parties involved). Parents can provide links, which we parse and generate stories for.
Interactive storytelling: Engage your child with interactive elements in each story, including sound effects like voice modulation, automatic video brightness, and Question Answering with feedback.
Personalization: Parents can personalize and choose what their children should consume. (Genre, Books, and Facts from our database.)
Learning from seniors: Older adults can use the app as an AI companion to talk to and share their stories and knowledge. These stories will be checked for toxicity before being added to our knowledge base.
Tracking Mental Health:  This features a mental health support function that leverages machine learning models and a range of mental health resources to provide a safe and supportive space for seniors to share their experiences and feelings. 
Gamification:  We provide functionality that allows children to engage with the stories in a fun and interactive way using game elements such as points, rewards, and challenges

What we learned

Through the development of BitTales, we gained valuable insights into how to connect and bridge the gap between two generations - the elderly and children. This web application not only promotes intergenerational learning but also serves as a means of improving mental health by taking a small step toward creating a community of support.
Building this app required us to consider the needs and perspectives of three major sectors of society - children, working parents, and the elderly. Each perspective was crucial in the development process, and we learned the importance of considering different viewpoints. Overall, BitTales has taught us the significance of creating solutions that address the needs of diverse groups and the impact that technology can have on social connections and well-being.

What's next for BitTales

BitTales has various possibilities for growth and expansion. These include catering to the elderly population, offering educational resources, expanding globally for other languages (multilingual), and collaborating with mental health professionals to provide comprehensive support. 
Overall, there are many exciting opportunities for BitTales to continue making a positive impact on society.
","https://github.com/janitbidhan/bittales, https://youtu.be/mkwxu7kUr38",https://youtu.be/t3BfvlTGg_g,"Best Domain Name from Domain.com - Major League Hacking, Best Use of Microsoft Cloud for Your Community - Major League Hacking, Best Social Good Hack - Bitcamp, Cockroach Labs - Best Use of CockroachDB Serverless, Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack ","azure, sqlite, bootstrap, cockroachdb, springboot, ml, natural-language-processing, docker, java, html5, python, css3, jq, openai, ai",Janit,Bidhan,janitbidhan@gmail.com,,Yes,George Mason University,"BitTales.tech,  carecamp.tech , hackhappy.tech","CockroachDB for connecting through SQLAlchemy , Domain.com as we got to know about how domains work","CockroachDB, Twillo, Azure, Google Cloud API, Docker, Domain.com",Yes,"George Mason University, Bennett University",2,Aabha,Bothera,bothera.aabha@gmail.com,Saurabh,Srivastava,ssrivas6@gmu.edu
TweetWatch,https://bitcamp2023.devpost.com/submissions/404021-tweetwatch,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:40:33,"Slideshow

TweetWatch Presentation

Inspiration

We wanted to address a dire lack of awareness and attention towards the most deeply troubled in our society.

What it does

TweetWatch helps identify individuals who may pose a risk to themselves or others by analyzing their posting behavior on the popular social media app Twitter.

How we built it

We used a fine-tuned DistilBERT model in conjunction with publicly available tweet data from user profiles to assign ratings and positivity and negativity to their recent tweets.

Challenges we ran into

We didn't have a budget for API access so we had to work around not being able to access the Twitter API directly or the HuggingFace APIs without limit.

Accomplishments that we're proud of

One success we found while testing was that if a given user added new tweets that were clearly problematic, their risk factor increased on the next run without fail.

What we learned

We learned that machine learning has a lot to offer the psychological and therapeutic communities,

What's next for TweetWatch

Training the neural net with more data, also creating a more aesthetic and more accessible UX.
",https://github.com/ethan-lott/tweetwatch-bitcamp-2023,,"Cipher Tech - Best Digital Forensics Hack, Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Bloomberg - Most Philanthropic Hack ","python, bert, html, css, huggingface, github, git",Ethan,Lott,elott1@terpmail.umd.edu,,Yes,"University of Maryland, College Park","","","Google Colab was an interesting new technology that I had never used before, but will continue to explore.",Yes,University of Maryland - College Park,2,Rohan,Ahuja,rohanahuja4@gmail.com,Neil,Hajela,nhajela1@gmail.com
Helper from Instructors,https://bitcamp2023.devpost.com/submissions/404022-helper-from-instructors,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:40:39,"Inspiration

Inspired by duscord

What it does

Provides a messaging space with teachers and instructors

How we built it

Thought react native using JavaScript 

Challenges we ran into

Couldn't make it so the app could change page or recreate a messaging environment 
","",,"Fannie Mae - Don’t Put All Your Eggs in One Basket, Cipher Tech - Best Digital Forensics Hack, Best Use of Microsoft Cloud for Your Community - Major League Hacking, Cockroach Labs - Best Use of CockroachDB Serverless, Bloomberg Industry Group - Best Public Sector Hack, Most Creative Use of Twilio - Major League Hacking, Bloomberg - Most Philanthropic Hack ","react-native, javascript",Jayden,Hooper,jhoop1026@gmail.com,,Yes,Baltimore Polytechnic Institute,N/a,"VS Studio, repl",The technology we used worked well.,No,Baltimore Polytechnic Institute,1,Kai,Grigsby,kaigrigsby62@gmail.com
Mercury,https://bitcamp2023.devpost.com/submissions/404024-mercury,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:40:57,"Inspiration

There are many schedule builder tools available, but they all lack one thing - they make you do the work! The process of creating a schedule is tedious, but it doesn't have to be. It's basically just a matter of criteria (I like this professor, this class is too early), which can all be automated. We tried to solve this and build a tool to assist with this.

What it does

Mercury is a website that creates class schedules. The front page has a box to upload your transcript PDF, or copy and paste it. The data is then parsed and key fields such as major and previous classes are extracted. From this, we determine graduation requirements, remaining gen eds, and which classes you might like taking. Finally, it creates a bunch of permutations of classes that maximize your wants. These are displayed, and then there are several criteria that allow you to specify more restrictions. The site generates new schedules and displays them, and then repeat as necessary.

How we built it

Using umd.io we downloaded the classes and sections offered next semester. For each of these, we manually re-coded the prerequisites into our data format. Then, we wrote code to permute these together and come up with schedules. Finally, we added filters and weights so that the correct schedules would appear.

Challenges we ran into

There were many significant challenges we ran into:


The way prerequisites are defined is very weird and not standardized - we had to create a custom data structure to represent all of the different combinations of classes that could fulfill it
Similarly, representing graduation requirements was not simple and we had to write an algorithm to determine which schedules reduced the number of remaining graduation requirements
Determining what a 'good' schedule is: with 2 upper level CS classes and 1 gen-ed class, there can be up to 500,000 schedules, which need to be ranked somehow. Each criteria can 'grade' a schedule, but figuring out what the scale is and how to combine these criteria was a challenge.


Accomplishments that we're proud of

Creating the system to check prereqs and grad requirements was a ton of work and the result was very rewarding. We essentially had to re-implement the degree audit system in a basic way.
Also, we learned a lot of technologies along the way, which was nice.

What we learned

We learned a new frontend framework, Sycamore. We also learned more about parsing PDFs, data structures, and writing in Rust in general.

What's next for Mercury

A lot more work needs to go into the degree requirements system to make it more robust. Also, we downloaded professor ratings and grades from PlanetTerp, but weren't able to utilize the data in time. 
",https://gitlab.com/chocological00/bitcamp-2023,,"Best Moonshot Hack - Bitcamp, Best Bitcamp Hack - Bitcamp","rust, sycamore, rest, python, planetterp, umd.io",Drew,Pleat,drew.pleat@gmail.com,,Yes,University of Maryland College Park,"","",none of sponsor tech,No,University of Maryland - College Park,1,David,Kim,dkim8420@terpmail.umd.edu
Untitled,"",Draft,Pending,Manage team,04/09/2023 08:41:55,"","",,"","",Mihir,Konda,mihir.konda@gmail.com,,"","","","","","",University of Maryland - College Park,0
Untitled,"",Draft,Pending,Manage team,04/09/2023 08:42:34,"","",,"","",Songhang,Lin,songhanglin2@gmail.com,,"","","","","","",Oakton High School,0
Occupan-See,https://bitcamp2023.devpost.com/submissions/404030-occupan-see,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:50:33,"Inspiration

When brainstorming, we interviewed our community to gather input on what they felt needed to be addressed by technology. One such topic was given to us by two fire marshals with experience in dealing with the potentially deadly dangers of overcrowding.

What it does

Our app uses the Mask R-CNN model with the Detection2 library to perform a semantic segmentation, pixel-by-pixel labeling of an image, to generate larger labels of areas (people). From there, we count the live number of people in a given area and determine whether or not the current density should be addressed before the situation becomes dangerous.

How we built it

Fundamentally, this is an object detection task. We toyed with the idea of training a large-scale object detection model from scratch but ultimately realized that doing so would be computationally intractable during a hackathon. As such, we opted to leverage powerful, well-researched, and battle-tested publicly available models. 

Challenges we ran into

At first, we attempted to apply YOLOV8, a common model used for general object detection based on a CNN architecture, capable of supplying near-real-time object detection. As a result, we had trouble distinguishing an individual from their background, a potentially fatal mistake when each person is needed. However, through further research, we were able to utilize a more powerful model and drastically improve our detection rate.

Accomplishments that we're proud of

We are extremely proud of our ability to stream a live video feed and analyze it using computer vision in real-time, allowing for efficient and effective detection of a group of people. We are also proud of our easy-to-use user interface that allows for a quick analysis of any given situation.

What we learned

We learned how to train and use appropriate models, such as Mask R-CNN, to effectively detect individuals. 

What's next for Occupan-See

The next step for Occupan-See is to expand our systems into fields where they could save lives, such as  the architecture design industry.
",https://github.com/devshel,https://www.youtube.com/watch?v=u2lz95KwznY,"Best Machine Learning Hack - Bitcamp, Bloomberg - Most Philanthropic Hack , Best Bitcamp Hack - Bitcamp","maskr-cnn, computer-vision, firebase, react, detection2",Harrison,P.,harrisonp664@gmail.com,,Yes,"University of Maryland, Eastern Technical High School","","",PyTorch - we utilized several PyTorch models.,Yes,Eastern Technical High School,2,Karthik,Sankar,karthikandsankar@gmail.com,Sheldon,Padgett,sheldonpadgett1@gmail.com
Space Cop 7: Return of the Fraudulent Monetary Gains  ,https://bitcamp2023.devpost.com/submissions/404033-space-cop-7-return-of-the-fraudulent-monetary-gains,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:53:26,"Inspiration: The Commodore 64 style of game creation as well as modern sci fi comedy shows such as The Orville and Futurama.

What it does: It either takes you through a linear storytelling environment where the player can impact what happens in the story, or it can be a battle mode to get them used to combat.

How we built it: Too many if-statements, but in all seriousness we divvied up the work solidly between 2 people and ensured that the work they received was fitting to their expertise in the field.

Challenges we ran into: The main challenge we had was ensuring that our input devices worked correctly, which we were only able to fix a few minutes before submission.

Accomplishments that we're proud of: We are proud of the story that we tell, it is quick, funny, and heartwarming all at the same time.

What we learned: A big thing that we learned was the ability to incorporate the storyboarding process with coding to create a fun, interactive tale.

What's next for Space Cop 7: Return of the Fraudulent Monetary Gains? Most likely Space Cop 8: Return of the Return of the Fraudulent Monetary Gains.
",https://replit.com/@EdmondWalunas/Bitcamp-2023-Oisin-and-Edmond#Main.java,,"","java, replit",oisin,dobbie,oisindobbie@icloud.com,,Yes,Baltimore Polytechnic Institute,"",We mainly stuck to platforms that were familiar to us so we don't have anything to say other than that it worked fairly well.,"It was good, the main issue we ran into was the spotty internet connection inside the arena.",Yes,Baltimore Polytechnic Institute,1,Ed,,edmondwalunas1868@gmail.com
BinSort,https://bitcamp2023.devpost.com/submissions/404035-binsort,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:54:53,"Inspiration

Figuring out what to recycle or compost is harder than it should be. For many items out there, it's hard to distinguish whether its recyclable or compostable, which is why people often opt to just throw everything in the trash. For example, some Starbucks cups are lined with plastic which makes them non recyclable.  

What it does

BinSort provides an easy solution to determine whether items you're about to throw away can be recycled or composted. The application provides a search bar where users a user can enter an item they're about to throw away, and easily see whether their disposables can be reused. 

How we built it

For our tech stack, we used FastAPI for backend, CockroachDB as the database, and Next.js for the front-end.

Challenges we ran into

Most of our members were unfamiliar with full stack development, so there was definitely a steep learning curve. In addition we were unfamiliar with the tech stack so it was difficult getting everything set up.
",https://github.com/ozadk/RecycleBitcamp,,Cockroach Labs - Best Use of CockroachDB Serverless,"python, fastapi, cockroachdb, react, nextjs",Kobe,Wang,kobe8803@gmail.com,,Yes,"University of Maryland, College Park",BinSort.tech,"",Good,Yes,University of Maryland - College Park,1,Oliver,Adkins,oza2002@yahoo.com
The Beginner Arduino Experience,https://bitcamp2023.devpost.com/submissions/404036-the-beginner-arduino-experience,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:54:55,"Inspiration

Bitcamp provided me with a lot of different pieces of hardware. I was not sure of any projects that I could do with real-world functions. So decided to combine the many different pieces of hardware into a project.

What it does

The project operates with a breadboard, Arduino Uno, Grove shield, and other electrical parts. The main functionality draws from the distance sensory. An LCD screen will then print the distance between the closest(up to about 14 feet) object in front of it. A servo will turn (180 degrees) adjusting itself between ranges of 0-30 given by the distance sensor. As well as less that turn on and off given this range. A switch can be flipped to allow the functionality of these pieces. While on the side I have included a laser head diode to be adjusted according to a potentiometer. 

How we built it

I built the project by drawing inspiration from the internet and learning how each piece of equipment works. In I was able to combine these different parts by working off of each other. 

Challenges we ran into

I needed a potentiometer to provide a function to a laser head, however, the breadboard and wires did not fit properly to the potentiometer. Therefore, with help from a mentor I was able to learn how to solder wires to the potentiometer so I could it. 

Accomplishments that we're proud of

I am proud of coming to a hackathon and without much experience coming out with more knowledge and skills than when I came.

What we learned

I would say learning how to solder would be a large accomplishment. While also being able to learn how to use the many different intricate pieces of hardware.  

What's next for The Beginner Arduino Experience

I do not have additional plans as of now. 
","",,"Best First Time Hack - Bitcamp, Best Hardware Hack - Bitcamp","arduino, grove, lcd, servo",Danny,Shi,dshi0322@terpmail.umd.edu,,Yes,UMD,"","",It was fantastic interacting with the mentors and representative sponsors.,No,"",0
Untitled,"",Draft,Pending,Manage team,04/09/2023 08:56:24,"","",,"","",Kruten,Patel,krutenpatel18@gmail.com,,"","","","","","",University of Maryland - Baltimore,0
HoosTerrapin,https://bitcamp2023.devpost.com/submissions/404041-hoosterrapin,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:57:28,"Inspiration

One of our group members has ADHD and this web app was built to help her and others like her overcome that difficulty focusing.

What it does

We hope to do what to studying what Venmo did to payments between friends. We've gamified and made the experience of doing work into a social event. You and your friends log in to your account from anywhere and can keep tabs on each other's progress as you complete tasks to keep each other motivated. It tracks your work and automatically updates your progress bar and social leaderboard - as well as a personal calendar to stay on task.

How we built it

We built this from the ground up using CockroachDB. Cockroach served as the database for all things HoosTerrapin - user data, tasks, friend relationships, everything we do with data is hosted on their (lack of) servers. This allows us to have data persistence and a highly survivable back-end. We used Django to implement our back end logic and controllers, implementing an MVC design. This allowed us to use the familiar flexibility of python in a web development application. We intentionally loosely coupled these pieces together to allow for growth and modularity. Finally, our front end was composed of Bootstrap on top of HTML and CSS. This allowed us to design an interactive and responsive user interface.

Challenges we ran into

None of us had used CockroachDB or Django before this project. This was a major learning curve, but there was no time to do anything but hit the ground running. We were forced to adapt and pick it up quick. We learned a lot in the process. This presented a number of unforeseen challenges that pushed us to improve.

Accomplishments that we're proud of

We're proud of the consistent design across the site, use of CockroachDB for all of our data, and generally the way we adapted to new languages and applications. Additionally, we really put effort into having full working features and not just mock-ups.

What we learned

So much.

What's next for HoosTerrapin

We hope to add a mobile version and chrome extension. We'll be setting this up with AWS to deploy the site in the coming week. We feel this can help lots of people and are excited to see what else we can do.
",https://github.com/brian-baugher/BitCamp2023,https://vimeo.com/816003271,"Cockroach Labs - Best Use of CockroachDB Serverless, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking","django, cockroachdb, python, html5, jss, css, bootstrap",Brian,Baugher,bdb7hq@virginia.edu,,No,"University of Virginia, University of Maryland","","","Great, lots of fun",Yes,"University of Virginia, University of Maryland - College Park",3,Anthony,Matar,amatar1229@gmail.com,Priyanka,Nadella,pnadell1@terpmail.umd.edu,Aarya,Dubhashi,aarya.dubhashi@gmail.com
lemonaid,https://bitcamp2023.devpost.com/submissions/404042-lemonaid,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:57:51,"Inspiration

For this project we were inspired by highly interactive games and apps such as beReal and Candy Crush, and have applied it to the field of health and wellness. Often people have trouble keeping up with their daily task such as water intake, so we’ve worked to make it an easier and more tangible experience for everyday life.

What it does

Our user-friendly app and website promote lasting, healthy relationships with nutrition and your body. Enjoy personalized vitamin and water gamified reminders, earning points for timeliness and consistency. Track your progress and unlock rewards like discounts at health-conscious stores and restaurants. Lemonaid is the ultimate platform for a healthier lifestyle! 

How we built it

Our project was built using html, css, javascript on repl.it for the website, as well as thunkable for the app.

Challenges we ran into

We ran into issues trying to implement the chatbot feature on repl.it, where we were attempting to use the API of ChatGPT to create a more interactive experience.

Accomplishments that we're proud of

We are proud of our mobile app being able to function and do what we intend our furture goals to contain of.

What we learned

We learned how to effectively navigate repl.it, gaining experience writing in html, css, and javascript, figuring out how to use an API, and working with picture recognition technology.

What's next for lemonaid

Soon, we'll integrate ChatGPT's API, allowing symptom input and reliable health advice from our up-to-date AI model, which pulls data from credible health databases. Choose Lemonaid, your guide to a healthier, happier you!
","https://replit.com/join/wkppjmffyh-ayatnoor, https://www.canva.com/design/DAFfiyTMlvQ/x2r0BQZIwTObaUnhCCmtfg/view?utm_content=DAFfiyTMlvQ&utm_campaign=designshare&utm_medium=link&utm_source=publishsharelink, https://x.thunkable.com/copy/cb66474850001b1f224acdc8323e2ae2",,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack ","html, css, javascript, thunkable, canva",Sathvika,Sangoju,sangojusathvika@gmail.com,,Yes,University of Maryland - College Park,"","",Replit and Thunkable were easy to navigate through and convey our ideas.,Yes,"University of Maryland - College Park, Uniersity of Maryland, University of Maryland - University College",3,Adrien,Rozario,adrien.rozario@gmail.com,Purva,Chimurkar,purvachimurkar2020@gmail.com,Ayat,Noor,ayat13noor@gmail.com
Planet Plant,https://bitcamp2023.devpost.com/submissions/404043-planet-plant,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:57:59,"Inspiration

In our childhood, all of us were very close to nature. We have fond memories of playing in and around trees. Even though some of us lived in cities, All of our grandparents and parents made sure that we knew the importance of trees and the environment. Children are the caretakers of the future. It is crucial to instil in them the values of environmental conservation, and one of the most fundamental values is tree planting. Teaching kids the importance of planting trees and nurturing a connection with nature will have a profound and lasting impact on their lives and the health of our planet. Kids learn about teamwork, cooperation, and collaboration as they work together to plant trees. They also develop patience, perseverance, and a sense of delayed gratification as they grow together and mature. It teaches them about responsibility, interconnectedness, appreciation for nature, and life skills, and empowers them to make a positive impact on the environment. By instilling these values in children, we are nurturing a generation that is environmentally conscious, caring, and committed to protecting our planet. Let us encourage and support our future generations in becoming stewards of the environment for a better and greener future for all.

What it does

We created an interactive platform that encourages children to plant trees and makes it the most fun activity of their day. As a user, you will plant a tree and we will tokenize it in the app and reward you for every action you take towards a better environment.  Each token represents an actual tree that you planted and is packed with fun activities that would make your day. We created an experience in which each plant has a personality and will act as a friend to the user. Our platform encourages the user to care for their plants by assigning periodic tasks that are fun and exciting.  The users will have an album of memories that they share with each plant that can be used to relive their journey together. The plants appreciate the users by sending timely motivating messages and feedback. 

How we built it

We designed our platform using Swift as the programming language due to its compatibility with Xcode and powerful features. We integrated Google Firebase for seamless user authentication and efficient database management, allowing us to store and retrieve user information as needed. We applied object-oriented programming principles to create organized and structured code using classes and enums for functions.

Challenges we ran into

The main difficulty that we faced while designing this platform was to think from a child’s perspective. We had to dive deep into children’s psychology to better understand what would appeal to them and how can we encourage them to perform tasks that promote social good. Our team had minimal experience with IOS development and UI/UX design, yet we tried our best to make the platform as appealing as possible. 

Accomplishments that we're proud of

We created a platform that is saving the environment and habituating the act of planting trees. We tailored our platform such that it appeals to a young audience and encourages them to take steps towards a better future.  We are able to provide the user with a memorable experience that we had in our childhood but the current generation of young people might be missing. 

What's next for Planet Plant

We plan to provide new features and development until we have a massive impact on the environment! Our near future updates will focus on building a community where users can show their progress and compete with others to save the environment. Additionally, we will focus on refining the user experience by improving the design of the platform and the quality of the message that we send out to the users. We plan to introduce fun mini-games that educate and engage the users. 
",https://github.com/aryandaga7/planetplant,,"Best Social Good Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","swift, swiftui, firebase, xcode",Sarthak,Patel,patelsarthakn@gmail.com,,Yes,"University of Maryland, College Park","","",We used Xcode for our app development and it was very helpful and easy to use.,Yes,University of Maryland - College Park,3,Krishnanshu,Sharma,krishnanshu20@gmail.com,Rahul,Dagar,rdagar@terpmail.umd.edu,Aryan,Daga,adaga@terpmail.umd.edu
Nutri AI Scan,https://bitcamp2023.devpost.com/submissions/404044-nutri-ai-scan,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:58:26,"Inspiration:
We were inspired to create Nutri AI Scan as a solution for people who want to make informed dietary choices but struggle with identifying the nutritional content of their food. We wanted to create a tool that could analyze food and provide users with accurate and easy-to-understand information about what they were consuming.

What it does:
Nutri AI Scan is a mobile app that allows users to scan the barcode of any food product and receive a comprehensive nutritional analysis. The app uses advanced algorithms and artificial intelligence to identify the ingredients, nutritional content, and potential allergens in the food.

How we built it:
We built Nutri AI Scan using a combination of machine learning algorithms and mobile app development. We trained the app's algorithms on a vast database of food products and nutritional information to ensure accurate results.

Challenges we ran into:
One of the biggest challenges we faced was training the algorithms to identify a wide range of food products accurately. We also had to ensure that the app was user-friendly and easy to navigate while still providing detailed information.

Accomplishments that we're proud of:
We're proud of creating an app that can provide accurate nutritional information for a wide range of food products. We're also proud of the user-friendly interface we created, which allows users to access detailed information quickly and easily.

What we learned:
We learned a lot about machine learning algorithms and the challenges of training them to identify complex food products accurately. We also learned a lot about user experience design and the importance of creating an app that is both functional and easy to use.

What's next for Nutri AI Scan:
In the future, we plan to continue improving Nutri AI Scan by adding more features and expanding our database of food products. We also plan to integrate the app with wearable devices and other health and fitness apps to provide users with a more comprehensive understanding of their nutritional needs.
",https://github.com/parthbhodia/NutriScan-AI-for-healthy-living,,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Bloomberg - Most Philanthropic Hack ","vue, javascript, machine, learning, ml, api, node.js, json, cockraoch, db, html5, css3, bootstrap, auth",Parth,Bhodia,parthbhodia08@gmail.com,,Yes,University of maryland baltimore county,"","",It was challenging and innovative.,Yes,University of Maryland - Baltimore County,3,Kulin,Patel,kulinp1@umbc.edu,Kruten,Patel,krutenp1@umbc.edu,siddhantparadox,,siddhantg314@gmail.com
SignLanguageTranslator,https://bitcamp2023.devpost.com/submissions/404045-signlanguagetranslator,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 08:59:01,"Inspiration

I was going through the TensorFlow website and saw the hand detection model. I was thinking of ways that I could use this to help people. 

What it does

It currently has the functionality to do transcribe speech. I have started the process of training the model by using images that I took. Theoretically, at the end of the that process it would be able to detect hello, thank you, no, yes, and I love you. 

How we built it

I used python to build this while taking in the model for English speech recognition from VOSK. I wrote all of the this in Jupyter Lab.

Challenges we ran into

Throughout the project I realized that I needed to download a lot of new programs. I also ran into a lot of errors while working in Jupyter notebook  which was difficult for me to identify because it was my first time using Jupyter. Currently I ran into the error of labeling the images to train the model

Accomplishments that we're proud of

I am happy that I got the speech to text translation to work as well as begun the process and captured images for the sign language translation. 

What we learned

What's next for SignLanguageTranslator
",https://github.com/k890m/BitCamp2023,,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Machine Learning Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack ","python, tensorflow, jupyter, vosk",Kanmani,Murugesan,kmurugesan125@gmail.com,,Yes,University of Maryland,"","",I used Python in Jupyter Lab.,Yes,University of Maryland - College Park,0
Recircle: The Ultimate Recyculator ,"",Draft,Pending,Additional info,04/09/2023 09:04:22,"Inspiration

Research on how little people knew about recycling and the impact that it could make. 

What it does

The app would calculate how much greenhouse gases would be saved from being emitted and how much resources you would save from being harvested and used when you recycle something. The user also has the option to sum up all their stats from previous recycling together and look at the cumulative impact that the individual had made. 

How we built it

We used Android Studio as our Software Development Kit (SDK), Kotlin as our main language and XML to make up the design of the app. 

Challenges we ran into

Brainstorming ideas, research and mostly bugs we faced while developing the app. 

Accomplishments that we're proud of

We managed to complete the app on time, and it works!! (hooray!) We are really proud of our UI choice. 

What we learned

Just dive into something you want to learn - don't wait. The sooner you get in, the deeper your knowledge and understanding will be. 

What's next for Recircle: The Ultimate Recyculator

We plan to add more new features, such as a page for environmental events near the user, a mapping section so the user would see where the nearest recycling bin/center is nearest to the user, and many others. 
","https://github.com/Yahayabb/RECIRCLE---Recircle-The-Ultimate-Recyculator-/upload, https://www.apkonline.net/filemanagerandroidonlineemulator.php?username=728595",,"Best Social Good Hack - Bitcamp, Best First Time Hack - Bitcamp","android-studio, xml, java, kotlin",Yahaya,bin Basiron,ybasiron6@gmail.com,,Yes,bpi,"","",good,Yes,Baltimore Polytechnic Institute,1,Darius,Barksdale,darius.barksdale1@gmail.com
Anit-Theft Phone Charging Hub,https://bitcamp2023.devpost.com/submissions/404055-anit-theft-phone-charging-hub,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:09:07,"Inspiration = I had the inspiration from my own charging station in my room and I thought it would be cool to implement a security system.

What it does = The Hub/Dock Senses the phone from 2 touch sensors that are reading 24/7. Then, if theres any change, the buzzers will go off to alert the phone owner. There are 1 more touch sensor to disable the alarm for the owner and a button to turn off the alarm sound.

How we built it = I used 2 small boxes as a base and the Arduino uno with the grove shield.

Challenges we ran into = I faced multiple challenges such as 1) The files wasn't working while exporting. 2) The boxes weren't weighted down. 3) The 1 hour time crunch.

Accomplishments that we're proud of = It got finished and it worked as planned.

What we learned = To manage time well and stay up reasonably late to get more stuff done.

What's next for Anit-Theft Phone Charging Hub = To make it better by including more functionality and tech to it.
",https://docs.google.com/document/d/1bWvlDQwZyrEcp9DcgsQDyGaAwxioJ8PwrBnyTFcMjSg/edit?usp=sharing,,"Best Hardware Hack - Bitcamp, Best Bitcamp Hack - Bitcamp",arduino,iVonte,Smith,idayvonte@gmail.com,,Yes,Baltimore Polytechnic Institiute,"","",I had a good tech experience from all of the staff being patient and nice to me and my group of people also from my school.,Yes,Baltimore Polytechnic Institute,0
Travel Buddy,https://bitcamp2023.devpost.com/submissions/404061-travel-buddy,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:13:18,"Inspiration

I love traveling and I have been to many places around the world. Whenever I am asked and or told which place was my favorite? It gets hard to look through a notes app and or look at images. I wanted to build an application that helps with this and could also help others. As well as be able to access social media as well.

What it does

Keeps track of countries and places you've been to around the world.  

How we built it

We used a combination of UX/UI designing and MongoDB to help us store data. 

Challenges we ran into

We ran into a lot of challenges using MongoDB and figuring out how we could combine it using Express and JavaScript. Building the backend was very hard. Figuring out as well how to use an interactive map was a very difficult challenge. 

Accomplishments that we're proud of

We are both proud of the work we did with all the different languages we used this is the first time for both of us at a Hackathon and we are very proud of the work both of us did together.

What we learned

All different types of new languages and MongoDB

What's next for Travel Buddy

More Updates to the interface and a lot of feature we left out
",https://github.com/jordanmarry/bitcamp2023,,"","mongodb, html, css, javascript, express.js",Bryan,Ventura,bryanavent@gmail.com,,Yes,"University of Maryland, University Of Maryland Baltimore County","","",The internet was not good,Yes,"",0
Testudo#,https://bitcamp2023.devpost.com/submissions/404062-testudo,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:13:58,"Motivation

Our motivation was to create a scheduler that took more information into account, in order to provide for peoples needs better. For instance, currently Coursicle (the most popular UMD scheduler) does not have any way to look at if the route in a schedule is handicap accessible, or tell you what classes are associated with certain terms: ""Semester Long Project"" for example. It simply allows you to place and remove classes on a schedule and look at them. There's no assistance/further functionality. We wanted to take a crack at a solution to this problem, and with it being heavily interdisciplinary that made it perfect for our team of differing backgrounds. 

What it does

Currently, using a slew of collected data and some machine learning. Using keywords, our system searches the details of classes to find the classes most relevant to your query. So, not only are you able to look up classes by name (ex. CMSC351), but search them by content, related courses, and key requirements. So for example, looking up ""fun cs upper level requirement"" returns popular computer science upper level requirement courses and ""easy gen ed"" returns general education courses with high GPAs.

Further goals and Challenges encountered.

Though we were unable to tie our scheduler into geographical information, that would be our next goal.  There were many difficulties in collecting the data and putting it together in a cohesive way, so that definitely held back what we were able to do this weekend.

Accomplishments that we're proud of

The functioning term search is very responsive and relatively fast on the backend. 
","https://dumapster.vercel.app/, https://github.com/PickleNik/dumapster",,"Cockroach Labs - Best Use of CockroachDB Serverless, Best UI/UX Hack - Bitcamp, Best First Time Hack - Bitcamp","python, fastapi, cockroachdb",Alex,Ortunio,alexortunio@gmail.com,,Yes,University of Maryland,"","","It was fun, the sponsors were very helpful.",No,University of Maryland - College Park,2,PickleNik,,krupin.nikita0110@gmail.com,Rose,Griffin,rosegriffin752@gmail.com
Mr. FAT (Management and Reporting Feedback Analysis Tool),https://bitcamp2023.devpost.com/submissions/404064-mr-fat-management-and-reporting-feedback-analysis-tool,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:14:16,"Inspiration

Both of the members of our team have been fortunate enough to work in management over the last few years. One of the most stressful times of year for supervisors and their direct reports is annual performance review time. Even those rare managers who have been diligent note-takers need to find their notes, compile them and communicate with the users. The feedback loop is too slow and too much information is lost for meaningful improvements to me made, even when everyone commits that ""it will be different this year"".

Out project explores an approach to performance appraisal that is participative, transparent and almost instantaneous, all without having to fill out annoying forms or send emails back and forth.

What We Built


Kibana 'Employee Deep Dive' Dashboard
Kibana 'Report Summaries' Dashboard
A system that leverages the way that we like to communicate to facilitate making feedback more transparent.


Generating Synthetic Report Data

As we didn't have access to real performance appraisal material we elected to generate some using chatGPT. We elected to use the setting of the Nuclear Power Plant from 'the simpsons' to give the model extra context to draw on. The model was given variants on the following prompt to generate lists in the language of performance appraisal notes:
Pretend you are Mr Burns from the TV show 'The Simpsons'. In 2021 you observed Homer Simpson's work and kept a log of his performance. What are 10 entries from that log? Each entry should be of the form:

On <date> @name was observed to perform to a <poor / satisfactory / good / very good / excellent> standard. This was evidenced by  <summary of action>. Their actions show <list attributes here that match the action, each prepended with a #>

For each summary of action in the log, fabricate some specific examples, using other characters or locations from around the nuclear power plant in the show 'the simpsons'

Small corrections, modifications and specific event prompts were made to generate approximately 210 observations across 10 Nuclear Power Plant Employees. 

See Chat-GPT for more

Parsing

Structured data is more useful than unstructured. It is typically also more laborious to produce and a deterrent to on-the-fly note takin. Our approach considered user ergonomics, and the knowledge that anything we can do to reduce the difficulty of use will increase likelihood of adoption. Guided by the realization that the use of very informally structured language utilizing symbols like '@' for entities and  '#' for themes we design our approach to embrace their use, rather than try to pull users towards a less natural approach. 

Our parsing approach aims to maximize the amount of information extracted from the logs themselves, as well as expose managers and employees to meta aspects like the sentiment of language used by individuals, changes in performance over time and themes that might cut across entire sectors of the workforce. Bringing together this information without drowning anyone in it is a key step towards an improved performance appraisal system. 

Report Summarization

Text summarization comes in 2 forms: Exctractive and Abstractive. Extractive summarization involves selecting a few key sentences or phrases from a long text, to produce a shorter summary, while leaving the rest of the information out. Abstractive summarization involves synthesizing a summary similar to an abstract, constructed of different sentences or phrases than appear in the long text being summarized. This method often involves combining sentences that have redundant information, and skipping details that aren't key to the overall message of the text. For this project, we perform Abstractive Summarization on synthetically generated Employee Performance Reports, as part of a tool that is aimed at helping companies, supervisors, and their employees understand key performance metrics at a glance.

The Kibana Dashboard 'Report Summaries'  were generated using a well-established Natural Language Processing Text-to-Text Transformer model, T5, that was trained on common crawl data. The summaries are generated via the pre-trained T5 model, which we modified to operate on nested batches of report data, allowing us to summarize reports chronologically, based on when they were generated.

The model condenses the entire collection of reports for each employee into a few key takeaways about his or her performance. The original reports are stored in the database and can be accessed to verify the content of the summaries for accuracy at the time of each employee's evaluation.

Report Sentiment Analysis

To further aid in understanding trends across reports, we used Python's Natural Language Tool Kit NLTK to perform Part of Speech (POS) Tagging and Sentiment Analysis on the content of the reports. Linguistically, adjectives and adverbs are typically most indicative of the sentiment of a piece of text, so we extracted those words from the reports and flagged them, creating an additional field in the ElasticSearch schema to allow for further analysis of sentiment trends via the Kibana dashboards. We also used VADER (Valence Aware Dictionary and sEntiment Reasoner),  an open-source lexicon and rule-based sentiment analysis tool, to compute overall sentiment scores for each report entered in the database.

What we learned

We took a deep dive on NLP techniques like text summarization and sentiment analysis, and learned a ton about data engineering, including new technologies like Elastic and Kibana, AWS, and Twillio. We developed out Python skills and connected everything together to solve the problem we set out to address at the start of Bitcamp.

What's next for Mr. FAT (Management and Reporting Feedback Analysis Tool)

Future work for this begins from a position where we have achieved almost all of the goals we set for the hackathon.
We want to maximize our usability. That means finding ways to keep the interface (simple text with familiar language) simple while improving the integrity of the data. We see improvements to our parsing suite, deduplication of the database and cleaning up the codebase as essential.
We want to improve the availability, we see first steps as extending the SMS functionality to an 'always-on' system and migrating the whole system to the cloud.
",https://github.com/osullik/bc-autoreporter,,"Best Moonshot Hack - Bitcamp, Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Capital One - Best Financial Hack, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Most Creative Use of Twilio - Major League Hacking, Bloomberg - Most Philanthropic Hack , Best Bitcamp Hack - Bitcamp","nltk, pytorch, python, twilio, natural-language-processing, elasticsearch, amazon-web-services, kibana",Nicole Rose,Schneider,nsch@umd.edu,,Yes,University of Maryland,"","","We used GitHub, Twillio, AWS, Kibana, and Elastic.",No,"",1,Kent Daniel,O'Sullivan,osullik@umd.edu
Flycamp,https://bitcamp2023.devpost.com/submissions/404068-flycamp,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:15:25,"Inspiration

There have been at least two major Haz Mat disasters in the last 2 months or so. Tankers have derailed/overturned causing great harm to communities and ecosystems. First responders are often tasked with the difficult job of identifying and gauging the concentration and danger of the spilled chemicals

We wanted to build a fixed-wing drone that drops sensor payloads to help these responders get detailed information about concentration 

What it does

Our plane (almost) flies. We were not able to generate enough thrust to take it off the ground, though we did develop software that tapped into an off-the-shelf game controller and relayed commands over the internet to an embedded linux SBC, which used an Arduino to address servos. Due to ""integration hell"" we weren't able to get all of these moving parts to work together, but we did have quite a few successes. For example, we successfully built the cardboard plane, operate and control the ESC, operate several control surfaces, create an airfoil using cardboard and 3d-printed parts. 

How we built it

First, we built an airfoil using pizza boxes from dinner. These pizza boxes were a little greasy and we decided that some of the stuck-on toppings (olives, bell peppers, tomato sauce) weren't the best for drag or structural integrity. We also wanted longer pieces of continuous cardboard so we could have a larger wing and generate more lift. So we went to Walmart to gather some more tools, and found large sheets of cardboard meant for moving. We spent the next (uncountable) hours carefully designing and assembling plane. 

A game controller talks to a Rust client/ground station which sends commands to a Rust server on an embedded linux machine. The embedded linux machine uses UART to send commands to an Arduino, which keeps track of all the servos and the speed controller on the brushless DC motor, which turns a 3d-printed propeller.

Challenges we ran into

The protocol that the ESC spoke didn't seem very well documented, in fact the manufacturer didn't say any specific protocol. We discovered it used some weird PWM thing.
","",,"","cardboard, 3d-printing",Dhruv,Gramopadhye,dgramopadhye@gmail.com,,No,"Embry Riddle, George Mason","","",What a great time!,Yes,George Mason University,0
TerpTally,https://bitcamp2023.devpost.com/submissions/404071-terptally,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:17:53,"Inspiration

We were inspired to create ways to make finance and looking at your spending fun. Inspired by by popular social media apps and ideas we looked to make the first ever ""Spotify Wrapped"" of spending, encouraging users to look closer at their finances.

What it does

TerpTally is a tool to analyze and visualize your spending histories. It converts and uploads your data into a more readable and parseable format that allows for a variety of visualizations and analyses such as comparing your data to the average American by comparing your data to the Consumer Expenditure Survey.

How we built it

The backend is hosted with firebase while the frontend was built with flutter with a priority on the android release target.

Challenges we ran into

This was the first time working with flutter for all of us and the majority of us were first time hackers so learning new technologies and hackathons in general was a very challenging task!

Accomplishments that we're proud of

We're proud of our firebase backend as it's styled in a way that allows for future innovation and expansion on our ideas

What we learned

We learned how to work together as a team and technologies such as flutter and firebase

What's next for TerpTally

Additional graph visualization formats, general UI improvements, and even more incorpoation of public sector data. Additionally because the data is hosted securely online we can further the social media aspect by perhaps allowing you to compare your spending to your friends for certain topics
",https://github.com/MericGit/TerpTally,,"Bloomberg Industry Group - Best Public Sector Hack, Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp, Capital One - Best Financial Hack, Best Bitcamp Hack - Bitcamp","flutter, dart, firebase",Lawrence,Zhang,lawrencezhang04@gmail.com,,Yes,University of Maryland,"","",We had a great time making our hack with a specific theme in mind from the sponsors which made us really look towards a financial focus.,Yes,Academy of Information Technology and Engineering,1,Lance,Uymatiao,lanceu0128@gmail.com
Portfolio Generator,"",Draft,Pending,Project details,04/09/2023 09:22:10,"Inspiration

We thought about making that thing that helps people to market their business.

What it does

How we built it

Fast API Backend Cockroach DB and React

Challenges we ran into

Figuring out the layout of the project

Accomplishments that we're proud of

What we learned

What's next for Portfolio Generator
","",,"","react, fastapi, sql",Asem,Shaath,shaathasem@gmail.com,,"","","","","","",University of Maryland - College Park,0
Detective Deductible ,https://bitcamp2023.devpost.com/submissions/404076-detective-deductible,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:23:16,"Taxes suck.

I found out the hard way 2 years ago when I got audited by the IRS for not paying any income tax from my small business. I got a bill for $2000 plus interest/penalties and man was that a rough day. It wasn’t because I was trying to scam the government, but I honestly had no clue how taxes worked. I never learned about it in school and I spent my time playing Minecraft instead reading up on the Federal Tax Code to see what new deductions are available this year.

That's why we spent the past 36 hours working on Detective Deductible, a simple, cunning tool that helps average joes like me identify their current tax liability, just by looking at what they spend our money on! 

Fill in a simple form that asks about basic questions like your income, student eligibility, number of children, and filing status. Then upload a file consisting of all the things you paid for in the last year, and Detective Deductible will harness the power of AI and its custom algorithm to calculate your end of year tax balance to see how much you owe or how much your refund is 🙂

Simple Right?
Well behind the scenes it gets a lot more complex, here’s the inside scoop!

GPT-3 powers our payment classification model. So anytime you enter your payment history, our fine-tuned model will determine whether or not that payment may be eligible for a tax deduction or credit, and then determine what the following credit/deduction might be (we use our custom algorithm to figure out how much applies in your unique situation). So far our model supports the following deductions and credits:

American Opportunity Tax Credit (for broke college students like us!)
State Taxes Paid Deduction
Mortgage Interest Payment Deduction
Medical and Dental Expense Deduction
Cash Donations to Qualifying charities

We trained our model with 800+ rows of labeled training data and fine tuned the parameters until we achieved passable accuracy rates.

Our tax eligibility and calculation algorithm is built upon the foundations of the US Federal Tax Code (we did simplify cases for the sake of time; one could spend days, if not weeks, exploring the strange world of New York taxes being imposed on cream cheese and bagels). But we did get things pretty accurate when it comes to the deductions and credits that our model supported. 

Whenever a payment gets classified our algorithm runs to check if you match the eligibility of claiming the deduction/credit and if you do, how much of that benefit you can actually receive. Deductions reduce your taxable income and Credits reduce your tax liability, and our algorithm will calculate the effects of both to determine your EOY tax tax liability.

Here's some terminology Detective Deductible wants to throw at you:

Standard Deduction vs Itemized Deductions

In the binary world of tax deductions you can choose the standard deduction or choose to itemize your deductions. The process we described above calculates your itemized deductions, these are deductions to your taxable income that involve multiple “items” like mortgage interest payments or losses or donations to charities. The standard deduction is a fixed amount that reduces your taxable income by $12950 no questions asked! (for single filers, $25,900 for joint filers $19,400 for heads of household) 

This is an important consideration for determining your EOY tax liability because if your itemized deductions are less than the standard deductions you will be shooting your own wallet by choosing to itemize instead of taking the standard deduction. Because this is so important we factor this into our calculation and allow you to compare the difference in taxable income. 

It’s been 36 hours since Detective Deductible has gotten any sleep and we don’t want to overwork him or we might run into some legal troubles. That's all for now, hope to see you at the demo!
","https://github.com/echoumcp1/Bitcamp2023, https://drive.google.com/drive/folders/1LZ_EyuHWU1pV9BFVaIPjgCyDccl527JH?usp=sharing",,"Capital One - Best Financial Hack, Best Machine Learning Hack - Bitcamp, Best Accessibility Hack sponsored by Fidelity - Major League Hacking, Bloomberg - Most Philanthropic Hack ","react, gpt, node.js, express.js",scentedsoap,Zhang,bzhangco@gmail.com,,Yes,University of Maryland,"","",Twas lit,Yes,"University of Maryland - College Park, University of Maryland, College Park",3,Anna,Phung,akaiphung@gmail.com,Keva,Singhal,singhal.kev@gmail.com,Ethan,Chou,echou1@terpmail.umd.edu
Quiz App,https://bitcamp2023.devpost.com/submissions/404078-quiz-app,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:23:36,"Inspiration

My inspiration for this project was that I was really bored, and didn't want to entertain myself with the same old mindless activity

What it does

Quizzes you on general, useless info.

How we built it

I built it using VisualStudioCode. 

Challenges we ran into

Learning to program. 

Accomplishments that we're proud of

I was able to make it look appealing. 

What we learned

How to write basic JavaScript code. 

What's next for Quiz App

Finishing it, as there are multiple bugs that I have really no idea how to fix. 
","",,"","javascript, html",Omar,Elfernani,omarelfernani1@gmail.com,,Yes,None,None,GitHub has a very friendly UI.,"Everything was absolutely amazing, I was able to network with people throughout the entire stadium and enjoyed talking to the sponsors, whom of which I was surprised to learn were all companies that serviced companies worth billionaires, and or were worth billions.",Yes,Baltimore Polytechnic Institute,0
LiDAR in Heavy Machinery ,"",Draft,Pending,Additional info,04/09/2023 09:28:09,"Inspiration

uWhat it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for LiDAR in Heavy Machinery
","",,"",arduino,Shivam,Agrawal,shivtennis7@gmail.com,,Yes,None,"","",Good,Yes,"",0
At The Wheel,"",Draft,Pending,Project overview,04/09/2023 09:28:36,"","",,"","",Jaymin,Jhaveri,jayminjhaveri10@gmail.com,,"","","","","","",George Mason University,0
Pro CV,"",Draft,Pending,Project details,04/09/2023 09:29:57,"Inspiration

The app was inspired by a dire need in the community. Almost everyone I know have built a CV at some point in their time. A lot of people have tried to build portfolios as well. But reusing a CV for multiple jobs without catering to specific needs is a common mistake. But as lousy people like me build just one CV for all jobs, this innovation of ours can help them solve this issue.

What it does

Using AI, it generates CV for the user from their data. It also generates attractive portfolio website

How we built it

We used FastAPI in the backend and ChatGPT openAI module for summarization. For front end, we used react

Challenges we ran into

time

Accomplishments that we're proud of

learned a lot along the way

What we learned

Everything

What's next for Pro CV

Complete the app. 
","",,"","cockroachdb, fastapi, react-js, html/css, javascript, ml",A H M Rezaul,Karim,akarim9@gmu.edu,,"","","","","","","George Mason University, Islamic University of Technology, University of Maryland - College Park",3,Md. Mushfiqur,Rahman,mushfiqur11@iut-dhaka.edu,Asem,Shaath,shaathasem@gmail.com,Fardin,Ahsan,fardinahsan11@gmail.com
At the Wheel,https://bitcamp2023.devpost.com/submissions/404088-at-the-wheel,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:30:56,"Inspiration

100,000 crashes per year occur from drowsy or sleepy drivers. We wanted to help reduce the amount of exhausted drivers there were falling asleep at the wheel so we made a pair of glasses that does that.

What it does

The glasses utilizes a LiDAR sensor to detect when a drivers head nods downwards. Once it detects a driver has nodded downward, there will be an interactive element, which could be a buzzer, but for now is a button the user has to press to disable the alarm. After 3 offenses, an SMS will get sent to the driver's emergency contact notifying them potentially of their location, and a warning. This data gets put onto a Google Cloud BigQuery instance for data monitoring.

How we built it

Used an esp32 with a LiDAR sensor connected to a pair of glasses which then gives feedback and enables an LED once it detects a driver would have dozed off.  For the SMS we used Twilio, and for the data we used Google Cloud's BigQuery.

Challenges we ran into

Setting up Google Cloud SQL database was tough due to it being new territory for us, and on the hardware side, choosing a sensor was limited. We originally wanted to use an accelerometer, but after only having faulty sensors, we decided to take up the challenge of making this work with nothing but a LiDAR.

Accomplishments that we're proud of

Figured out how to get the BigQuery database to display results of our sensor read-outs, additionally, emergency contact messaging was able to be integrated seamlessly and works as intended.

What we learned

Learned how to use Google Cloud, how to implement Twilio, how to get serial port readouts using C#, as well as graphic design for the logo.

What's next for At the Wheel

Implementing a buzzer for a more immediate feedback for the driver and using a more reliable sensor like an accelerometer. Using data models can provide analytics for trucking companies to monitor their drivers and see who is most at risk.
",https://github.com/JayminJ10/UMD-Bitcamp-2023,,"People's Choice Hack - Bitcamp, Most Creative Use of Twilio - Major League Hacking, Best Hardware Hack - Bitcamp","google-bigquery, c++, c#, esp32, lidar, google-cloud-sql, twilio, google-cloud",Alexus,Banks,lexybanks1@gmail.com,,Yes,George Mason University,"","",Twilio was seamless to use with C#.,Yes,George Mason University,1,Jaymin,Jhaveri,jayminjhaveri10@gmail.com
Using LiDAR in Heavy Machinery,https://bitcamp2023.devpost.com/submissions/404089-using-lidar-in-heavy-machinery,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:31:40,"I learned a lot.
And it helped me.
",http://google.com,,"Bloomberg - Most Philanthropic Hack , Best Hardware Hack - Bitcamp, Best Bitcamp Hack - Bitcamp",arduino,Shivam,Agrawal,shivtennis7@gmail.com,,Yes,Central Magnet High School,Only mine,Reviewed All fairs,Great!,Yes,"",0
Climate Control,https://bitcamp2023.devpost.com/submissions/404102-climate-control,Submitted (Gallery/Visible),Pending,Submit,04/09/2023 09:36:29,"Inspiration

What it does

Predict effects on climate change such as temperature in the future

How we built it

We built is using python and pytorch

Challenges we ran into

Manipulating the data

Accomplishments that we're proud of

We got the model to predict with minimal loss

What we learned

We learned better machine learning skills

What's next for Climate Control
","",,"",python,strchris01,Ajayi,lightskinchris01@icloud.com,,No,BPI,"","",It was fun,No,Baltimore Polytechnic Institute,2,Joshua,Davey,ccdavey1@outlook.com,ziaire,,bziaire6@gmail.com
Untitled,"",Draft,Pending,Manage team,04/09/2023 09:42:34,"","",,"","",Varun,Ramani,varun.ramani@gmail.com,,"","","","","","",University of Maryland - College Park,0
